
Neji_Meteo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d4b0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f8  0800d640  0800d640  0000e640  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800da38  0800da38  0000f1f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800da38  0800da38  0000ea38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800da40  0800da40  0000f1f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800da40  0800da40  0000ea40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800da44  0800da44  0000ea44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f4  20000000  0800da48  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f1f4  2**0
                  CONTENTS
 10 .bss          000009fc  200001f4  200001f4  0000f1f4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000bf0  20000bf0  0000f1f4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f1f4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015fb6  00000000  00000000  0000f224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003699  00000000  00000000  000251da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010d8  00000000  00000000  00028878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cea  00000000  00000000  00029950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024aa7  00000000  00000000  0002a63a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017557  00000000  00000000  0004f0e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cf634  00000000  00000000  00066638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00135c6c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005854  00000000  00000000  00135cb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000092  00000000  00000000  0013b504  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f4 	.word	0x200001f4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d628 	.word	0x0800d628

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f8 	.word	0x200001f8
 80001cc:	0800d628 	.word	0x0800d628

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_ldivmod>:
 8000ba8:	b97b      	cbnz	r3, 8000bca <__aeabi_ldivmod+0x22>
 8000baa:	b972      	cbnz	r2, 8000bca <__aeabi_ldivmod+0x22>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bfbe      	ittt	lt
 8000bb0:	2000      	movlt	r0, #0
 8000bb2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000bb6:	e006      	blt.n	8000bc6 <__aeabi_ldivmod+0x1e>
 8000bb8:	bf08      	it	eq
 8000bba:	2800      	cmpeq	r0, #0
 8000bbc:	bf1c      	itt	ne
 8000bbe:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000bc2:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc6:	f000 b9b5 	b.w	8000f34 <__aeabi_idiv0>
 8000bca:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bce:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd2:	2900      	cmp	r1, #0
 8000bd4:	db09      	blt.n	8000bea <__aeabi_ldivmod+0x42>
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	db1a      	blt.n	8000c10 <__aeabi_ldivmod+0x68>
 8000bda:	f000 f84d 	bl	8000c78 <__udivmoddi4>
 8000bde:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be6:	b004      	add	sp, #16
 8000be8:	4770      	bx	lr
 8000bea:	4240      	negs	r0, r0
 8000bec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	db1b      	blt.n	8000c2c <__aeabi_ldivmod+0x84>
 8000bf4:	f000 f840 	bl	8000c78 <__udivmoddi4>
 8000bf8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bfc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c00:	b004      	add	sp, #16
 8000c02:	4240      	negs	r0, r0
 8000c04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c08:	4252      	negs	r2, r2
 8000c0a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c0e:	4770      	bx	lr
 8000c10:	4252      	negs	r2, r2
 8000c12:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c16:	f000 f82f 	bl	8000c78 <__udivmoddi4>
 8000c1a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c22:	b004      	add	sp, #16
 8000c24:	4240      	negs	r0, r0
 8000c26:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c2a:	4770      	bx	lr
 8000c2c:	4252      	negs	r2, r2
 8000c2e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c32:	f000 f821 	bl	8000c78 <__udivmoddi4>
 8000c36:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c3e:	b004      	add	sp, #16
 8000c40:	4252      	negs	r2, r2
 8000c42:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96a 	b.w	8000f34 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	460c      	mov	r4, r1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d14e      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c84:	4694      	mov	ip, r2
 8000c86:	458c      	cmp	ip, r1
 8000c88:	4686      	mov	lr, r0
 8000c8a:	fab2 f282 	clz	r2, r2
 8000c8e:	d962      	bls.n	8000d56 <__udivmoddi4+0xde>
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0320 	rsb	r3, r2, #32
 8000c96:	4091      	lsls	r1, r2
 8000c98:	fa20 f303 	lsr.w	r3, r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	4319      	orrs	r1, r3
 8000ca2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f f68c 	uxth.w	r6, ip
 8000cae:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cb6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb04 f106 	mul.w	r1, r4, r6
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cce:	f080 8112 	bcs.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 810f 	bls.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd8:	3c02      	subs	r4, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a59      	subs	r1, r3, r1
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f606 	mul.w	r6, r0, r6
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x94>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cfe:	f080 80fc 	bcs.w	8000efa <__udivmoddi4+0x282>
 8000d02:	429e      	cmp	r6, r3
 8000d04:	f240 80f9 	bls.w	8000efa <__udivmoddi4+0x282>
 8000d08:	4463      	add	r3, ip
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d12:	2100      	movs	r1, #0
 8000d14:	b11d      	cbz	r5, 8000d1e <__udivmoddi4+0xa6>
 8000d16:	40d3      	lsrs	r3, r2
 8000d18:	2200      	movs	r2, #0
 8000d1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d905      	bls.n	8000d32 <__udivmoddi4+0xba>
 8000d26:	b10d      	cbz	r5, 8000d2c <__udivmoddi4+0xb4>
 8000d28:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e7f5      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d32:	fab3 f183 	clz	r1, r3
 8000d36:	2900      	cmp	r1, #0
 8000d38:	d146      	bne.n	8000dc8 <__udivmoddi4+0x150>
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	d302      	bcc.n	8000d44 <__udivmoddi4+0xcc>
 8000d3e:	4290      	cmp	r0, r2
 8000d40:	f0c0 80f0 	bcc.w	8000f24 <__udivmoddi4+0x2ac>
 8000d44:	1a86      	subs	r6, r0, r2
 8000d46:	eb64 0303 	sbc.w	r3, r4, r3
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	2d00      	cmp	r5, #0
 8000d4e:	d0e6      	beq.n	8000d1e <__udivmoddi4+0xa6>
 8000d50:	e9c5 6300 	strd	r6, r3, [r5]
 8000d54:	e7e3      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	f040 8090 	bne.w	8000e7c <__udivmoddi4+0x204>
 8000d5c:	eba1 040c 	sub.w	r4, r1, ip
 8000d60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d64:	fa1f f78c 	uxth.w	r7, ip
 8000d68:	2101      	movs	r1, #1
 8000d6a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb08 4416 	mls	r4, r8, r6, r4
 8000d76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7a:	fb07 f006 	mul.w	r0, r7, r6
 8000d7e:	4298      	cmp	r0, r3
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x11c>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x11a>
 8000d8c:	4298      	cmp	r0, r3
 8000d8e:	f200 80cd 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d92:	4626      	mov	r6, r4
 8000d94:	1a1c      	subs	r4, r3, r0
 8000d96:	fa1f f38e 	uxth.w	r3, lr
 8000d9a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d9e:	fb08 4410 	mls	r4, r8, r0, r4
 8000da2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000da6:	fb00 f707 	mul.w	r7, r0, r7
 8000daa:	429f      	cmp	r7, r3
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x148>
 8000dae:	eb1c 0303 	adds.w	r3, ip, r3
 8000db2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db6:	d202      	bcs.n	8000dbe <__udivmoddi4+0x146>
 8000db8:	429f      	cmp	r7, r3
 8000dba:	f200 80b0 	bhi.w	8000f1e <__udivmoddi4+0x2a6>
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	1bdb      	subs	r3, r3, r7
 8000dc2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc6:	e7a5      	b.n	8000d14 <__udivmoddi4+0x9c>
 8000dc8:	f1c1 0620 	rsb	r6, r1, #32
 8000dcc:	408b      	lsls	r3, r1
 8000dce:	fa22 f706 	lsr.w	r7, r2, r6
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dd8:	fa04 f301 	lsl.w	r3, r4, r1
 8000ddc:	ea43 030c 	orr.w	r3, r3, ip
 8000de0:	40f4      	lsrs	r4, r6
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	0c38      	lsrs	r0, r7, #16
 8000de8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dec:	fbb4 fef0 	udiv	lr, r4, r0
 8000df0:	fa1f fc87 	uxth.w	ip, r7
 8000df4:	fb00 441e 	mls	r4, r0, lr, r4
 8000df8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dfc:	fb0e f90c 	mul.w	r9, lr, ip
 8000e00:	45a1      	cmp	r9, r4
 8000e02:	fa02 f201 	lsl.w	r2, r2, r1
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x1a6>
 8000e08:	193c      	adds	r4, r7, r4
 8000e0a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e0e:	f080 8084 	bcs.w	8000f1a <__udivmoddi4+0x2a2>
 8000e12:	45a1      	cmp	r9, r4
 8000e14:	f240 8081 	bls.w	8000f1a <__udivmoddi4+0x2a2>
 8000e18:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e1c:	443c      	add	r4, r7
 8000e1e:	eba4 0409 	sub.w	r4, r4, r9
 8000e22:	fa1f f983 	uxth.w	r9, r3
 8000e26:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e2a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e2e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e32:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e36:	45a4      	cmp	ip, r4
 8000e38:	d907      	bls.n	8000e4a <__udivmoddi4+0x1d2>
 8000e3a:	193c      	adds	r4, r7, r4
 8000e3c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e40:	d267      	bcs.n	8000f12 <__udivmoddi4+0x29a>
 8000e42:	45a4      	cmp	ip, r4
 8000e44:	d965      	bls.n	8000f12 <__udivmoddi4+0x29a>
 8000e46:	3b02      	subs	r3, #2
 8000e48:	443c      	add	r4, r7
 8000e4a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e4e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e52:	eba4 040c 	sub.w	r4, r4, ip
 8000e56:	429c      	cmp	r4, r3
 8000e58:	46ce      	mov	lr, r9
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	d351      	bcc.n	8000f02 <__udivmoddi4+0x28a>
 8000e5e:	d04e      	beq.n	8000efe <__udivmoddi4+0x286>
 8000e60:	b155      	cbz	r5, 8000e78 <__udivmoddi4+0x200>
 8000e62:	ebb8 030e 	subs.w	r3, r8, lr
 8000e66:	eb64 040c 	sbc.w	r4, r4, ip
 8000e6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6e:	40cb      	lsrs	r3, r1
 8000e70:	431e      	orrs	r6, r3
 8000e72:	40cc      	lsrs	r4, r1
 8000e74:	e9c5 6400 	strd	r6, r4, [r5]
 8000e78:	2100      	movs	r1, #0
 8000e7a:	e750      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000e7c:	f1c2 0320 	rsb	r3, r2, #32
 8000e80:	fa20 f103 	lsr.w	r1, r0, r3
 8000e84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e88:	fa24 f303 	lsr.w	r3, r4, r3
 8000e8c:	4094      	lsls	r4, r2
 8000e8e:	430c      	orrs	r4, r1
 8000e90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e94:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e98:	fa1f f78c 	uxth.w	r7, ip
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ea4:	0c23      	lsrs	r3, r4, #16
 8000ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eaa:	fb00 f107 	mul.w	r1, r0, r7
 8000eae:	4299      	cmp	r1, r3
 8000eb0:	d908      	bls.n	8000ec4 <__udivmoddi4+0x24c>
 8000eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eba:	d22c      	bcs.n	8000f16 <__udivmoddi4+0x29e>
 8000ebc:	4299      	cmp	r1, r3
 8000ebe:	d92a      	bls.n	8000f16 <__udivmoddi4+0x29e>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	4463      	add	r3, ip
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	b2a4      	uxth	r4, r4
 8000ec8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ecc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ed0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ed4:	fb01 f307 	mul.w	r3, r1, r7
 8000ed8:	42a3      	cmp	r3, r4
 8000eda:	d908      	bls.n	8000eee <__udivmoddi4+0x276>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ee4:	d213      	bcs.n	8000f0e <__udivmoddi4+0x296>
 8000ee6:	42a3      	cmp	r3, r4
 8000ee8:	d911      	bls.n	8000f0e <__udivmoddi4+0x296>
 8000eea:	3902      	subs	r1, #2
 8000eec:	4464      	add	r4, ip
 8000eee:	1ae4      	subs	r4, r4, r3
 8000ef0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ef4:	e739      	b.n	8000d6a <__udivmoddi4+0xf2>
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	e6f0      	b.n	8000cdc <__udivmoddi4+0x64>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e706      	b.n	8000d0c <__udivmoddi4+0x94>
 8000efe:	45c8      	cmp	r8, r9
 8000f00:	d2ae      	bcs.n	8000e60 <__udivmoddi4+0x1e8>
 8000f02:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f06:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f0a:	3801      	subs	r0, #1
 8000f0c:	e7a8      	b.n	8000e60 <__udivmoddi4+0x1e8>
 8000f0e:	4631      	mov	r1, r6
 8000f10:	e7ed      	b.n	8000eee <__udivmoddi4+0x276>
 8000f12:	4603      	mov	r3, r0
 8000f14:	e799      	b.n	8000e4a <__udivmoddi4+0x1d2>
 8000f16:	4630      	mov	r0, r6
 8000f18:	e7d4      	b.n	8000ec4 <__udivmoddi4+0x24c>
 8000f1a:	46d6      	mov	lr, sl
 8000f1c:	e77f      	b.n	8000e1e <__udivmoddi4+0x1a6>
 8000f1e:	4463      	add	r3, ip
 8000f20:	3802      	subs	r0, #2
 8000f22:	e74d      	b.n	8000dc0 <__udivmoddi4+0x148>
 8000f24:	4606      	mov	r6, r0
 8000f26:	4623      	mov	r3, r4
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e70f      	b.n	8000d4c <__udivmoddi4+0xd4>
 8000f2c:	3e02      	subs	r6, #2
 8000f2e:	4463      	add	r3, ip
 8000f30:	e730      	b.n	8000d94 <__udivmoddi4+0x11c>
 8000f32:	bf00      	nop

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2203      	movs	r2, #3
 8000f44:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2200      	movs	r2, #0
 8000f4a:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2203      	movs	r2, #3
 8000f50:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2203      	movs	r2, #3
 8000f56:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2203      	movs	r2, #3
 8000f5c:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2203      	movs	r2, #3
 8000f62:	715a      	strb	r2, [r3, #5]
}
 8000f64:	bf00      	nop
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b08a      	sub	sp, #40	@ 0x28
 8000f74:	af04      	add	r7, sp, #16
 8000f76:	60f8      	str	r0, [r7, #12]
 8000f78:	460b      	mov	r3, r1
 8000f7a:	607a      	str	r2, [r7, #4]
 8000f7c:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8000f8a:	7afb      	ldrb	r3, [r7, #11]
 8000f8c:	b29a      	uxth	r2, r3
 8000f8e:	8af9      	ldrh	r1, [r7, #22]
 8000f90:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000f94:	9302      	str	r3, [sp, #8]
 8000f96:	2302      	movs	r3, #2
 8000f98:	9301      	str	r3, [sp, #4]
 8000f9a:	f107 0314 	add.w	r3, r7, #20
 8000f9e:	9300      	str	r3, [sp, #0]
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	f004 f8ff 	bl	80051a4 <HAL_I2C_Mem_Read>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d10b      	bne.n	8000fc4 <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8000fac:	7d7b      	ldrb	r3, [r7, #21]
 8000fae:	021b      	lsls	r3, r3, #8
 8000fb0:	b21a      	sxth	r2, r3
 8000fb2:	7d3b      	ldrb	r3, [r7, #20]
 8000fb4:	b21b      	sxth	r3, r3
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	b21b      	sxth	r3, r3
 8000fba:	b29a      	uxth	r2, r3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	801a      	strh	r2, [r3, #0]
		return true;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	e000      	b.n	8000fc6 <read_register16+0x56>
	} else
		return false;
 8000fc4:	2300      	movs	r3, #0

}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3718      	adds	r7, #24
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}

08000fce <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 8000fce:	b590      	push	{r4, r7, lr}
 8000fd0:	b08b      	sub	sp, #44	@ 0x2c
 8000fd2:	af04      	add	r7, sp, #16
 8000fd4:	60f8      	str	r0, [r7, #12]
 8000fd6:	607a      	str	r2, [r7, #4]
 8000fd8:	461a      	mov	r2, r3
 8000fda:	460b      	mov	r3, r1
 8000fdc:	72fb      	strb	r3, [r7, #11]
 8000fde:	4613      	mov	r3, r2
 8000fe0:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000fe6:	005b      	lsls	r3, r3, #1
 8000fe8:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8000fee:	7afb      	ldrb	r3, [r7, #11]
 8000ff0:	b29a      	uxth	r2, r3
 8000ff2:	7abb      	ldrb	r3, [r7, #10]
 8000ff4:	b29b      	uxth	r3, r3
 8000ff6:	8af9      	ldrh	r1, [r7, #22]
 8000ff8:	f241 3488 	movw	r4, #5000	@ 0x1388
 8000ffc:	9402      	str	r4, [sp, #8]
 8000ffe:	9301      	str	r3, [sp, #4]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	9300      	str	r3, [sp, #0]
 8001004:	2301      	movs	r3, #1
 8001006:	f004 f8cd 	bl	80051a4 <HAL_I2C_Mem_Read>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d101      	bne.n	8001014 <read_data+0x46>
		return 0;
 8001010:	2300      	movs	r3, #0
 8001012:	e000      	b.n	8001016 <read_data+0x48>
	else
		return 1;
 8001014:	2301      	movs	r3, #1

}
 8001016:	4618      	mov	r0, r3
 8001018:	371c      	adds	r7, #28
 800101a:	46bd      	mov	sp, r7
 800101c:	bd90      	pop	{r4, r7, pc}

0800101e <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 800101e:	b580      	push	{r7, lr}
 8001020:	b082      	sub	sp, #8
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	461a      	mov	r2, r3
 800102a:	2188      	movs	r1, #136	@ 0x88
 800102c:	6878      	ldr	r0, [r7, #4]
 800102e:	f7ff ff9f 	bl	8000f70 <read_register16>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d06f      	beq.n	8001118 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	3302      	adds	r3, #2
 800103c:	461a      	mov	r2, r3
 800103e:	218a      	movs	r1, #138	@ 0x8a
 8001040:	6878      	ldr	r0, [r7, #4]
 8001042:	f7ff ff95 	bl	8000f70 <read_register16>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d065      	beq.n	8001118 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	3304      	adds	r3, #4
 8001050:	461a      	mov	r2, r3
 8001052:	218c      	movs	r1, #140	@ 0x8c
 8001054:	6878      	ldr	r0, [r7, #4]
 8001056:	f7ff ff8b 	bl	8000f70 <read_register16>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d05b      	beq.n	8001118 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	3306      	adds	r3, #6
 8001064:	461a      	mov	r2, r3
 8001066:	218e      	movs	r1, #142	@ 0x8e
 8001068:	6878      	ldr	r0, [r7, #4]
 800106a:	f7ff ff81 	bl	8000f70 <read_register16>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d051      	beq.n	8001118 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	3308      	adds	r3, #8
 8001078:	461a      	mov	r2, r3
 800107a:	2190      	movs	r1, #144	@ 0x90
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f7ff ff77 	bl	8000f70 <read_register16>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d047      	beq.n	8001118 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	330a      	adds	r3, #10
 800108c:	461a      	mov	r2, r3
 800108e:	2192      	movs	r1, #146	@ 0x92
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f7ff ff6d 	bl	8000f70 <read_register16>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d03d      	beq.n	8001118 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	330c      	adds	r3, #12
 80010a0:	461a      	mov	r2, r3
 80010a2:	2194      	movs	r1, #148	@ 0x94
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f7ff ff63 	bl	8000f70 <read_register16>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d033      	beq.n	8001118 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	330e      	adds	r3, #14
 80010b4:	461a      	mov	r2, r3
 80010b6:	2196      	movs	r1, #150	@ 0x96
 80010b8:	6878      	ldr	r0, [r7, #4]
 80010ba:	f7ff ff59 	bl	8000f70 <read_register16>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d029      	beq.n	8001118 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	3310      	adds	r3, #16
 80010c8:	461a      	mov	r2, r3
 80010ca:	2198      	movs	r1, #152	@ 0x98
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f7ff ff4f 	bl	8000f70 <read_register16>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d01f      	beq.n	8001118 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	3312      	adds	r3, #18
 80010dc:	461a      	mov	r2, r3
 80010de:	219a      	movs	r1, #154	@ 0x9a
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f7ff ff45 	bl	8000f70 <read_register16>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d015      	beq.n	8001118 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	3314      	adds	r3, #20
 80010f0:	461a      	mov	r2, r3
 80010f2:	219c      	movs	r1, #156	@ 0x9c
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f7ff ff3b 	bl	8000f70 <read_register16>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d00b      	beq.n	8001118 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 8001104:	461a      	mov	r2, r3
 8001106:	219e      	movs	r1, #158	@ 0x9e
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	f7ff ff31 	bl	8000f70 <read_register16>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <read_calibration_data+0xfa>

		return true;
 8001114:	2301      	movs	r3, #1
 8001116:	e000      	b.n	800111a <read_calibration_data+0xfc>
	}

	return false;
 8001118:	2300      	movs	r3, #0
}
 800111a:	4618      	mov	r0, r3
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}

08001122 <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 8001122:	b580      	push	{r7, lr}
 8001124:	b084      	sub	sp, #16
 8001126:	af00      	add	r7, sp, #0
 8001128:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	f103 0218 	add.w	r2, r3, #24
 8001130:	2301      	movs	r3, #1
 8001132:	21a1      	movs	r1, #161	@ 0xa1
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f7ff ff4a 	bl	8000fce <read_data>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d14b      	bne.n	80011d8 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	331a      	adds	r3, #26
 8001144:	461a      	mov	r2, r3
 8001146:	21e1      	movs	r1, #225	@ 0xe1
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f7ff ff11 	bl	8000f70 <read_register16>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d041      	beq.n	80011d8 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	f103 021c 	add.w	r2, r3, #28
 800115a:	2301      	movs	r3, #1
 800115c:	21e3      	movs	r1, #227	@ 0xe3
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	f7ff ff35 	bl	8000fce <read_data>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d136      	bne.n	80011d8 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 800116a:	f107 030e 	add.w	r3, r7, #14
 800116e:	461a      	mov	r2, r3
 8001170:	21e4      	movs	r1, #228	@ 0xe4
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f7ff fefc 	bl	8000f70 <read_register16>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d02c      	beq.n	80011d8 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 800117e:	f107 030c 	add.w	r3, r7, #12
 8001182:	461a      	mov	r2, r3
 8001184:	21e5      	movs	r1, #229	@ 0xe5
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f7ff fef2 	bl	8000f70 <read_register16>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d022      	beq.n	80011d8 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	f103 0222 	add.w	r2, r3, #34	@ 0x22
 8001198:	2301      	movs	r3, #1
 800119a:	21e7      	movs	r1, #231	@ 0xe7
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	f7ff ff16 	bl	8000fce <read_data>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d117      	bne.n	80011d8 <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 80011a8:	89fb      	ldrh	r3, [r7, #14]
 80011aa:	011b      	lsls	r3, r3, #4
 80011ac:	b21b      	sxth	r3, r3
 80011ae:	f403 637f 	and.w	r3, r3, #4080	@ 0xff0
 80011b2:	b21a      	sxth	r2, r3
 80011b4:	89fb      	ldrh	r3, [r7, #14]
 80011b6:	121b      	asrs	r3, r3, #8
 80011b8:	b21b      	sxth	r3, r3
 80011ba:	f003 030f 	and.w	r3, r3, #15
 80011be:	b21b      	sxth	r3, r3
 80011c0:	4313      	orrs	r3, r2
 80011c2:	b21a      	sxth	r2, r3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 80011c8:	89bb      	ldrh	r3, [r7, #12]
 80011ca:	091b      	lsrs	r3, r3, #4
 80011cc:	b29b      	uxth	r3, r3
 80011ce:	b21a      	sxth	r2, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	841a      	strh	r2, [r3, #32]

		return true;
 80011d4:	2301      	movs	r3, #1
 80011d6:	e000      	b.n	80011da <read_hum_calibration_data+0xb8>
	}

	return false;
 80011d8:	2300      	movs	r3, #0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3710      	adds	r7, #16
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b088      	sub	sp, #32
 80011e6:	af04      	add	r7, sp, #16
 80011e8:	6078      	str	r0, [r7, #4]
 80011ea:	460b      	mov	r3, r1
 80011ec:	70fb      	strb	r3, [r7, #3]
 80011ee:	4613      	mov	r3, r2
 80011f0:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80011fe:	78fb      	ldrb	r3, [r7, #3]
 8001200:	b29a      	uxth	r2, r3
 8001202:	89f9      	ldrh	r1, [r7, #14]
 8001204:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001208:	9302      	str	r3, [sp, #8]
 800120a:	2301      	movs	r3, #1
 800120c:	9301      	str	r3, [sp, #4]
 800120e:	1cbb      	adds	r3, r7, #2
 8001210:	9300      	str	r3, [sp, #0]
 8001212:	2301      	movs	r3, #1
 8001214:	f003 fecc 	bl	8004fb0 <HAL_I2C_Mem_Write>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d101      	bne.n	8001222 <write_register8+0x40>
		return false;
 800121e:	2300      	movs	r3, #0
 8001220:	e000      	b.n	8001224 <write_register8+0x42>
	else
		return true;
 8001222:	2301      	movs	r3, #1
}
 8001224:	4618      	mov	r0, r3
 8001226:	3710      	adds	r7, #16
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800123a:	2b76      	cmp	r3, #118	@ 0x76
 800123c:	d005      	beq.n	800124a <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001242:	2b77      	cmp	r3, #119	@ 0x77
 8001244:	d001      	beq.n	800124a <bmp280_init+0x1e>

		return false;
 8001246:	2300      	movs	r3, #0
 8001248:	e099      	b.n	800137e <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8001250:	2301      	movs	r3, #1
 8001252:	21d0      	movs	r1, #208	@ 0xd0
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	f7ff feba 	bl	8000fce <read_data>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <bmp280_init+0x38>
		return false;
 8001260:	2300      	movs	r3, #0
 8001262:	e08c      	b.n	800137e <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800126a:	2b58      	cmp	r3, #88	@ 0x58
 800126c:	d006      	beq.n	800127c <bmp280_init+0x50>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001274:	2b60      	cmp	r3, #96	@ 0x60
 8001276:	d001      	beq.n	800127c <bmp280_init+0x50>

		return false;
 8001278:	2300      	movs	r3, #0
 800127a:	e080      	b.n	800137e <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 800127c:	22b6      	movs	r2, #182	@ 0xb6
 800127e:	21e0      	movs	r1, #224	@ 0xe0
 8001280:	6878      	ldr	r0, [r7, #4]
 8001282:	f7ff ffae 	bl	80011e2 <write_register8>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <bmp280_init+0x64>
		return false;
 800128c:	2300      	movs	r3, #0
 800128e:	e076      	b.n	800137e <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 8001290:	f107 020c 	add.w	r2, r7, #12
 8001294:	2301      	movs	r3, #1
 8001296:	21f3      	movs	r1, #243	@ 0xf3
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f7ff fe98 	bl	8000fce <read_data>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d1f5      	bne.n	8001290 <bmp280_init+0x64>
				&& (status & 1) == 0)
 80012a4:	7b3b      	ldrb	r3, [r7, #12]
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d1f0      	bne.n	8001290 <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f7ff feb5 	bl	800101e <read_calibration_data>
 80012b4:	4603      	mov	r3, r0
 80012b6:	f083 0301 	eor.w	r3, r3, #1
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d100      	bne.n	80012c2 <bmp280_init+0x96>
 80012c0:	e001      	b.n	80012c6 <bmp280_init+0x9a>
		return false;
 80012c2:	2300      	movs	r3, #0
 80012c4:	e05b      	b.n	800137e <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80012cc:	2b60      	cmp	r3, #96	@ 0x60
 80012ce:	d10a      	bne.n	80012e6 <bmp280_init+0xba>
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	f7ff ff26 	bl	8001122 <read_hum_calibration_data>
 80012d6:	4603      	mov	r3, r0
 80012d8:	f083 0301 	eor.w	r3, r3, #1
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <bmp280_init+0xba>
		return false;
 80012e2:	2300      	movs	r3, #0
 80012e4:	e04b      	b.n	800137e <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	795b      	ldrb	r3, [r3, #5]
 80012ea:	015b      	lsls	r3, r3, #5
 80012ec:	b25a      	sxtb	r2, r3
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	785b      	ldrb	r3, [r3, #1]
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	b25b      	sxtb	r3, r3
 80012f6:	4313      	orrs	r3, r2
 80012f8:	b25b      	sxtb	r3, r3
 80012fa:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 80012fc:	7bfb      	ldrb	r3, [r7, #15]
 80012fe:	461a      	mov	r2, r3
 8001300:	21f5      	movs	r1, #245	@ 0xf5
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f7ff ff6d 	bl	80011e2 <write_register8>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <bmp280_init+0xe6>
		return false;
 800130e:	2300      	movs	r3, #0
 8001310:	e035      	b.n	800137e <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	2b01      	cmp	r3, #1
 8001318:	d102      	bne.n	8001320 <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	2200      	movs	r2, #0
 800131e:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	78db      	ldrb	r3, [r3, #3]
 8001324:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 8001326:	b25a      	sxtb	r2, r3
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	789b      	ldrb	r3, [r3, #2]
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	b25b      	sxtb	r3, r3
 8001330:	4313      	orrs	r3, r2
 8001332:	b25a      	sxtb	r2, r3
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	b25b      	sxtb	r3, r3
 800133a:	4313      	orrs	r3, r2
 800133c:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 800133e:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001346:	2b60      	cmp	r3, #96	@ 0x60
 8001348:	d10d      	bne.n	8001366 <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	791b      	ldrb	r3, [r3, #4]
 800134e:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 8001350:	7b7b      	ldrb	r3, [r7, #13]
 8001352:	461a      	mov	r2, r3
 8001354:	21f2      	movs	r1, #242	@ 0xf2
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f7ff ff43 	bl	80011e2 <write_register8>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <bmp280_init+0x13a>
			return false;
 8001362:	2300      	movs	r3, #0
 8001364:	e00b      	b.n	800137e <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 8001366:	7bbb      	ldrb	r3, [r7, #14]
 8001368:	461a      	mov	r2, r3
 800136a:	21f4      	movs	r1, #244	@ 0xf4
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	f7ff ff38 	bl	80011e2 <write_register8>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <bmp280_init+0x150>
		return false;
 8001378:	2300      	movs	r3, #0
 800137a:	e000      	b.n	800137e <bmp280_init+0x152>
	}

	return true;
 800137c:	2301      	movs	r3, #1
}
 800137e:	4618      	mov	r0, r3
 8001380:	3710      	adds	r7, #16
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}

08001386 <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 8001386:	b480      	push	{r7}
 8001388:	b087      	sub	sp, #28
 800138a:	af00      	add	r7, sp, #0
 800138c:	60f8      	str	r0, [r7, #12]
 800138e:	60b9      	str	r1, [r7, #8]
 8001390:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	10da      	asrs	r2, r3, #3
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	881b      	ldrh	r3, [r3, #0]
 800139a:	005b      	lsls	r3, r3, #1
 800139c:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 800139e:	68fa      	ldr	r2, [r7, #12]
 80013a0:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80013a4:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 80013a8:	12db      	asrs	r3, r3, #11
 80013aa:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	111b      	asrs	r3, r3, #4
 80013b0:	68fa      	ldr	r2, [r7, #12]
 80013b2:	8812      	ldrh	r2, [r2, #0]
 80013b4:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 80013b6:	68ba      	ldr	r2, [r7, #8]
 80013b8:	1112      	asrs	r2, r2, #4
 80013ba:	68f9      	ldr	r1, [r7, #12]
 80013bc:	8809      	ldrh	r1, [r1, #0]
 80013be:	1a52      	subs	r2, r2, r1
 80013c0:	fb02 f303 	mul.w	r3, r2, r3
 80013c4:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 80013c6:	68fa      	ldr	r2, [r7, #12]
 80013c8:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80013cc:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 80013d0:	139b      	asrs	r3, r3, #14
 80013d2:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 80013d4:	697a      	ldr	r2, [r7, #20]
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	441a      	add	r2, r3
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	4613      	mov	r3, r2
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	4413      	add	r3, r2
 80013e8:	3380      	adds	r3, #128	@ 0x80
 80013ea:	121b      	asrs	r3, r3, #8
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	371c      	adds	r7, #28
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 80013f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013fc:	b0cc      	sub	sp, #304	@ 0x130
 80013fe:	af00      	add	r7, sp, #0
 8001400:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
 8001404:	f8c7 1110 	str.w	r1, [r7, #272]	@ 0x110
 8001408:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 800140c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001410:	17da      	asrs	r2, r3, #31
 8001412:	461c      	mov	r4, r3
 8001414:	4615      	mov	r5, r2
 8001416:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 800141a:	f145 3bff 	adc.w	fp, r5, #4294967295
 800141e:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	@ 0x128
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8001422:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8001426:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800142a:	fb03 f102 	mul.w	r1, r3, r2
 800142e:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8001432:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001436:	fb02 f303 	mul.w	r3, r2, r3
 800143a:	18ca      	adds	r2, r1, r3
 800143c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001440:	fba3 8903 	umull	r8, r9, r3, r3
 8001444:	eb02 0309 	add.w	r3, r2, r9
 8001448:	4699      	mov	r9, r3
 800144a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800144e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001452:	b21b      	sxth	r3, r3
 8001454:	17da      	asrs	r2, r3, #31
 8001456:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800145a:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800145e:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8001462:	4603      	mov	r3, r0
 8001464:	fb03 f209 	mul.w	r2, r3, r9
 8001468:	460b      	mov	r3, r1
 800146a:	fb08 f303 	mul.w	r3, r8, r3
 800146e:	4413      	add	r3, r2
 8001470:	4602      	mov	r2, r0
 8001472:	fba8 1202 	umull	r1, r2, r8, r2
 8001476:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800147a:	460a      	mov	r2, r1
 800147c:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 8001480:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8001484:	4413      	add	r3, r2
 8001486:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800148a:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 800148e:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
 8001492:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 8001496:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800149a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800149e:	b21b      	sxth	r3, r3
 80014a0:	17da      	asrs	r2, r3, #31
 80014a2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80014a6:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80014aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80014ae:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 80014b2:	462a      	mov	r2, r5
 80014b4:	fb02 f203 	mul.w	r2, r2, r3
 80014b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80014bc:	4621      	mov	r1, r4
 80014be:	fb01 f303 	mul.w	r3, r1, r3
 80014c2:	441a      	add	r2, r3
 80014c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80014c8:	4621      	mov	r1, r4
 80014ca:	fba3 1301 	umull	r1, r3, r3, r1
 80014ce:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80014d2:	460b      	mov	r3, r1
 80014d4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80014d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80014dc:	18d3      	adds	r3, r2, r3
 80014de:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80014e2:	f04f 0000 	mov.w	r0, #0
 80014e6:	f04f 0100 	mov.w	r1, #0
 80014ea:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 80014ee:	462b      	mov	r3, r5
 80014f0:	0459      	lsls	r1, r3, #17
 80014f2:	4623      	mov	r3, r4
 80014f4:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 80014f8:	4623      	mov	r3, r4
 80014fa:	0458      	lsls	r0, r3, #17
 80014fc:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001500:	1814      	adds	r4, r2, r0
 8001502:	643c      	str	r4, [r7, #64]	@ 0x40
 8001504:	414b      	adcs	r3, r1
 8001506:	647b      	str	r3, [r7, #68]	@ 0x44
 8001508:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 800150c:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 8001510:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001514:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001518:	b21b      	sxth	r3, r3
 800151a:	17da      	asrs	r2, r3, #31
 800151c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001520:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001524:	f04f 0000 	mov.w	r0, #0
 8001528:	f04f 0100 	mov.w	r1, #0
 800152c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001530:	00d9      	lsls	r1, r3, #3
 8001532:	2000      	movs	r0, #0
 8001534:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001538:	1814      	adds	r4, r2, r0
 800153a:	63bc      	str	r4, [r7, #56]	@ 0x38
 800153c:	414b      	adcs	r3, r1
 800153e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001540:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8001544:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8001548:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800154c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001550:	fb03 f102 	mul.w	r1, r3, r2
 8001554:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8001558:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800155c:	fb02 f303 	mul.w	r3, r2, r3
 8001560:	18ca      	adds	r2, r1, r3
 8001562:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001566:	fba3 1303 	umull	r1, r3, r3, r3
 800156a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800156e:	460b      	mov	r3, r1
 8001570:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8001574:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001578:	18d3      	adds	r3, r2, r3
 800157a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800157e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001582:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001586:	b21b      	sxth	r3, r3
 8001588:	17da      	asrs	r2, r3, #31
 800158a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800158e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001592:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 8001596:	462b      	mov	r3, r5
 8001598:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800159c:	4642      	mov	r2, r8
 800159e:	fb02 f203 	mul.w	r2, r2, r3
 80015a2:	464b      	mov	r3, r9
 80015a4:	4621      	mov	r1, r4
 80015a6:	fb01 f303 	mul.w	r3, r1, r3
 80015aa:	4413      	add	r3, r2
 80015ac:	4622      	mov	r2, r4
 80015ae:	4641      	mov	r1, r8
 80015b0:	fba2 1201 	umull	r1, r2, r2, r1
 80015b4:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 80015b8:	460a      	mov	r2, r1
 80015ba:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 80015be:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 80015c2:	4413      	add	r3, r2
 80015c4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80015c8:	f04f 0000 	mov.w	r0, #0
 80015cc:	f04f 0100 	mov.w	r1, #0
 80015d0:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 80015d4:	4623      	mov	r3, r4
 80015d6:	0a18      	lsrs	r0, r3, #8
 80015d8:	462b      	mov	r3, r5
 80015da:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80015de:	462b      	mov	r3, r5
 80015e0:	1219      	asrs	r1, r3, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 80015e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80015e6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80015ea:	b21b      	sxth	r3, r3
 80015ec:	17da      	asrs	r2, r3, #31
 80015ee:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80015f2:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80015f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80015fa:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 80015fe:	464a      	mov	r2, r9
 8001600:	fb02 f203 	mul.w	r2, r2, r3
 8001604:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001608:	4644      	mov	r4, r8
 800160a:	fb04 f303 	mul.w	r3, r4, r3
 800160e:	441a      	add	r2, r3
 8001610:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001614:	4644      	mov	r4, r8
 8001616:	fba3 4304 	umull	r4, r3, r3, r4
 800161a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800161e:	4623      	mov	r3, r4
 8001620:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001624:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8001628:	18d3      	adds	r3, r2, r3
 800162a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800162e:	f04f 0200 	mov.w	r2, #0
 8001632:	f04f 0300 	mov.w	r3, #0
 8001636:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 800163a:	464c      	mov	r4, r9
 800163c:	0323      	lsls	r3, r4, #12
 800163e:	4644      	mov	r4, r8
 8001640:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001644:	4644      	mov	r4, r8
 8001646:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8001648:	1884      	adds	r4, r0, r2
 800164a:	633c      	str	r4, [r7, #48]	@ 0x30
 800164c:	eb41 0303 	adc.w	r3, r1, r3
 8001650:	637b      	str	r3, [r7, #52]	@ 0x34
 8001652:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8001656:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 800165a:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 800165e:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8001662:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 8001666:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800166a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800166e:	88db      	ldrh	r3, [r3, #6]
 8001670:	b29b      	uxth	r3, r3
 8001672:	2200      	movs	r2, #0
 8001674:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001678:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800167c:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001680:	462b      	mov	r3, r5
 8001682:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8001686:	4642      	mov	r2, r8
 8001688:	fb02 f203 	mul.w	r2, r2, r3
 800168c:	464b      	mov	r3, r9
 800168e:	4621      	mov	r1, r4
 8001690:	fb01 f303 	mul.w	r3, r1, r3
 8001694:	4413      	add	r3, r2
 8001696:	4622      	mov	r2, r4
 8001698:	4641      	mov	r1, r8
 800169a:	fba2 1201 	umull	r1, r2, r2, r1
 800169e:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 80016a2:	460a      	mov	r2, r1
 80016a4:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 80016a8:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80016ac:	4413      	add	r3, r2
 80016ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80016b2:	f04f 0200 	mov.w	r2, #0
 80016b6:	f04f 0300 	mov.w	r3, #0
 80016ba:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 80016be:	4629      	mov	r1, r5
 80016c0:	104a      	asrs	r2, r1, #1
 80016c2:	4629      	mov	r1, r5
 80016c4:	17cb      	asrs	r3, r1, #31
 80016c6:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128

	if (var1 == 0) {
 80016ca:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 80016ce:	4313      	orrs	r3, r2
 80016d0:	d101      	bne.n	80016d6 <compensate_pressure+0x2de>
		return 0;  // avoid exception caused by division by zero
 80016d2:	2300      	movs	r3, #0
 80016d4:	e148      	b.n	8001968 <compensate_pressure+0x570>
	}

	p = 1048576 - adc_press;
 80016d6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80016da:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 80016de:	17da      	asrs	r2, r3, #31
 80016e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80016e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80016e4:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 80016e8:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	p = (((p << 31) - var2) * 3125) / var1;
 80016ec:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80016f0:	105b      	asrs	r3, r3, #1
 80016f2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80016f6:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80016fa:	07db      	lsls	r3, r3, #31
 80016fc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001700:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001704:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8001708:	4621      	mov	r1, r4
 800170a:	1a89      	subs	r1, r1, r2
 800170c:	67b9      	str	r1, [r7, #120]	@ 0x78
 800170e:	4629      	mov	r1, r5
 8001710:	eb61 0303 	sbc.w	r3, r1, r3
 8001714:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001716:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800171a:	4622      	mov	r2, r4
 800171c:	462b      	mov	r3, r5
 800171e:	1891      	adds	r1, r2, r2
 8001720:	6239      	str	r1, [r7, #32]
 8001722:	415b      	adcs	r3, r3
 8001724:	627b      	str	r3, [r7, #36]	@ 0x24
 8001726:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800172a:	4621      	mov	r1, r4
 800172c:	1851      	adds	r1, r2, r1
 800172e:	61b9      	str	r1, [r7, #24]
 8001730:	4629      	mov	r1, r5
 8001732:	414b      	adcs	r3, r1
 8001734:	61fb      	str	r3, [r7, #28]
 8001736:	f04f 0200 	mov.w	r2, #0
 800173a:	f04f 0300 	mov.w	r3, #0
 800173e:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001742:	4649      	mov	r1, r9
 8001744:	018b      	lsls	r3, r1, #6
 8001746:	4641      	mov	r1, r8
 8001748:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800174c:	4641      	mov	r1, r8
 800174e:	018a      	lsls	r2, r1, #6
 8001750:	4641      	mov	r1, r8
 8001752:	1889      	adds	r1, r1, r2
 8001754:	6139      	str	r1, [r7, #16]
 8001756:	4649      	mov	r1, r9
 8001758:	eb43 0101 	adc.w	r1, r3, r1
 800175c:	6179      	str	r1, [r7, #20]
 800175e:	f04f 0200 	mov.w	r2, #0
 8001762:	f04f 0300 	mov.w	r3, #0
 8001766:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 800176a:	4649      	mov	r1, r9
 800176c:	008b      	lsls	r3, r1, #2
 800176e:	4641      	mov	r1, r8
 8001770:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001774:	4641      	mov	r1, r8
 8001776:	008a      	lsls	r2, r1, #2
 8001778:	4610      	mov	r0, r2
 800177a:	4619      	mov	r1, r3
 800177c:	4603      	mov	r3, r0
 800177e:	4622      	mov	r2, r4
 8001780:	189b      	adds	r3, r3, r2
 8001782:	60bb      	str	r3, [r7, #8]
 8001784:	460b      	mov	r3, r1
 8001786:	462a      	mov	r2, r5
 8001788:	eb42 0303 	adc.w	r3, r2, r3
 800178c:	60fb      	str	r3, [r7, #12]
 800178e:	f04f 0200 	mov.w	r2, #0
 8001792:	f04f 0300 	mov.w	r3, #0
 8001796:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 800179a:	4649      	mov	r1, r9
 800179c:	008b      	lsls	r3, r1, #2
 800179e:	4641      	mov	r1, r8
 80017a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80017a4:	4641      	mov	r1, r8
 80017a6:	008a      	lsls	r2, r1, #2
 80017a8:	4610      	mov	r0, r2
 80017aa:	4619      	mov	r1, r3
 80017ac:	4603      	mov	r3, r0
 80017ae:	4622      	mov	r2, r4
 80017b0:	189b      	adds	r3, r3, r2
 80017b2:	673b      	str	r3, [r7, #112]	@ 0x70
 80017b4:	462b      	mov	r3, r5
 80017b6:	460a      	mov	r2, r1
 80017b8:	eb42 0303 	adc.w	r3, r2, r3
 80017bc:	677b      	str	r3, [r7, #116]	@ 0x74
 80017be:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 80017c2:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80017c6:	f7ff f9ef 	bl	8000ba8 <__aeabi_ldivmod>
 80017ca:	4602      	mov	r2, r0
 80017cc:	460b      	mov	r3, r1
 80017ce:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 80017d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80017d6:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80017da:	b21b      	sxth	r3, r3
 80017dc:	17da      	asrs	r2, r3, #31
 80017de:	66bb      	str	r3, [r7, #104]	@ 0x68
 80017e0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80017e2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 80017e6:	f04f 0000 	mov.w	r0, #0
 80017ea:	f04f 0100 	mov.w	r1, #0
 80017ee:	0b50      	lsrs	r0, r2, #13
 80017f0:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80017f4:	1359      	asrs	r1, r3, #13
 80017f6:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 80017fa:	462b      	mov	r3, r5
 80017fc:	fb00 f203 	mul.w	r2, r0, r3
 8001800:	4623      	mov	r3, r4
 8001802:	fb03 f301 	mul.w	r3, r3, r1
 8001806:	4413      	add	r3, r2
 8001808:	4622      	mov	r2, r4
 800180a:	fba2 1200 	umull	r1, r2, r2, r0
 800180e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001812:	460a      	mov	r2, r1
 8001814:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8001818:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800181c:	4413      	add	r3, r2
 800181e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8001822:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001826:	f04f 0000 	mov.w	r0, #0
 800182a:	f04f 0100 	mov.w	r1, #0
 800182e:	0b50      	lsrs	r0, r2, #13
 8001830:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001834:	1359      	asrs	r1, r3, #13
 8001836:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 800183a:	462b      	mov	r3, r5
 800183c:	fb00 f203 	mul.w	r2, r0, r3
 8001840:	4623      	mov	r3, r4
 8001842:	fb03 f301 	mul.w	r3, r3, r1
 8001846:	4413      	add	r3, r2
 8001848:	4622      	mov	r2, r4
 800184a:	fba2 1200 	umull	r1, r2, r2, r0
 800184e:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001852:	460a      	mov	r2, r1
 8001854:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8001858:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800185c:	4413      	add	r3, r2
 800185e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8001862:	f04f 0200 	mov.w	r2, #0
 8001866:	f04f 0300 	mov.w	r3, #0
 800186a:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 800186e:	4621      	mov	r1, r4
 8001870:	0e4a      	lsrs	r2, r1, #25
 8001872:	4629      	mov	r1, r5
 8001874:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001878:	4629      	mov	r1, r5
 800187a:	164b      	asrs	r3, r1, #25
 800187c:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 8001880:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001884:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001888:	b21b      	sxth	r3, r3
 800188a:	17da      	asrs	r2, r3, #31
 800188c:	663b      	str	r3, [r7, #96]	@ 0x60
 800188e:	667a      	str	r2, [r7, #100]	@ 0x64
 8001890:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001894:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001898:	462a      	mov	r2, r5
 800189a:	fb02 f203 	mul.w	r2, r2, r3
 800189e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80018a2:	4621      	mov	r1, r4
 80018a4:	fb01 f303 	mul.w	r3, r1, r3
 80018a8:	4413      	add	r3, r2
 80018aa:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80018ae:	4621      	mov	r1, r4
 80018b0:	fba2 1201 	umull	r1, r2, r2, r1
 80018b4:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 80018b8:	460a      	mov	r2, r1
 80018ba:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 80018be:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 80018c2:	4413      	add	r3, r2
 80018c4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80018c8:	f04f 0200 	mov.w	r2, #0
 80018cc:	f04f 0300 	mov.w	r3, #0
 80018d0:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 80018d4:	4621      	mov	r1, r4
 80018d6:	0cca      	lsrs	r2, r1, #19
 80018d8:	4629      	mov	r1, r5
 80018da:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 80018de:	4629      	mov	r1, r5
 80018e0:	14cb      	asrs	r3, r1, #19
 80018e2:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 80018e6:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 80018ea:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 80018ee:	1884      	adds	r4, r0, r2
 80018f0:	65bc      	str	r4, [r7, #88]	@ 0x58
 80018f2:	eb41 0303 	adc.w	r3, r1, r3
 80018f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80018f8:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80018fc:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8001900:	4621      	mov	r1, r4
 8001902:	1889      	adds	r1, r1, r2
 8001904:	6539      	str	r1, [r7, #80]	@ 0x50
 8001906:	4629      	mov	r1, r5
 8001908:	eb43 0101 	adc.w	r1, r3, r1
 800190c:	6579      	str	r1, [r7, #84]	@ 0x54
 800190e:	f04f 0000 	mov.w	r0, #0
 8001912:	f04f 0100 	mov.w	r1, #0
 8001916:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 800191a:	4623      	mov	r3, r4
 800191c:	0a18      	lsrs	r0, r3, #8
 800191e:	462b      	mov	r3, r5
 8001920:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001924:	462b      	mov	r3, r5
 8001926:	1219      	asrs	r1, r3, #8
 8001928:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800192c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001930:	b21b      	sxth	r3, r3
 8001932:	17da      	asrs	r2, r3, #31
 8001934:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001936:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001938:	f04f 0200 	mov.w	r2, #0
 800193c:	f04f 0300 	mov.w	r3, #0
 8001940:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8001944:	464c      	mov	r4, r9
 8001946:	0123      	lsls	r3, r4, #4
 8001948:	4644      	mov	r4, r8
 800194a:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 800194e:	4644      	mov	r4, r8
 8001950:	0122      	lsls	r2, r4, #4
 8001952:	1884      	adds	r4, r0, r2
 8001954:	603c      	str	r4, [r7, #0]
 8001956:	eb41 0303 	adc.w	r3, r1, r3
 800195a:	607b      	str	r3, [r7, #4]
 800195c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001960:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	return p;
 8001964:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
}
 8001968:	4618      	mov	r0, r3
 800196a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800196e:	46bd      	mov	sp, r7
 8001970:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001974 <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 8001974:	b480      	push	{r7}
 8001976:	b087      	sub	sp, #28
 8001978:	af00      	add	r7, sp, #0
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	60b9      	str	r1, [r7, #8]
 800197e:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 8001986:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	039a      	lsls	r2, r3, #14
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001992:	051b      	lsls	r3, r3, #20
 8001994:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800199c:	4619      	mov	r1, r3
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	fb01 f303 	mul.w	r3, r1, r3
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80019aa:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 80019ac:	68fa      	ldr	r2, [r7, #12]
 80019ae:	f992 2022 	ldrsb.w	r2, [r2, #34]	@ 0x22
 80019b2:	4611      	mov	r1, r2
 80019b4:	697a      	ldr	r2, [r7, #20]
 80019b6:	fb01 f202 	mul.w	r2, r1, r2
 80019ba:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 80019bc:	68f9      	ldr	r1, [r7, #12]
 80019be:	7f09      	ldrb	r1, [r1, #28]
 80019c0:	4608      	mov	r0, r1
 80019c2:	6979      	ldr	r1, [r7, #20]
 80019c4:	fb00 f101 	mul.w	r1, r0, r1
 80019c8:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 80019ca:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 80019ce:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 80019d2:	1292      	asrs	r2, r2, #10
 80019d4:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 80019d8:	68f9      	ldr	r1, [r7, #12]
 80019da:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 80019de:	fb01 f202 	mul.w	r2, r1, r2
 80019e2:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 80019e6:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 80019e8:	fb02 f303 	mul.w	r3, r2, r3
 80019ec:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	13db      	asrs	r3, r3, #15
 80019f2:	697a      	ldr	r2, [r7, #20]
 80019f4:	13d2      	asrs	r2, r2, #15
 80019f6:	fb02 f303 	mul.w	r3, r2, r3
 80019fa:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 80019fc:	68fa      	ldr	r2, [r7, #12]
 80019fe:	7e12      	ldrb	r2, [r2, #24]
 8001a00:	fb02 f303 	mul.w	r3, r2, r3
 8001a04:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 8001a06:	697a      	ldr	r2, [r7, #20]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001a12:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 8001a1a:	bfa8      	it	ge
 8001a1c:	f04f 53c8 	movge.w	r3, #419430400	@ 0x19000000
 8001a20:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	131b      	asrs	r3, r3, #12
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	371c      	adds	r7, #28
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr

08001a32 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b08c      	sub	sp, #48	@ 0x30
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	60f8      	str	r0, [r7, #12]
 8001a3a:	60b9      	str	r1, [r7, #8]
 8001a3c:	607a      	str	r2, [r7, #4]
 8001a3e:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001a46:	2b60      	cmp	r3, #96	@ 0x60
 8001a48:	d007      	beq.n	8001a5a <bmp280_read_fixed+0x28>
		if (humidity)
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d002      	beq.n	8001a56 <bmp280_read_fixed+0x24>
			*humidity = 0;
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	2200      	movs	r2, #0
 8001a54:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 8001a56:	2300      	movs	r3, #0
 8001a58:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <bmp280_read_fixed+0x32>
 8001a60:	2308      	movs	r3, #8
 8001a62:	e000      	b.n	8001a66 <bmp280_read_fixed+0x34>
 8001a64:	2306      	movs	r3, #6
 8001a66:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 8001a68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	f107 0218 	add.w	r2, r7, #24
 8001a70:	21f7      	movs	r1, #247	@ 0xf7
 8001a72:	68f8      	ldr	r0, [r7, #12]
 8001a74:	f7ff faab 	bl	8000fce <read_data>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <bmp280_read_fixed+0x50>
		return false;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	e038      	b.n	8001af4 <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8001a82:	7e3b      	ldrb	r3, [r7, #24]
 8001a84:	031a      	lsls	r2, r3, #12
 8001a86:	7e7b      	ldrb	r3, [r7, #25]
 8001a88:	011b      	lsls	r3, r3, #4
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	7eba      	ldrb	r2, [r7, #26]
 8001a8e:	0912      	lsrs	r2, r2, #4
 8001a90:	b2d2      	uxtb	r2, r2
 8001a92:	4313      	orrs	r3, r2
 8001a94:	62bb      	str	r3, [r7, #40]	@ 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8001a96:	7efb      	ldrb	r3, [r7, #27]
 8001a98:	031a      	lsls	r2, r3, #12
 8001a9a:	7f3b      	ldrb	r3, [r7, #28]
 8001a9c:	011b      	lsls	r3, r3, #4
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	7f7a      	ldrb	r2, [r7, #29]
 8001aa2:	0912      	lsrs	r2, r2, #4
 8001aa4:	b2d2      	uxtb	r2, r2
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	627b      	str	r3, [r7, #36]	@ 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 8001aaa:	f107 0314 	add.w	r3, r7, #20
 8001aae:	461a      	mov	r2, r3
 8001ab0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001ab2:	68f8      	ldr	r0, [r7, #12]
 8001ab4:	f7ff fc67 	bl	8001386 <compensate_temperature>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001ac4:	68f8      	ldr	r0, [r7, #12]
 8001ac6:	f7ff fc97 	bl	80013f8 <compensate_pressure>
 8001aca:	4602      	mov	r2, r0
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	601a      	str	r2, [r3, #0]

	if (humidity) {
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d00d      	beq.n	8001af2 <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 8001ad6:	7fbb      	ldrb	r3, [r7, #30]
 8001ad8:	021b      	lsls	r3, r3, #8
 8001ada:	7ffa      	ldrb	r2, [r7, #31]
 8001adc:	4313      	orrs	r3, r2
 8001ade:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	6a39      	ldr	r1, [r7, #32]
 8001ae6:	68f8      	ldr	r0, [r7, #12]
 8001ae8:	f7ff ff44 	bl	8001974 <compensate_humidity>
 8001aec:	4602      	mov	r2, r0
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	601a      	str	r2, [r3, #0]
	}

	return true;
 8001af2:	2301      	movs	r3, #1
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3730      	adds	r7, #48	@ 0x30
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}

08001afc <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b088      	sub	sp, #32
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	60b9      	str	r1, [r7, #8]
 8001b06:	607a      	str	r2, [r7, #4]
 8001b08:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d002      	beq.n	8001b16 <bmp280_read_float+0x1a>
 8001b10:	f107 0314 	add.w	r3, r7, #20
 8001b14:	e000      	b.n	8001b18 <bmp280_read_float+0x1c>
 8001b16:	2300      	movs	r3, #0
 8001b18:	f107 0218 	add.w	r2, r7, #24
 8001b1c:	f107 011c 	add.w	r1, r7, #28
 8001b20:	68f8      	ldr	r0, [r7, #12]
 8001b22:	f7ff ff86 	bl	8001a32 <bmp280_read_fixed>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d028      	beq.n	8001b7e <bmp280_read_float+0x82>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	ee07 3a90 	vmov	s15, r3
 8001b32:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b36:	eddf 6a14 	vldr	s13, [pc, #80]	@ 8001b88 <bmp280_read_float+0x8c>
 8001b3a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	edc3 7a00 	vstr	s15, [r3]
		*pressure = (float) fixed_pressure / 256;
 8001b44:	69bb      	ldr	r3, [r7, #24]
 8001b46:	ee07 3a90 	vmov	s15, r3
 8001b4a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b4e:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8001b8c <bmp280_read_float+0x90>
 8001b52:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	edc3 7a00 	vstr	s15, [r3]
		if (humidity)
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d00b      	beq.n	8001b7a <bmp280_read_float+0x7e>
			*humidity = (float) fixed_humidity / 1024;
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	ee07 3a90 	vmov	s15, r3
 8001b68:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b6c:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8001b90 <bmp280_read_float+0x94>
 8001b70:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	edc3 7a00 	vstr	s15, [r3]
		return true;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e000      	b.n	8001b80 <bmp280_read_float+0x84>
	}

	return false;
 8001b7e:	2300      	movs	r3, #0
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3720      	adds	r7, #32
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	42c80000 	.word	0x42c80000
 8001b8c:	43800000 	.word	0x43800000
 8001b90:	44800000 	.word	0x44800000

08001b94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b94:	b5b0      	push	{r4, r5, r7, lr}
 8001b96:	b094      	sub	sp, #80	@ 0x50
 8001b98:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b9a:	f000 fc33 	bl	8002404 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b9e:	f000 f877 	bl	8001c90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ba2:	f000 f937 	bl	8001e14 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001ba6:	f000 f8dd 	bl	8001d64 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001baa:	f000 f909 	bl	8001dc0 <MX_USART2_UART_Init>
  MX_USB_HOST_Init();
 8001bae:	f008 fb71 	bl	800a294 <MX_USB_HOST_Init>

  /* USER CODE BEGIN 2 */
  // Initialisation du BMP280
  bmp280_init_default_params(&params);  // Initialiser les paramètres par défaut
 8001bb2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7ff f9be 	bl	8000f38 <bmp280_init_default_params>
  bmp280.addr = BMP280_I2C_ADDRESS_0;   // Adresse I2C du BMP280
 8001bbc:	4b2e      	ldr	r3, [pc, #184]	@ (8001c78 <main+0xe4>)
 8001bbe:	2276      	movs	r2, #118	@ 0x76
 8001bc0:	849a      	strh	r2, [r3, #36]	@ 0x24
  bmp280.i2c = &hi2c1;                  // Utiliser l'instance I2C configurée
 8001bc2:	4b2d      	ldr	r3, [pc, #180]	@ (8001c78 <main+0xe4>)
 8001bc4:	4a2d      	ldr	r2, [pc, #180]	@ (8001c7c <main+0xe8>)
 8001bc6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (!bmp280_init(&bmp280, &params)) {  // Initialiser le BMP280
 8001bc8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001bcc:	4619      	mov	r1, r3
 8001bce:	482a      	ldr	r0, [pc, #168]	@ (8001c78 <main+0xe4>)
 8001bd0:	f7ff fb2c 	bl	800122c <bmp280_init>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	f083 0301 	eor.w	r3, r3, #1
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <main+0x50>
    Error_Handler();  // Gérer l'erreur si l'initialisation échoue
 8001be0:	f000 fa16 	bl	8002010 <Error_Handler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001be4:	f008 fb7c 	bl	800a2e0 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    // Lire la température et la pression
    float temperature, pressure;
    if (bmp280_read_float(&bmp280, &temperature, &pressure, NULL)) {
 8001be8:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8001bec:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	4821      	ldr	r0, [pc, #132]	@ (8001c78 <main+0xe4>)
 8001bf4:	f7ff ff82 	bl	8001afc <bmp280_read_float>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d033      	beq.n	8001c66 <main+0xd2>
      // Afficher les données dans la console (pour débogage)
      printf("Temperature: %.2f °C, Pressure: %.2f hPa\n", temperature, pressure);
 8001bfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7fe fca1 	bl	8000548 <__aeabi_f2d>
 8001c06:	4604      	mov	r4, r0
 8001c08:	460d      	mov	r5, r1
 8001c0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7fe fc9b 	bl	8000548 <__aeabi_f2d>
 8001c12:	4602      	mov	r2, r0
 8001c14:	460b      	mov	r3, r1
 8001c16:	e9cd 2300 	strd	r2, r3, [sp]
 8001c1a:	4622      	mov	r2, r4
 8001c1c:	462b      	mov	r3, r5
 8001c1e:	4818      	ldr	r0, [pc, #96]	@ (8001c80 <main+0xec>)
 8001c20:	f009 fc1a 	bl	800b458 <iprintf>

      // Envoyer les données via UART
      char buffer[50];
      sprintf(buffer, "{\"temp\": %.2f, \"pressure\": %.2f}", temperature, pressure);
 8001c24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7fe fc8e 	bl	8000548 <__aeabi_f2d>
 8001c2c:	4604      	mov	r4, r0
 8001c2e:	460d      	mov	r5, r1
 8001c30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7fe fc88 	bl	8000548 <__aeabi_f2d>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	1d38      	adds	r0, r7, #4
 8001c3e:	e9cd 2300 	strd	r2, r3, [sp]
 8001c42:	4622      	mov	r2, r4
 8001c44:	462b      	mov	r3, r5
 8001c46:	490f      	ldr	r1, [pc, #60]	@ (8001c84 <main+0xf0>)
 8001c48:	f009 fc76 	bl	800b538 <siprintf>
      HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001c4c:	1d3b      	adds	r3, r7, #4
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7fe fb0e 	bl	8000270 <strlen>
 8001c54:	4603      	mov	r3, r0
 8001c56:	b29a      	uxth	r2, r3
 8001c58:	1d39      	adds	r1, r7, #4
 8001c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c5e:	480a      	ldr	r0, [pc, #40]	@ (8001c88 <main+0xf4>)
 8001c60:	f004 fd6e 	bl	8006740 <HAL_UART_Transmit>
 8001c64:	e002      	b.n	8001c6c <main+0xd8>
    } else {
      printf("Failed to read sensor data\n");
 8001c66:	4809      	ldr	r0, [pc, #36]	@ (8001c8c <main+0xf8>)
 8001c68:	f009 fc5e 	bl	800b528 <puts>
    }

    // Attendre 5 secondes
    HAL_Delay(5000);
 8001c6c:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001c70:	f000 fc3a 	bl	80024e8 <HAL_Delay>
  {
 8001c74:	e7b6      	b.n	8001be4 <main+0x50>
 8001c76:	bf00      	nop
 8001c78:	200002ac 	.word	0x200002ac
 8001c7c:	20000210 	.word	0x20000210
 8001c80:	0800d640 	.word	0x0800d640
 8001c84:	0800d66c 	.word	0x0800d66c
 8001c88:	20000264 	.word	0x20000264
 8001c8c:	0800d690 	.word	0x0800d690

08001c90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b094      	sub	sp, #80	@ 0x50
 8001c94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c96:	f107 0320 	add.w	r3, r7, #32
 8001c9a:	2230      	movs	r2, #48	@ 0x30
 8001c9c:	2100      	movs	r1, #0
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f009 fd42 	bl	800b728 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ca4:	f107 030c 	add.w	r3, r7, #12
 8001ca8:	2200      	movs	r2, #0
 8001caa:	601a      	str	r2, [r3, #0]
 8001cac:	605a      	str	r2, [r3, #4]
 8001cae:	609a      	str	r2, [r3, #8]
 8001cb0:	60da      	str	r2, [r3, #12]
 8001cb2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	60bb      	str	r3, [r7, #8]
 8001cb8:	4b28      	ldr	r3, [pc, #160]	@ (8001d5c <SystemClock_Config+0xcc>)
 8001cba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cbc:	4a27      	ldr	r2, [pc, #156]	@ (8001d5c <SystemClock_Config+0xcc>)
 8001cbe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cc2:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cc4:	4b25      	ldr	r3, [pc, #148]	@ (8001d5c <SystemClock_Config+0xcc>)
 8001cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ccc:	60bb      	str	r3, [r7, #8]
 8001cce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	607b      	str	r3, [r7, #4]
 8001cd4:	4b22      	ldr	r3, [pc, #136]	@ (8001d60 <SystemClock_Config+0xd0>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a21      	ldr	r2, [pc, #132]	@ (8001d60 <SystemClock_Config+0xd0>)
 8001cda:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cde:	6013      	str	r3, [r2, #0]
 8001ce0:	4b1f      	ldr	r3, [pc, #124]	@ (8001d60 <SystemClock_Config+0xd0>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ce8:	607b      	str	r3, [r7, #4]
 8001cea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001cec:	2301      	movs	r3, #1
 8001cee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001cf0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001cf4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001cfa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001cfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001d00:	2308      	movs	r3, #8
 8001d02:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001d04:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001d08:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d0a:	2302      	movs	r3, #2
 8001d0c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001d0e:	2307      	movs	r3, #7
 8001d10:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d12:	f107 0320 	add.w	r3, r7, #32
 8001d16:	4618      	mov	r0, r3
 8001d18:	f004 f82a 	bl	8005d70 <HAL_RCC_OscConfig>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001d22:	f000 f975 	bl	8002010 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d26:	230f      	movs	r3, #15
 8001d28:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001d32:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001d36:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001d38:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d3c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001d3e:	f107 030c 	add.w	r3, r7, #12
 8001d42:	2105      	movs	r1, #5
 8001d44:	4618      	mov	r0, r3
 8001d46:	f004 fa8b 	bl	8006260 <HAL_RCC_ClockConfig>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001d50:	f000 f95e 	bl	8002010 <Error_Handler>
  }
}
 8001d54:	bf00      	nop
 8001d56:	3750      	adds	r7, #80	@ 0x50
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	40023800 	.word	0x40023800
 8001d60:	40007000 	.word	0x40007000

08001d64 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  hi2c1.Instance = I2C1;
 8001d68:	4b12      	ldr	r3, [pc, #72]	@ (8001db4 <MX_I2C1_Init+0x50>)
 8001d6a:	4a13      	ldr	r2, [pc, #76]	@ (8001db8 <MX_I2C1_Init+0x54>)
 8001d6c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001d6e:	4b11      	ldr	r3, [pc, #68]	@ (8001db4 <MX_I2C1_Init+0x50>)
 8001d70:	4a12      	ldr	r2, [pc, #72]	@ (8001dbc <MX_I2C1_Init+0x58>)
 8001d72:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d74:	4b0f      	ldr	r3, [pc, #60]	@ (8001db4 <MX_I2C1_Init+0x50>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001d7a:	4b0e      	ldr	r3, [pc, #56]	@ (8001db4 <MX_I2C1_Init+0x50>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d80:	4b0c      	ldr	r3, [pc, #48]	@ (8001db4 <MX_I2C1_Init+0x50>)
 8001d82:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001d86:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d88:	4b0a      	ldr	r3, [pc, #40]	@ (8001db4 <MX_I2C1_Init+0x50>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001d8e:	4b09      	ldr	r3, [pc, #36]	@ (8001db4 <MX_I2C1_Init+0x50>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d94:	4b07      	ldr	r3, [pc, #28]	@ (8001db4 <MX_I2C1_Init+0x50>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d9a:	4b06      	ldr	r3, [pc, #24]	@ (8001db4 <MX_I2C1_Init+0x50>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001da0:	4804      	ldr	r0, [pc, #16]	@ (8001db4 <MX_I2C1_Init+0x50>)
 8001da2:	f002 ffc1 	bl	8004d28 <HAL_I2C_Init>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001dac:	f000 f930 	bl	8002010 <Error_Handler>
  }
}
 8001db0:	bf00      	nop
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	20000210 	.word	0x20000210
 8001db8:	40005400 	.word	0x40005400
 8001dbc:	000186a0 	.word	0x000186a0

08001dc0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8001dc4:	4b11      	ldr	r3, [pc, #68]	@ (8001e0c <MX_USART2_UART_Init+0x4c>)
 8001dc6:	4a12      	ldr	r2, [pc, #72]	@ (8001e10 <MX_USART2_UART_Init+0x50>)
 8001dc8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001dca:	4b10      	ldr	r3, [pc, #64]	@ (8001e0c <MX_USART2_UART_Init+0x4c>)
 8001dcc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001dd0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001dd2:	4b0e      	ldr	r3, [pc, #56]	@ (8001e0c <MX_USART2_UART_Init+0x4c>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001dd8:	4b0c      	ldr	r3, [pc, #48]	@ (8001e0c <MX_USART2_UART_Init+0x4c>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001dde:	4b0b      	ldr	r3, [pc, #44]	@ (8001e0c <MX_USART2_UART_Init+0x4c>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001de4:	4b09      	ldr	r3, [pc, #36]	@ (8001e0c <MX_USART2_UART_Init+0x4c>)
 8001de6:	220c      	movs	r2, #12
 8001de8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dea:	4b08      	ldr	r3, [pc, #32]	@ (8001e0c <MX_USART2_UART_Init+0x4c>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001df0:	4b06      	ldr	r3, [pc, #24]	@ (8001e0c <MX_USART2_UART_Init+0x4c>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001df6:	4805      	ldr	r0, [pc, #20]	@ (8001e0c <MX_USART2_UART_Init+0x4c>)
 8001df8:	f004 fc52 	bl	80066a0 <HAL_UART_Init>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001e02:	f000 f905 	bl	8002010 <Error_Handler>
  }
}
 8001e06:	bf00      	nop
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	20000264 	.word	0x20000264
 8001e10:	40004400 	.word	0x40004400

08001e14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b08c      	sub	sp, #48	@ 0x30
 8001e18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e1a:	f107 031c 	add.w	r3, r7, #28
 8001e1e:	2200      	movs	r2, #0
 8001e20:	601a      	str	r2, [r3, #0]
 8001e22:	605a      	str	r2, [r3, #4]
 8001e24:	609a      	str	r2, [r3, #8]
 8001e26:	60da      	str	r2, [r3, #12]
 8001e28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	61bb      	str	r3, [r7, #24]
 8001e2e:	4b72      	ldr	r3, [pc, #456]	@ (8001ff8 <MX_GPIO_Init+0x1e4>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e32:	4a71      	ldr	r2, [pc, #452]	@ (8001ff8 <MX_GPIO_Init+0x1e4>)
 8001e34:	f043 0310 	orr.w	r3, r3, #16
 8001e38:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e3a:	4b6f      	ldr	r3, [pc, #444]	@ (8001ff8 <MX_GPIO_Init+0x1e4>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e3e:	f003 0310 	and.w	r3, r3, #16
 8001e42:	61bb      	str	r3, [r7, #24]
 8001e44:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e46:	2300      	movs	r3, #0
 8001e48:	617b      	str	r3, [r7, #20]
 8001e4a:	4b6b      	ldr	r3, [pc, #428]	@ (8001ff8 <MX_GPIO_Init+0x1e4>)
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e4e:	4a6a      	ldr	r2, [pc, #424]	@ (8001ff8 <MX_GPIO_Init+0x1e4>)
 8001e50:	f043 0304 	orr.w	r3, r3, #4
 8001e54:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e56:	4b68      	ldr	r3, [pc, #416]	@ (8001ff8 <MX_GPIO_Init+0x1e4>)
 8001e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e5a:	f003 0304 	and.w	r3, r3, #4
 8001e5e:	617b      	str	r3, [r7, #20]
 8001e60:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e62:	2300      	movs	r3, #0
 8001e64:	613b      	str	r3, [r7, #16]
 8001e66:	4b64      	ldr	r3, [pc, #400]	@ (8001ff8 <MX_GPIO_Init+0x1e4>)
 8001e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e6a:	4a63      	ldr	r2, [pc, #396]	@ (8001ff8 <MX_GPIO_Init+0x1e4>)
 8001e6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e70:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e72:	4b61      	ldr	r3, [pc, #388]	@ (8001ff8 <MX_GPIO_Init+0x1e4>)
 8001e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e7a:	613b      	str	r3, [r7, #16]
 8001e7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e7e:	2300      	movs	r3, #0
 8001e80:	60fb      	str	r3, [r7, #12]
 8001e82:	4b5d      	ldr	r3, [pc, #372]	@ (8001ff8 <MX_GPIO_Init+0x1e4>)
 8001e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e86:	4a5c      	ldr	r2, [pc, #368]	@ (8001ff8 <MX_GPIO_Init+0x1e4>)
 8001e88:	f043 0301 	orr.w	r3, r3, #1
 8001e8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e8e:	4b5a      	ldr	r3, [pc, #360]	@ (8001ff8 <MX_GPIO_Init+0x1e4>)
 8001e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e92:	f003 0301 	and.w	r3, r3, #1
 8001e96:	60fb      	str	r3, [r7, #12]
 8001e98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	60bb      	str	r3, [r7, #8]
 8001e9e:	4b56      	ldr	r3, [pc, #344]	@ (8001ff8 <MX_GPIO_Init+0x1e4>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea2:	4a55      	ldr	r2, [pc, #340]	@ (8001ff8 <MX_GPIO_Init+0x1e4>)
 8001ea4:	f043 0302 	orr.w	r3, r3, #2
 8001ea8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eaa:	4b53      	ldr	r3, [pc, #332]	@ (8001ff8 <MX_GPIO_Init+0x1e4>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	60bb      	str	r3, [r7, #8]
 8001eb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	607b      	str	r3, [r7, #4]
 8001eba:	4b4f      	ldr	r3, [pc, #316]	@ (8001ff8 <MX_GPIO_Init+0x1e4>)
 8001ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ebe:	4a4e      	ldr	r2, [pc, #312]	@ (8001ff8 <MX_GPIO_Init+0x1e4>)
 8001ec0:	f043 0308 	orr.w	r3, r3, #8
 8001ec4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ec6:	4b4c      	ldr	r3, [pc, #304]	@ (8001ff8 <MX_GPIO_Init+0x1e4>)
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eca:	f003 0308 	and.w	r3, r3, #8
 8001ece:	607b      	str	r3, [r7, #4]
 8001ed0:	687b      	ldr	r3, [r7, #4]

  /* Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	2108      	movs	r1, #8
 8001ed6:	4849      	ldr	r0, [pc, #292]	@ (8001ffc <MX_GPIO_Init+0x1e8>)
 8001ed8:	f000 fdd8 	bl	8002a8c <HAL_GPIO_WritePin>

  /* Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001edc:	2201      	movs	r2, #1
 8001ede:	2101      	movs	r1, #1
 8001ee0:	4847      	ldr	r0, [pc, #284]	@ (8002000 <MX_GPIO_Init+0x1ec>)
 8001ee2:	f000 fdd3 	bl	8002a8c <HAL_GPIO_WritePin>

  /* Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8001eec:	4845      	ldr	r0, [pc, #276]	@ (8002004 <MX_GPIO_Init+0x1f0>)
 8001eee:	f000 fdcd 	bl	8002a8c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /* Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001ef2:	2308      	movs	r3, #8
 8001ef4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efa:	2300      	movs	r3, #0
 8001efc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001efe:	2300      	movs	r3, #0
 8001f00:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001f02:	f107 031c 	add.w	r3, r7, #28
 8001f06:	4619      	mov	r1, r3
 8001f08:	483c      	ldr	r0, [pc, #240]	@ (8001ffc <MX_GPIO_Init+0x1e8>)
 8001f0a:	f000 fc23 	bl	8002754 <HAL_GPIO_Init>

  /* Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f12:	2301      	movs	r3, #1
 8001f14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f16:	2300      	movs	r3, #0
 8001f18:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001f1e:	f107 031c 	add.w	r3, r7, #28
 8001f22:	4619      	mov	r1, r3
 8001f24:	4836      	ldr	r0, [pc, #216]	@ (8002000 <MX_GPIO_Init+0x1ec>)
 8001f26:	f000 fc15 	bl	8002754 <HAL_GPIO_Init>

  /* Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001f2a:	2308      	movs	r3, #8
 8001f2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f2e:	2302      	movs	r3, #2
 8001f30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f32:	2300      	movs	r3, #0
 8001f34:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f36:	2300      	movs	r3, #0
 8001f38:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f3a:	2305      	movs	r3, #5
 8001f3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001f3e:	f107 031c 	add.w	r3, r7, #28
 8001f42:	4619      	mov	r1, r3
 8001f44:	482e      	ldr	r0, [pc, #184]	@ (8002000 <MX_GPIO_Init+0x1ec>)
 8001f46:	f000 fc05 	bl	8002754 <HAL_GPIO_Init>

  /* Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001f4e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001f52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f54:	2300      	movs	r3, #0
 8001f56:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001f58:	f107 031c 	add.w	r3, r7, #28
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	482a      	ldr	r0, [pc, #168]	@ (8002008 <MX_GPIO_Init+0x1f4>)
 8001f60:	f000 fbf8 	bl	8002754 <HAL_GPIO_Init>

  /* Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001f64:	2304      	movs	r3, #4
 8001f66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001f70:	f107 031c 	add.w	r3, r7, #28
 8001f74:	4619      	mov	r1, r3
 8001f76:	4825      	ldr	r0, [pc, #148]	@ (800200c <MX_GPIO_Init+0x1f8>)
 8001f78:	f000 fbec 	bl	8002754 <HAL_GPIO_Init>

  /* Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001f7c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f82:	2302      	movs	r3, #2
 8001f84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f86:	2300      	movs	r3, #0
 8001f88:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f8e:	2305      	movs	r3, #5
 8001f90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001f92:	f107 031c 	add.w	r3, r7, #28
 8001f96:	4619      	mov	r1, r3
 8001f98:	481c      	ldr	r0, [pc, #112]	@ (800200c <MX_GPIO_Init+0x1f8>)
 8001f9a:	f000 fbdb 	bl	8002754 <HAL_GPIO_Init>

  /* Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001f9e:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8001fa2:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fac:	2300      	movs	r3, #0
 8001fae:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fb0:	f107 031c 	add.w	r3, r7, #28
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	4813      	ldr	r0, [pc, #76]	@ (8002004 <MX_GPIO_Init+0x1f0>)
 8001fb8:	f000 fbcc 	bl	8002754 <HAL_GPIO_Init>

  /* Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001fbc:	2320      	movs	r3, #32
 8001fbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001fc8:	f107 031c 	add.w	r3, r7, #28
 8001fcc:	4619      	mov	r1, r3
 8001fce:	480d      	ldr	r0, [pc, #52]	@ (8002004 <MX_GPIO_Init+0x1f0>)
 8001fd0:	f000 fbc0 	bl	8002754 <HAL_GPIO_Init>

  /* Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001fd8:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001fdc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001fe2:	f107 031c 	add.w	r3, r7, #28
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	4804      	ldr	r0, [pc, #16]	@ (8001ffc <MX_GPIO_Init+0x1e8>)
 8001fea:	f000 fbb3 	bl	8002754 <HAL_GPIO_Init>
}
 8001fee:	bf00      	nop
 8001ff0:	3730      	adds	r7, #48	@ 0x30
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	40023800 	.word	0x40023800
 8001ffc:	40021000 	.word	0x40021000
 8002000:	40020800 	.word	0x40020800
 8002004:	40020c00 	.word	0x40020c00
 8002008:	40020000 	.word	0x40020000
 800200c:	40020400 	.word	0x40020400

08002010 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002014:	b672      	cpsid	i
}
 8002016:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  __disable_irq();
  while (1)
 8002018:	bf00      	nop
 800201a:	e7fd      	b.n	8002018 <Error_Handler+0x8>

0800201c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002022:	2300      	movs	r3, #0
 8002024:	607b      	str	r3, [r7, #4]
 8002026:	4b10      	ldr	r3, [pc, #64]	@ (8002068 <HAL_MspInit+0x4c>)
 8002028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800202a:	4a0f      	ldr	r2, [pc, #60]	@ (8002068 <HAL_MspInit+0x4c>)
 800202c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002030:	6453      	str	r3, [r2, #68]	@ 0x44
 8002032:	4b0d      	ldr	r3, [pc, #52]	@ (8002068 <HAL_MspInit+0x4c>)
 8002034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002036:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800203a:	607b      	str	r3, [r7, #4]
 800203c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800203e:	2300      	movs	r3, #0
 8002040:	603b      	str	r3, [r7, #0]
 8002042:	4b09      	ldr	r3, [pc, #36]	@ (8002068 <HAL_MspInit+0x4c>)
 8002044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002046:	4a08      	ldr	r2, [pc, #32]	@ (8002068 <HAL_MspInit+0x4c>)
 8002048:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800204c:	6413      	str	r3, [r2, #64]	@ 0x40
 800204e:	4b06      	ldr	r3, [pc, #24]	@ (8002068 <HAL_MspInit+0x4c>)
 8002050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002052:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002056:	603b      	str	r3, [r7, #0]
 8002058:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800205a:	2007      	movs	r0, #7
 800205c:	f000 fb38 	bl	80026d0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002060:	bf00      	nop
 8002062:	3708      	adds	r7, #8
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	40023800 	.word	0x40023800

0800206c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b08a      	sub	sp, #40	@ 0x28
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002074:	f107 0314 	add.w	r3, r7, #20
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]
 800207c:	605a      	str	r2, [r3, #4]
 800207e:	609a      	str	r2, [r3, #8]
 8002080:	60da      	str	r2, [r3, #12]
 8002082:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a19      	ldr	r2, [pc, #100]	@ (80020f0 <HAL_I2C_MspInit+0x84>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d12c      	bne.n	80020e8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800208e:	2300      	movs	r3, #0
 8002090:	613b      	str	r3, [r7, #16]
 8002092:	4b18      	ldr	r3, [pc, #96]	@ (80020f4 <HAL_I2C_MspInit+0x88>)
 8002094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002096:	4a17      	ldr	r2, [pc, #92]	@ (80020f4 <HAL_I2C_MspInit+0x88>)
 8002098:	f043 0302 	orr.w	r3, r3, #2
 800209c:	6313      	str	r3, [r2, #48]	@ 0x30
 800209e:	4b15      	ldr	r3, [pc, #84]	@ (80020f4 <HAL_I2C_MspInit+0x88>)
 80020a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020a2:	f003 0302 	and.w	r3, r3, #2
 80020a6:	613b      	str	r3, [r7, #16]
 80020a8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80020aa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80020ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020b0:	2312      	movs	r3, #18
 80020b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b4:	2300      	movs	r3, #0
 80020b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020b8:	2303      	movs	r3, #3
 80020ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80020bc:	2304      	movs	r3, #4
 80020be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020c0:	f107 0314 	add.w	r3, r7, #20
 80020c4:	4619      	mov	r1, r3
 80020c6:	480c      	ldr	r0, [pc, #48]	@ (80020f8 <HAL_I2C_MspInit+0x8c>)
 80020c8:	f000 fb44 	bl	8002754 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80020cc:	2300      	movs	r3, #0
 80020ce:	60fb      	str	r3, [r7, #12]
 80020d0:	4b08      	ldr	r3, [pc, #32]	@ (80020f4 <HAL_I2C_MspInit+0x88>)
 80020d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d4:	4a07      	ldr	r2, [pc, #28]	@ (80020f4 <HAL_I2C_MspInit+0x88>)
 80020d6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80020da:	6413      	str	r3, [r2, #64]	@ 0x40
 80020dc:	4b05      	ldr	r3, [pc, #20]	@ (80020f4 <HAL_I2C_MspInit+0x88>)
 80020de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020e4:	60fb      	str	r3, [r7, #12]
 80020e6:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80020e8:	bf00      	nop
 80020ea:	3728      	adds	r7, #40	@ 0x28
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	40005400 	.word	0x40005400
 80020f4:	40023800 	.word	0x40023800
 80020f8:	40020400 	.word	0x40020400

080020fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b08a      	sub	sp, #40	@ 0x28
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002104:	f107 0314 	add.w	r3, r7, #20
 8002108:	2200      	movs	r2, #0
 800210a:	601a      	str	r2, [r3, #0]
 800210c:	605a      	str	r2, [r3, #4]
 800210e:	609a      	str	r2, [r3, #8]
 8002110:	60da      	str	r2, [r3, #12]
 8002112:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a19      	ldr	r2, [pc, #100]	@ (8002180 <HAL_UART_MspInit+0x84>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d12b      	bne.n	8002176 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800211e:	2300      	movs	r3, #0
 8002120:	613b      	str	r3, [r7, #16]
 8002122:	4b18      	ldr	r3, [pc, #96]	@ (8002184 <HAL_UART_MspInit+0x88>)
 8002124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002126:	4a17      	ldr	r2, [pc, #92]	@ (8002184 <HAL_UART_MspInit+0x88>)
 8002128:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800212c:	6413      	str	r3, [r2, #64]	@ 0x40
 800212e:	4b15      	ldr	r3, [pc, #84]	@ (8002184 <HAL_UART_MspInit+0x88>)
 8002130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002132:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002136:	613b      	str	r3, [r7, #16]
 8002138:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800213a:	2300      	movs	r3, #0
 800213c:	60fb      	str	r3, [r7, #12]
 800213e:	4b11      	ldr	r3, [pc, #68]	@ (8002184 <HAL_UART_MspInit+0x88>)
 8002140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002142:	4a10      	ldr	r2, [pc, #64]	@ (8002184 <HAL_UART_MspInit+0x88>)
 8002144:	f043 0301 	orr.w	r3, r3, #1
 8002148:	6313      	str	r3, [r2, #48]	@ 0x30
 800214a:	4b0e      	ldr	r3, [pc, #56]	@ (8002184 <HAL_UART_MspInit+0x88>)
 800214c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800214e:	f003 0301 	and.w	r3, r3, #1
 8002152:	60fb      	str	r3, [r7, #12]
 8002154:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002156:	230c      	movs	r3, #12
 8002158:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800215a:	2302      	movs	r3, #2
 800215c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215e:	2300      	movs	r3, #0
 8002160:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002162:	2303      	movs	r3, #3
 8002164:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002166:	2307      	movs	r3, #7
 8002168:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800216a:	f107 0314 	add.w	r3, r7, #20
 800216e:	4619      	mov	r1, r3
 8002170:	4805      	ldr	r0, [pc, #20]	@ (8002188 <HAL_UART_MspInit+0x8c>)
 8002172:	f000 faef 	bl	8002754 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8002176:	bf00      	nop
 8002178:	3728      	adds	r7, #40	@ 0x28
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	40004400 	.word	0x40004400
 8002184:	40023800 	.word	0x40023800
 8002188:	40020000 	.word	0x40020000

0800218c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002190:	bf00      	nop
 8002192:	e7fd      	b.n	8002190 <NMI_Handler+0x4>

08002194 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002198:	bf00      	nop
 800219a:	e7fd      	b.n	8002198 <HardFault_Handler+0x4>

0800219c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021a0:	bf00      	nop
 80021a2:	e7fd      	b.n	80021a0 <MemManage_Handler+0x4>

080021a4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021a8:	bf00      	nop
 80021aa:	e7fd      	b.n	80021a8 <BusFault_Handler+0x4>

080021ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021b0:	bf00      	nop
 80021b2:	e7fd      	b.n	80021b0 <UsageFault_Handler+0x4>

080021b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021b8:	bf00      	nop
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr

080021c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021c2:	b480      	push	{r7}
 80021c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021c6:	bf00      	nop
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr

080021d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021d4:	bf00      	nop
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr

080021de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021de:	b580      	push	{r7, lr}
 80021e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021e2:	f000 f961 	bl	80024a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021e6:	bf00      	nop
 80021e8:	bd80      	pop	{r7, pc}
	...

080021ec <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80021f0:	4802      	ldr	r0, [pc, #8]	@ (80021fc <OTG_FS_IRQHandler+0x10>)
 80021f2:	f000 ff45 	bl	8003080 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80021f6:	bf00      	nop
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	200006c4 	.word	0x200006c4

08002200 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  return 1;
 8002204:	2301      	movs	r3, #1
}
 8002206:	4618      	mov	r0, r3
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <_kill>:

int _kill(int pid, int sig)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800221a:	f009 fae7 	bl	800b7ec <__errno>
 800221e:	4603      	mov	r3, r0
 8002220:	2216      	movs	r2, #22
 8002222:	601a      	str	r2, [r3, #0]
  return -1;
 8002224:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002228:	4618      	mov	r0, r3
 800222a:	3708      	adds	r7, #8
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}

08002230 <_exit>:

void _exit (int status)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002238:	f04f 31ff 	mov.w	r1, #4294967295
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	f7ff ffe7 	bl	8002210 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002242:	bf00      	nop
 8002244:	e7fd      	b.n	8002242 <_exit+0x12>

08002246 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002246:	b580      	push	{r7, lr}
 8002248:	b086      	sub	sp, #24
 800224a:	af00      	add	r7, sp, #0
 800224c:	60f8      	str	r0, [r7, #12]
 800224e:	60b9      	str	r1, [r7, #8]
 8002250:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002252:	2300      	movs	r3, #0
 8002254:	617b      	str	r3, [r7, #20]
 8002256:	e00a      	b.n	800226e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002258:	f3af 8000 	nop.w
 800225c:	4601      	mov	r1, r0
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	1c5a      	adds	r2, r3, #1
 8002262:	60ba      	str	r2, [r7, #8]
 8002264:	b2ca      	uxtb	r2, r1
 8002266:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	3301      	adds	r3, #1
 800226c:	617b      	str	r3, [r7, #20]
 800226e:	697a      	ldr	r2, [r7, #20]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	429a      	cmp	r2, r3
 8002274:	dbf0      	blt.n	8002258 <_read+0x12>
  }

  return len;
 8002276:	687b      	ldr	r3, [r7, #4]
}
 8002278:	4618      	mov	r0, r3
 800227a:	3718      	adds	r7, #24
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}

08002280 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b086      	sub	sp, #24
 8002284:	af00      	add	r7, sp, #0
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	60b9      	str	r1, [r7, #8]
 800228a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800228c:	2300      	movs	r3, #0
 800228e:	617b      	str	r3, [r7, #20]
 8002290:	e009      	b.n	80022a6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	1c5a      	adds	r2, r3, #1
 8002296:	60ba      	str	r2, [r7, #8]
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	4618      	mov	r0, r3
 800229c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	3301      	adds	r3, #1
 80022a4:	617b      	str	r3, [r7, #20]
 80022a6:	697a      	ldr	r2, [r7, #20]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	429a      	cmp	r2, r3
 80022ac:	dbf1      	blt.n	8002292 <_write+0x12>
  }
  return len;
 80022ae:	687b      	ldr	r3, [r7, #4]
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3718      	adds	r7, #24
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <_close>:

int _close(int file)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80022c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	370c      	adds	r7, #12
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80022e0:	605a      	str	r2, [r3, #4]
  return 0;
 80022e2:	2300      	movs	r3, #0
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <_isatty>:

int _isatty(int file)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80022f8:	2301      	movs	r3, #1
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr

08002306 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002306:	b480      	push	{r7}
 8002308:	b085      	sub	sp, #20
 800230a:	af00      	add	r7, sp, #0
 800230c:	60f8      	str	r0, [r7, #12]
 800230e:	60b9      	str	r1, [r7, #8]
 8002310:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002312:	2300      	movs	r3, #0
}
 8002314:	4618      	mov	r0, r3
 8002316:	3714      	adds	r7, #20
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b086      	sub	sp, #24
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002328:	4a14      	ldr	r2, [pc, #80]	@ (800237c <_sbrk+0x5c>)
 800232a:	4b15      	ldr	r3, [pc, #84]	@ (8002380 <_sbrk+0x60>)
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002334:	4b13      	ldr	r3, [pc, #76]	@ (8002384 <_sbrk+0x64>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d102      	bne.n	8002342 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800233c:	4b11      	ldr	r3, [pc, #68]	@ (8002384 <_sbrk+0x64>)
 800233e:	4a12      	ldr	r2, [pc, #72]	@ (8002388 <_sbrk+0x68>)
 8002340:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002342:	4b10      	ldr	r3, [pc, #64]	@ (8002384 <_sbrk+0x64>)
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4413      	add	r3, r2
 800234a:	693a      	ldr	r2, [r7, #16]
 800234c:	429a      	cmp	r2, r3
 800234e:	d207      	bcs.n	8002360 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002350:	f009 fa4c 	bl	800b7ec <__errno>
 8002354:	4603      	mov	r3, r0
 8002356:	220c      	movs	r2, #12
 8002358:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800235a:	f04f 33ff 	mov.w	r3, #4294967295
 800235e:	e009      	b.n	8002374 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002360:	4b08      	ldr	r3, [pc, #32]	@ (8002384 <_sbrk+0x64>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002366:	4b07      	ldr	r3, [pc, #28]	@ (8002384 <_sbrk+0x64>)
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4413      	add	r3, r2
 800236e:	4a05      	ldr	r2, [pc, #20]	@ (8002384 <_sbrk+0x64>)
 8002370:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002372:	68fb      	ldr	r3, [r7, #12]
}
 8002374:	4618      	mov	r0, r3
 8002376:	3718      	adds	r7, #24
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	20020000 	.word	0x20020000
 8002380:	00000400 	.word	0x00000400
 8002384:	200002e0 	.word	0x200002e0
 8002388:	20000bf0 	.word	0x20000bf0

0800238c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002390:	4b06      	ldr	r3, [pc, #24]	@ (80023ac <SystemInit+0x20>)
 8002392:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002396:	4a05      	ldr	r2, [pc, #20]	@ (80023ac <SystemInit+0x20>)
 8002398:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800239c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023a0:	bf00      	nop
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	e000ed00 	.word	0xe000ed00

080023b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80023b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80023e8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80023b4:	f7ff ffea 	bl	800238c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023b8:	480c      	ldr	r0, [pc, #48]	@ (80023ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80023ba:	490d      	ldr	r1, [pc, #52]	@ (80023f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80023bc:	4a0d      	ldr	r2, [pc, #52]	@ (80023f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80023be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023c0:	e002      	b.n	80023c8 <LoopCopyDataInit>

080023c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023c6:	3304      	adds	r3, #4

080023c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023cc:	d3f9      	bcc.n	80023c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023ce:	4a0a      	ldr	r2, [pc, #40]	@ (80023f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80023d0:	4c0a      	ldr	r4, [pc, #40]	@ (80023fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80023d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023d4:	e001      	b.n	80023da <LoopFillZerobss>

080023d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023d8:	3204      	adds	r2, #4

080023da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023dc:	d3fb      	bcc.n	80023d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023de:	f009 fa0b 	bl	800b7f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023e2:	f7ff fbd7 	bl	8001b94 <main>
  bx  lr    
 80023e6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80023e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80023ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023f0:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 80023f4:	0800da48 	.word	0x0800da48
  ldr r2, =_sbss
 80023f8:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 80023fc:	20000bf0 	.word	0x20000bf0

08002400 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002400:	e7fe      	b.n	8002400 <ADC_IRQHandler>
	...

08002404 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002408:	4b0e      	ldr	r3, [pc, #56]	@ (8002444 <HAL_Init+0x40>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a0d      	ldr	r2, [pc, #52]	@ (8002444 <HAL_Init+0x40>)
 800240e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002412:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002414:	4b0b      	ldr	r3, [pc, #44]	@ (8002444 <HAL_Init+0x40>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a0a      	ldr	r2, [pc, #40]	@ (8002444 <HAL_Init+0x40>)
 800241a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800241e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002420:	4b08      	ldr	r3, [pc, #32]	@ (8002444 <HAL_Init+0x40>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a07      	ldr	r2, [pc, #28]	@ (8002444 <HAL_Init+0x40>)
 8002426:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800242a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800242c:	2003      	movs	r0, #3
 800242e:	f000 f94f 	bl	80026d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002432:	2000      	movs	r0, #0
 8002434:	f000 f808 	bl	8002448 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002438:	f7ff fdf0 	bl	800201c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800243c:	2300      	movs	r3, #0
}
 800243e:	4618      	mov	r0, r3
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	40023c00 	.word	0x40023c00

08002448 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002450:	4b12      	ldr	r3, [pc, #72]	@ (800249c <HAL_InitTick+0x54>)
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	4b12      	ldr	r3, [pc, #72]	@ (80024a0 <HAL_InitTick+0x58>)
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	4619      	mov	r1, r3
 800245a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800245e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002462:	fbb2 f3f3 	udiv	r3, r2, r3
 8002466:	4618      	mov	r0, r3
 8002468:	f000 f967 	bl	800273a <HAL_SYSTICK_Config>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d001      	beq.n	8002476 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e00e      	b.n	8002494 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2b0f      	cmp	r3, #15
 800247a:	d80a      	bhi.n	8002492 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800247c:	2200      	movs	r2, #0
 800247e:	6879      	ldr	r1, [r7, #4]
 8002480:	f04f 30ff 	mov.w	r0, #4294967295
 8002484:	f000 f92f 	bl	80026e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002488:	4a06      	ldr	r2, [pc, #24]	@ (80024a4 <HAL_InitTick+0x5c>)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800248e:	2300      	movs	r3, #0
 8002490:	e000      	b.n	8002494 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
}
 8002494:	4618      	mov	r0, r3
 8002496:	3708      	adds	r7, #8
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	20000000 	.word	0x20000000
 80024a0:	20000008 	.word	0x20000008
 80024a4:	20000004 	.word	0x20000004

080024a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024ac:	4b06      	ldr	r3, [pc, #24]	@ (80024c8 <HAL_IncTick+0x20>)
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	461a      	mov	r2, r3
 80024b2:	4b06      	ldr	r3, [pc, #24]	@ (80024cc <HAL_IncTick+0x24>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4413      	add	r3, r2
 80024b8:	4a04      	ldr	r2, [pc, #16]	@ (80024cc <HAL_IncTick+0x24>)
 80024ba:	6013      	str	r3, [r2, #0]
}
 80024bc:	bf00      	nop
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	20000008 	.word	0x20000008
 80024cc:	200002e4 	.word	0x200002e4

080024d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
  return uwTick;
 80024d4:	4b03      	ldr	r3, [pc, #12]	@ (80024e4 <HAL_GetTick+0x14>)
 80024d6:	681b      	ldr	r3, [r3, #0]
}
 80024d8:	4618      	mov	r0, r3
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	200002e4 	.word	0x200002e4

080024e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024f0:	f7ff ffee 	bl	80024d0 <HAL_GetTick>
 80024f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002500:	d005      	beq.n	800250e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002502:	4b0a      	ldr	r3, [pc, #40]	@ (800252c <HAL_Delay+0x44>)
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	461a      	mov	r2, r3
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	4413      	add	r3, r2
 800250c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800250e:	bf00      	nop
 8002510:	f7ff ffde 	bl	80024d0 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	68fa      	ldr	r2, [r7, #12]
 800251c:	429a      	cmp	r2, r3
 800251e:	d8f7      	bhi.n	8002510 <HAL_Delay+0x28>
  {
  }
}
 8002520:	bf00      	nop
 8002522:	bf00      	nop
 8002524:	3710      	adds	r7, #16
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	20000008 	.word	0x20000008

08002530 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002530:	b480      	push	{r7}
 8002532:	b085      	sub	sp, #20
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f003 0307 	and.w	r3, r3, #7
 800253e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002540:	4b0c      	ldr	r3, [pc, #48]	@ (8002574 <__NVIC_SetPriorityGrouping+0x44>)
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002546:	68ba      	ldr	r2, [r7, #8]
 8002548:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800254c:	4013      	ands	r3, r2
 800254e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002558:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800255c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002560:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002562:	4a04      	ldr	r2, [pc, #16]	@ (8002574 <__NVIC_SetPriorityGrouping+0x44>)
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	60d3      	str	r3, [r2, #12]
}
 8002568:	bf00      	nop
 800256a:	3714      	adds	r7, #20
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr
 8002574:	e000ed00 	.word	0xe000ed00

08002578 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800257c:	4b04      	ldr	r3, [pc, #16]	@ (8002590 <__NVIC_GetPriorityGrouping+0x18>)
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	0a1b      	lsrs	r3, r3, #8
 8002582:	f003 0307 	and.w	r3, r3, #7
}
 8002586:	4618      	mov	r0, r3
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr
 8002590:	e000ed00 	.word	0xe000ed00

08002594 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	4603      	mov	r3, r0
 800259c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800259e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	db0b      	blt.n	80025be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025a6:	79fb      	ldrb	r3, [r7, #7]
 80025a8:	f003 021f 	and.w	r2, r3, #31
 80025ac:	4907      	ldr	r1, [pc, #28]	@ (80025cc <__NVIC_EnableIRQ+0x38>)
 80025ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b2:	095b      	lsrs	r3, r3, #5
 80025b4:	2001      	movs	r0, #1
 80025b6:	fa00 f202 	lsl.w	r2, r0, r2
 80025ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80025be:	bf00      	nop
 80025c0:	370c      	adds	r7, #12
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	e000e100 	.word	0xe000e100

080025d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	4603      	mov	r3, r0
 80025d8:	6039      	str	r1, [r7, #0]
 80025da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	db0a      	blt.n	80025fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	b2da      	uxtb	r2, r3
 80025e8:	490c      	ldr	r1, [pc, #48]	@ (800261c <__NVIC_SetPriority+0x4c>)
 80025ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ee:	0112      	lsls	r2, r2, #4
 80025f0:	b2d2      	uxtb	r2, r2
 80025f2:	440b      	add	r3, r1
 80025f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025f8:	e00a      	b.n	8002610 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	b2da      	uxtb	r2, r3
 80025fe:	4908      	ldr	r1, [pc, #32]	@ (8002620 <__NVIC_SetPriority+0x50>)
 8002600:	79fb      	ldrb	r3, [r7, #7]
 8002602:	f003 030f 	and.w	r3, r3, #15
 8002606:	3b04      	subs	r3, #4
 8002608:	0112      	lsls	r2, r2, #4
 800260a:	b2d2      	uxtb	r2, r2
 800260c:	440b      	add	r3, r1
 800260e:	761a      	strb	r2, [r3, #24]
}
 8002610:	bf00      	nop
 8002612:	370c      	adds	r7, #12
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr
 800261c:	e000e100 	.word	0xe000e100
 8002620:	e000ed00 	.word	0xe000ed00

08002624 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002624:	b480      	push	{r7}
 8002626:	b089      	sub	sp, #36	@ 0x24
 8002628:	af00      	add	r7, sp, #0
 800262a:	60f8      	str	r0, [r7, #12]
 800262c:	60b9      	str	r1, [r7, #8]
 800262e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	f003 0307 	and.w	r3, r3, #7
 8002636:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	f1c3 0307 	rsb	r3, r3, #7
 800263e:	2b04      	cmp	r3, #4
 8002640:	bf28      	it	cs
 8002642:	2304      	movcs	r3, #4
 8002644:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	3304      	adds	r3, #4
 800264a:	2b06      	cmp	r3, #6
 800264c:	d902      	bls.n	8002654 <NVIC_EncodePriority+0x30>
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	3b03      	subs	r3, #3
 8002652:	e000      	b.n	8002656 <NVIC_EncodePriority+0x32>
 8002654:	2300      	movs	r3, #0
 8002656:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002658:	f04f 32ff 	mov.w	r2, #4294967295
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	fa02 f303 	lsl.w	r3, r2, r3
 8002662:	43da      	mvns	r2, r3
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	401a      	ands	r2, r3
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800266c:	f04f 31ff 	mov.w	r1, #4294967295
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	fa01 f303 	lsl.w	r3, r1, r3
 8002676:	43d9      	mvns	r1, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800267c:	4313      	orrs	r3, r2
         );
}
 800267e:	4618      	mov	r0, r3
 8002680:	3724      	adds	r7, #36	@ 0x24
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
	...

0800268c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	3b01      	subs	r3, #1
 8002698:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800269c:	d301      	bcc.n	80026a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800269e:	2301      	movs	r3, #1
 80026a0:	e00f      	b.n	80026c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026a2:	4a0a      	ldr	r2, [pc, #40]	@ (80026cc <SysTick_Config+0x40>)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	3b01      	subs	r3, #1
 80026a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026aa:	210f      	movs	r1, #15
 80026ac:	f04f 30ff 	mov.w	r0, #4294967295
 80026b0:	f7ff ff8e 	bl	80025d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026b4:	4b05      	ldr	r3, [pc, #20]	@ (80026cc <SysTick_Config+0x40>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026ba:	4b04      	ldr	r3, [pc, #16]	@ (80026cc <SysTick_Config+0x40>)
 80026bc:	2207      	movs	r2, #7
 80026be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026c0:	2300      	movs	r3, #0
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3708      	adds	r7, #8
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	e000e010 	.word	0xe000e010

080026d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f7ff ff29 	bl	8002530 <__NVIC_SetPriorityGrouping>
}
 80026de:	bf00      	nop
 80026e0:	3708      	adds	r7, #8
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}

080026e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026e6:	b580      	push	{r7, lr}
 80026e8:	b086      	sub	sp, #24
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	4603      	mov	r3, r0
 80026ee:	60b9      	str	r1, [r7, #8]
 80026f0:	607a      	str	r2, [r7, #4]
 80026f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026f4:	2300      	movs	r3, #0
 80026f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026f8:	f7ff ff3e 	bl	8002578 <__NVIC_GetPriorityGrouping>
 80026fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	68b9      	ldr	r1, [r7, #8]
 8002702:	6978      	ldr	r0, [r7, #20]
 8002704:	f7ff ff8e 	bl	8002624 <NVIC_EncodePriority>
 8002708:	4602      	mov	r2, r0
 800270a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800270e:	4611      	mov	r1, r2
 8002710:	4618      	mov	r0, r3
 8002712:	f7ff ff5d 	bl	80025d0 <__NVIC_SetPriority>
}
 8002716:	bf00      	nop
 8002718:	3718      	adds	r7, #24
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}

0800271e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800271e:	b580      	push	{r7, lr}
 8002720:	b082      	sub	sp, #8
 8002722:	af00      	add	r7, sp, #0
 8002724:	4603      	mov	r3, r0
 8002726:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002728:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800272c:	4618      	mov	r0, r3
 800272e:	f7ff ff31 	bl	8002594 <__NVIC_EnableIRQ>
}
 8002732:	bf00      	nop
 8002734:	3708      	adds	r7, #8
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}

0800273a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800273a:	b580      	push	{r7, lr}
 800273c:	b082      	sub	sp, #8
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f7ff ffa2 	bl	800268c <SysTick_Config>
 8002748:	4603      	mov	r3, r0
}
 800274a:	4618      	mov	r0, r3
 800274c:	3708      	adds	r7, #8
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
	...

08002754 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002754:	b480      	push	{r7}
 8002756:	b089      	sub	sp, #36	@ 0x24
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800275e:	2300      	movs	r3, #0
 8002760:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002762:	2300      	movs	r3, #0
 8002764:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002766:	2300      	movs	r3, #0
 8002768:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800276a:	2300      	movs	r3, #0
 800276c:	61fb      	str	r3, [r7, #28]
 800276e:	e16b      	b.n	8002a48 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002770:	2201      	movs	r2, #1
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	fa02 f303 	lsl.w	r3, r2, r3
 8002778:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	697a      	ldr	r2, [r7, #20]
 8002780:	4013      	ands	r3, r2
 8002782:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002784:	693a      	ldr	r2, [r7, #16]
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	429a      	cmp	r2, r3
 800278a:	f040 815a 	bne.w	8002a42 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f003 0303 	and.w	r3, r3, #3
 8002796:	2b01      	cmp	r3, #1
 8002798:	d005      	beq.n	80027a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d130      	bne.n	8002808 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	005b      	lsls	r3, r3, #1
 80027b0:	2203      	movs	r2, #3
 80027b2:	fa02 f303 	lsl.w	r3, r2, r3
 80027b6:	43db      	mvns	r3, r3
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	4013      	ands	r3, r2
 80027bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	68da      	ldr	r2, [r3, #12]
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	005b      	lsls	r3, r3, #1
 80027c6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ca:	69ba      	ldr	r2, [r7, #24]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	69ba      	ldr	r2, [r7, #24]
 80027d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027dc:	2201      	movs	r2, #1
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	fa02 f303 	lsl.w	r3, r2, r3
 80027e4:	43db      	mvns	r3, r3
 80027e6:	69ba      	ldr	r2, [r7, #24]
 80027e8:	4013      	ands	r3, r2
 80027ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	091b      	lsrs	r3, r3, #4
 80027f2:	f003 0201 	and.w	r2, r3, #1
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	fa02 f303 	lsl.w	r3, r2, r3
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	4313      	orrs	r3, r2
 8002800:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	69ba      	ldr	r2, [r7, #24]
 8002806:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f003 0303 	and.w	r3, r3, #3
 8002810:	2b03      	cmp	r3, #3
 8002812:	d017      	beq.n	8002844 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	005b      	lsls	r3, r3, #1
 800281e:	2203      	movs	r2, #3
 8002820:	fa02 f303 	lsl.w	r3, r2, r3
 8002824:	43db      	mvns	r3, r3
 8002826:	69ba      	ldr	r2, [r7, #24]
 8002828:	4013      	ands	r3, r2
 800282a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	689a      	ldr	r2, [r3, #8]
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	005b      	lsls	r3, r3, #1
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	4313      	orrs	r3, r2
 800283c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	69ba      	ldr	r2, [r7, #24]
 8002842:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f003 0303 	and.w	r3, r3, #3
 800284c:	2b02      	cmp	r3, #2
 800284e:	d123      	bne.n	8002898 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	08da      	lsrs	r2, r3, #3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	3208      	adds	r2, #8
 8002858:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800285c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	f003 0307 	and.w	r3, r3, #7
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	220f      	movs	r2, #15
 8002868:	fa02 f303 	lsl.w	r3, r2, r3
 800286c:	43db      	mvns	r3, r3
 800286e:	69ba      	ldr	r2, [r7, #24]
 8002870:	4013      	ands	r3, r2
 8002872:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	691a      	ldr	r2, [r3, #16]
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	f003 0307 	and.w	r3, r3, #7
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	fa02 f303 	lsl.w	r3, r2, r3
 8002884:	69ba      	ldr	r2, [r7, #24]
 8002886:	4313      	orrs	r3, r2
 8002888:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	08da      	lsrs	r2, r3, #3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	3208      	adds	r2, #8
 8002892:	69b9      	ldr	r1, [r7, #24]
 8002894:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	005b      	lsls	r3, r3, #1
 80028a2:	2203      	movs	r2, #3
 80028a4:	fa02 f303 	lsl.w	r3, r2, r3
 80028a8:	43db      	mvns	r3, r3
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	4013      	ands	r3, r2
 80028ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f003 0203 	and.w	r2, r3, #3
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	fa02 f303 	lsl.w	r3, r2, r3
 80028c0:	69ba      	ldr	r2, [r7, #24]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	69ba      	ldr	r2, [r7, #24]
 80028ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	f000 80b4 	beq.w	8002a42 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028da:	2300      	movs	r3, #0
 80028dc:	60fb      	str	r3, [r7, #12]
 80028de:	4b60      	ldr	r3, [pc, #384]	@ (8002a60 <HAL_GPIO_Init+0x30c>)
 80028e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028e2:	4a5f      	ldr	r2, [pc, #380]	@ (8002a60 <HAL_GPIO_Init+0x30c>)
 80028e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80028e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80028ea:	4b5d      	ldr	r3, [pc, #372]	@ (8002a60 <HAL_GPIO_Init+0x30c>)
 80028ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028f2:	60fb      	str	r3, [r7, #12]
 80028f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028f6:	4a5b      	ldr	r2, [pc, #364]	@ (8002a64 <HAL_GPIO_Init+0x310>)
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	089b      	lsrs	r3, r3, #2
 80028fc:	3302      	adds	r3, #2
 80028fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002902:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	f003 0303 	and.w	r3, r3, #3
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	220f      	movs	r2, #15
 800290e:	fa02 f303 	lsl.w	r3, r2, r3
 8002912:	43db      	mvns	r3, r3
 8002914:	69ba      	ldr	r2, [r7, #24]
 8002916:	4013      	ands	r3, r2
 8002918:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a52      	ldr	r2, [pc, #328]	@ (8002a68 <HAL_GPIO_Init+0x314>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d02b      	beq.n	800297a <HAL_GPIO_Init+0x226>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a51      	ldr	r2, [pc, #324]	@ (8002a6c <HAL_GPIO_Init+0x318>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d025      	beq.n	8002976 <HAL_GPIO_Init+0x222>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a50      	ldr	r2, [pc, #320]	@ (8002a70 <HAL_GPIO_Init+0x31c>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d01f      	beq.n	8002972 <HAL_GPIO_Init+0x21e>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a4f      	ldr	r2, [pc, #316]	@ (8002a74 <HAL_GPIO_Init+0x320>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d019      	beq.n	800296e <HAL_GPIO_Init+0x21a>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a4e      	ldr	r2, [pc, #312]	@ (8002a78 <HAL_GPIO_Init+0x324>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d013      	beq.n	800296a <HAL_GPIO_Init+0x216>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a4d      	ldr	r2, [pc, #308]	@ (8002a7c <HAL_GPIO_Init+0x328>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d00d      	beq.n	8002966 <HAL_GPIO_Init+0x212>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a4c      	ldr	r2, [pc, #304]	@ (8002a80 <HAL_GPIO_Init+0x32c>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d007      	beq.n	8002962 <HAL_GPIO_Init+0x20e>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a4b      	ldr	r2, [pc, #300]	@ (8002a84 <HAL_GPIO_Init+0x330>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d101      	bne.n	800295e <HAL_GPIO_Init+0x20a>
 800295a:	2307      	movs	r3, #7
 800295c:	e00e      	b.n	800297c <HAL_GPIO_Init+0x228>
 800295e:	2308      	movs	r3, #8
 8002960:	e00c      	b.n	800297c <HAL_GPIO_Init+0x228>
 8002962:	2306      	movs	r3, #6
 8002964:	e00a      	b.n	800297c <HAL_GPIO_Init+0x228>
 8002966:	2305      	movs	r3, #5
 8002968:	e008      	b.n	800297c <HAL_GPIO_Init+0x228>
 800296a:	2304      	movs	r3, #4
 800296c:	e006      	b.n	800297c <HAL_GPIO_Init+0x228>
 800296e:	2303      	movs	r3, #3
 8002970:	e004      	b.n	800297c <HAL_GPIO_Init+0x228>
 8002972:	2302      	movs	r3, #2
 8002974:	e002      	b.n	800297c <HAL_GPIO_Init+0x228>
 8002976:	2301      	movs	r3, #1
 8002978:	e000      	b.n	800297c <HAL_GPIO_Init+0x228>
 800297a:	2300      	movs	r3, #0
 800297c:	69fa      	ldr	r2, [r7, #28]
 800297e:	f002 0203 	and.w	r2, r2, #3
 8002982:	0092      	lsls	r2, r2, #2
 8002984:	4093      	lsls	r3, r2
 8002986:	69ba      	ldr	r2, [r7, #24]
 8002988:	4313      	orrs	r3, r2
 800298a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800298c:	4935      	ldr	r1, [pc, #212]	@ (8002a64 <HAL_GPIO_Init+0x310>)
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	089b      	lsrs	r3, r3, #2
 8002992:	3302      	adds	r3, #2
 8002994:	69ba      	ldr	r2, [r7, #24]
 8002996:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800299a:	4b3b      	ldr	r3, [pc, #236]	@ (8002a88 <HAL_GPIO_Init+0x334>)
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	43db      	mvns	r3, r3
 80029a4:	69ba      	ldr	r2, [r7, #24]
 80029a6:	4013      	ands	r3, r2
 80029a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d003      	beq.n	80029be <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80029b6:	69ba      	ldr	r2, [r7, #24]
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029be:	4a32      	ldr	r2, [pc, #200]	@ (8002a88 <HAL_GPIO_Init+0x334>)
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029c4:	4b30      	ldr	r3, [pc, #192]	@ (8002a88 <HAL_GPIO_Init+0x334>)
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	43db      	mvns	r3, r3
 80029ce:	69ba      	ldr	r2, [r7, #24]
 80029d0:	4013      	ands	r3, r2
 80029d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d003      	beq.n	80029e8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029e8:	4a27      	ldr	r2, [pc, #156]	@ (8002a88 <HAL_GPIO_Init+0x334>)
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80029ee:	4b26      	ldr	r3, [pc, #152]	@ (8002a88 <HAL_GPIO_Init+0x334>)
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	43db      	mvns	r3, r3
 80029f8:	69ba      	ldr	r2, [r7, #24]
 80029fa:	4013      	ands	r3, r2
 80029fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d003      	beq.n	8002a12 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002a0a:	69ba      	ldr	r2, [r7, #24]
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a12:	4a1d      	ldr	r2, [pc, #116]	@ (8002a88 <HAL_GPIO_Init+0x334>)
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a18:	4b1b      	ldr	r3, [pc, #108]	@ (8002a88 <HAL_GPIO_Init+0x334>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	43db      	mvns	r3, r3
 8002a22:	69ba      	ldr	r2, [r7, #24]
 8002a24:	4013      	ands	r3, r2
 8002a26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d003      	beq.n	8002a3c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002a34:	69ba      	ldr	r2, [r7, #24]
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a3c:	4a12      	ldr	r2, [pc, #72]	@ (8002a88 <HAL_GPIO_Init+0x334>)
 8002a3e:	69bb      	ldr	r3, [r7, #24]
 8002a40:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	3301      	adds	r3, #1
 8002a46:	61fb      	str	r3, [r7, #28]
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	2b0f      	cmp	r3, #15
 8002a4c:	f67f ae90 	bls.w	8002770 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a50:	bf00      	nop
 8002a52:	bf00      	nop
 8002a54:	3724      	adds	r7, #36	@ 0x24
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr
 8002a5e:	bf00      	nop
 8002a60:	40023800 	.word	0x40023800
 8002a64:	40013800 	.word	0x40013800
 8002a68:	40020000 	.word	0x40020000
 8002a6c:	40020400 	.word	0x40020400
 8002a70:	40020800 	.word	0x40020800
 8002a74:	40020c00 	.word	0x40020c00
 8002a78:	40021000 	.word	0x40021000
 8002a7c:	40021400 	.word	0x40021400
 8002a80:	40021800 	.word	0x40021800
 8002a84:	40021c00 	.word	0x40021c00
 8002a88:	40013c00 	.word	0x40013c00

08002a8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	460b      	mov	r3, r1
 8002a96:	807b      	strh	r3, [r7, #2]
 8002a98:	4613      	mov	r3, r2
 8002a9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a9c:	787b      	ldrb	r3, [r7, #1]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d003      	beq.n	8002aaa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002aa2:	887a      	ldrh	r2, [r7, #2]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002aa8:	e003      	b.n	8002ab2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002aaa:	887b      	ldrh	r3, [r7, #2]
 8002aac:	041a      	lsls	r2, r3, #16
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	619a      	str	r2, [r3, #24]
}
 8002ab2:	bf00      	nop
 8002ab4:	370c      	adds	r7, #12
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr

08002abe <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002abe:	b580      	push	{r7, lr}
 8002ac0:	b086      	sub	sp, #24
 8002ac2:	af02      	add	r7, sp, #8
 8002ac4:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d101      	bne.n	8002ad0 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e059      	b.n	8002b84 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d106      	bne.n	8002af0 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f007 fc30 	bl	800a350 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2203      	movs	r2, #3
 8002af4:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002afe:	d102      	bne.n	8002b06 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f004 fa49 	bl	8006fa2 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6818      	ldr	r0, [r3, #0]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	7c1a      	ldrb	r2, [r3, #16]
 8002b18:	f88d 2000 	strb.w	r2, [sp]
 8002b1c:	3304      	adds	r3, #4
 8002b1e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b20:	f004 f9ca 	bl	8006eb8 <USB_CoreInit>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d005      	beq.n	8002b36 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2202      	movs	r2, #2
 8002b2e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e026      	b.n	8002b84 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	2101      	movs	r1, #1
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f004 fa41 	bl	8006fc4 <USB_SetCurrentMode>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d005      	beq.n	8002b54 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2202      	movs	r2, #2
 8002b4c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e017      	b.n	8002b84 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6818      	ldr	r0, [r3, #0]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	7c1a      	ldrb	r2, [r3, #16]
 8002b5c:	f88d 2000 	strb.w	r2, [sp]
 8002b60:	3304      	adds	r3, #4
 8002b62:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b64:	f004 fbe4 	bl	8007330 <USB_HostInit>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d005      	beq.n	8002b7a <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2202      	movs	r2, #2
 8002b72:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e004      	b.n	8002b84 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8002b82:	2300      	movs	r3, #0
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3710      	adds	r7, #16
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8002b8c:	b590      	push	{r4, r7, lr}
 8002b8e:	b08b      	sub	sp, #44	@ 0x2c
 8002b90:	af04      	add	r7, sp, #16
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	4608      	mov	r0, r1
 8002b96:	4611      	mov	r1, r2
 8002b98:	461a      	mov	r2, r3
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	70fb      	strb	r3, [r7, #3]
 8002b9e:	460b      	mov	r3, r1
 8002ba0:	70bb      	strb	r3, [r7, #2]
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8002ba6:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8002ba8:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d101      	bne.n	8002bb8 <HAL_HCD_HC_Init+0x2c>
 8002bb4:	2302      	movs	r3, #2
 8002bb6:	e09d      	b.n	8002cf4 <HAL_HCD_HC_Init+0x168>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8002bc0:	78fa      	ldrb	r2, [r7, #3]
 8002bc2:	6879      	ldr	r1, [r7, #4]
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	011b      	lsls	r3, r3, #4
 8002bc8:	1a9b      	subs	r3, r3, r2
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	440b      	add	r3, r1
 8002bce:	3319      	adds	r3, #25
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002bd4:	78fa      	ldrb	r2, [r7, #3]
 8002bd6:	6879      	ldr	r1, [r7, #4]
 8002bd8:	4613      	mov	r3, r2
 8002bda:	011b      	lsls	r3, r3, #4
 8002bdc:	1a9b      	subs	r3, r3, r2
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	440b      	add	r3, r1
 8002be2:	3314      	adds	r3, #20
 8002be4:	787a      	ldrb	r2, [r7, #1]
 8002be6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002be8:	78fa      	ldrb	r2, [r7, #3]
 8002bea:	6879      	ldr	r1, [r7, #4]
 8002bec:	4613      	mov	r3, r2
 8002bee:	011b      	lsls	r3, r3, #4
 8002bf0:	1a9b      	subs	r3, r3, r2
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	440b      	add	r3, r1
 8002bf6:	3315      	adds	r3, #21
 8002bf8:	78fa      	ldrb	r2, [r7, #3]
 8002bfa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002bfc:	78fa      	ldrb	r2, [r7, #3]
 8002bfe:	6879      	ldr	r1, [r7, #4]
 8002c00:	4613      	mov	r3, r2
 8002c02:	011b      	lsls	r3, r3, #4
 8002c04:	1a9b      	subs	r3, r3, r2
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	440b      	add	r3, r1
 8002c0a:	3326      	adds	r3, #38	@ 0x26
 8002c0c:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8002c10:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002c12:	78fa      	ldrb	r2, [r7, #3]
 8002c14:	78bb      	ldrb	r3, [r7, #2]
 8002c16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002c1a:	b2d8      	uxtb	r0, r3
 8002c1c:	6879      	ldr	r1, [r7, #4]
 8002c1e:	4613      	mov	r3, r2
 8002c20:	011b      	lsls	r3, r3, #4
 8002c22:	1a9b      	subs	r3, r3, r2
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	440b      	add	r3, r1
 8002c28:	3316      	adds	r3, #22
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8002c2e:	78fb      	ldrb	r3, [r7, #3]
 8002c30:	4619      	mov	r1, r3
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f000 fbc8 	bl	80033c8 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8002c38:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	da0a      	bge.n	8002c56 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002c40:	78fa      	ldrb	r2, [r7, #3]
 8002c42:	6879      	ldr	r1, [r7, #4]
 8002c44:	4613      	mov	r3, r2
 8002c46:	011b      	lsls	r3, r3, #4
 8002c48:	1a9b      	subs	r3, r3, r2
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	440b      	add	r3, r1
 8002c4e:	3317      	adds	r3, #23
 8002c50:	2201      	movs	r2, #1
 8002c52:	701a      	strb	r2, [r3, #0]
 8002c54:	e009      	b.n	8002c6a <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002c56:	78fa      	ldrb	r2, [r7, #3]
 8002c58:	6879      	ldr	r1, [r7, #4]
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	011b      	lsls	r3, r3, #4
 8002c5e:	1a9b      	subs	r3, r3, r2
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	440b      	add	r3, r1
 8002c64:	3317      	adds	r3, #23
 8002c66:	2200      	movs	r2, #0
 8002c68:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f004 fcc2 	bl	80075f8 <USB_GetHostSpeed>
 8002c74:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8002c76:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d10b      	bne.n	8002c96 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8002c7e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d107      	bne.n	8002c96 <HAL_HCD_HC_Init+0x10a>
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d104      	bne.n	8002c96 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	2bbc      	cmp	r3, #188	@ 0xbc
 8002c90:	d901      	bls.n	8002c96 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8002c92:	23bc      	movs	r3, #188	@ 0xbc
 8002c94:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8002c96:	78fa      	ldrb	r2, [r7, #3]
 8002c98:	6879      	ldr	r1, [r7, #4]
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	011b      	lsls	r3, r3, #4
 8002c9e:	1a9b      	subs	r3, r3, r2
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	440b      	add	r3, r1
 8002ca4:	3318      	adds	r3, #24
 8002ca6:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8002caa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8002cac:	78fa      	ldrb	r2, [r7, #3]
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	b298      	uxth	r0, r3
 8002cb2:	6879      	ldr	r1, [r7, #4]
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	011b      	lsls	r3, r3, #4
 8002cb8:	1a9b      	subs	r3, r3, r2
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	440b      	add	r3, r1
 8002cbe:	3328      	adds	r3, #40	@ 0x28
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6818      	ldr	r0, [r3, #0]
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	787c      	ldrb	r4, [r7, #1]
 8002cce:	78ba      	ldrb	r2, [r7, #2]
 8002cd0:	78f9      	ldrb	r1, [r7, #3]
 8002cd2:	9302      	str	r3, [sp, #8]
 8002cd4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002cd8:	9301      	str	r3, [sp, #4]
 8002cda:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002cde:	9300      	str	r3, [sp, #0]
 8002ce0:	4623      	mov	r3, r4
 8002ce2:	f004 fcb1 	bl	8007648 <USB_HC_Init>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8002cf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	371c      	adds	r7, #28
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd90      	pop	{r4, r7, pc}

08002cfc <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	460b      	mov	r3, r1
 8002d06:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d101      	bne.n	8002d1a <HAL_HCD_HC_Halt+0x1e>
 8002d16:	2302      	movs	r3, #2
 8002d18:	e00f      	b.n	8002d3a <HAL_HCD_HC_Halt+0x3e>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	78fa      	ldrb	r2, [r7, #3]
 8002d28:	4611      	mov	r1, r2
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f005 f843 	bl	8007db6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8002d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3710      	adds	r7, #16
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
	...

08002d44 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	4608      	mov	r0, r1
 8002d4e:	4611      	mov	r1, r2
 8002d50:	461a      	mov	r2, r3
 8002d52:	4603      	mov	r3, r0
 8002d54:	70fb      	strb	r3, [r7, #3]
 8002d56:	460b      	mov	r3, r1
 8002d58:	70bb      	strb	r3, [r7, #2]
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002d5e:	78fa      	ldrb	r2, [r7, #3]
 8002d60:	6879      	ldr	r1, [r7, #4]
 8002d62:	4613      	mov	r3, r2
 8002d64:	011b      	lsls	r3, r3, #4
 8002d66:	1a9b      	subs	r3, r3, r2
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	440b      	add	r3, r1
 8002d6c:	3317      	adds	r3, #23
 8002d6e:	78ba      	ldrb	r2, [r7, #2]
 8002d70:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002d72:	78fa      	ldrb	r2, [r7, #3]
 8002d74:	6879      	ldr	r1, [r7, #4]
 8002d76:	4613      	mov	r3, r2
 8002d78:	011b      	lsls	r3, r3, #4
 8002d7a:	1a9b      	subs	r3, r3, r2
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	440b      	add	r3, r1
 8002d80:	3326      	adds	r3, #38	@ 0x26
 8002d82:	787a      	ldrb	r2, [r7, #1]
 8002d84:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002d86:	7c3b      	ldrb	r3, [r7, #16]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d114      	bne.n	8002db6 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002d8c:	78fa      	ldrb	r2, [r7, #3]
 8002d8e:	6879      	ldr	r1, [r7, #4]
 8002d90:	4613      	mov	r3, r2
 8002d92:	011b      	lsls	r3, r3, #4
 8002d94:	1a9b      	subs	r3, r3, r2
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	440b      	add	r3, r1
 8002d9a:	332a      	adds	r3, #42	@ 0x2a
 8002d9c:	2203      	movs	r2, #3
 8002d9e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002da0:	78fa      	ldrb	r2, [r7, #3]
 8002da2:	6879      	ldr	r1, [r7, #4]
 8002da4:	4613      	mov	r3, r2
 8002da6:	011b      	lsls	r3, r3, #4
 8002da8:	1a9b      	subs	r3, r3, r2
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	440b      	add	r3, r1
 8002dae:	3319      	adds	r3, #25
 8002db0:	7f3a      	ldrb	r2, [r7, #28]
 8002db2:	701a      	strb	r2, [r3, #0]
 8002db4:	e009      	b.n	8002dca <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002db6:	78fa      	ldrb	r2, [r7, #3]
 8002db8:	6879      	ldr	r1, [r7, #4]
 8002dba:	4613      	mov	r3, r2
 8002dbc:	011b      	lsls	r3, r3, #4
 8002dbe:	1a9b      	subs	r3, r3, r2
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	440b      	add	r3, r1
 8002dc4:	332a      	adds	r3, #42	@ 0x2a
 8002dc6:	2202      	movs	r2, #2
 8002dc8:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002dca:	787b      	ldrb	r3, [r7, #1]
 8002dcc:	2b03      	cmp	r3, #3
 8002dce:	f200 8102 	bhi.w	8002fd6 <HAL_HCD_HC_SubmitRequest+0x292>
 8002dd2:	a201      	add	r2, pc, #4	@ (adr r2, 8002dd8 <HAL_HCD_HC_SubmitRequest+0x94>)
 8002dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dd8:	08002de9 	.word	0x08002de9
 8002ddc:	08002fc1 	.word	0x08002fc1
 8002de0:	08002ead 	.word	0x08002ead
 8002de4:	08002f37 	.word	0x08002f37
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8002de8:	7c3b      	ldrb	r3, [r7, #16]
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	f040 80f5 	bne.w	8002fda <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8002df0:	78bb      	ldrb	r3, [r7, #2]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d12d      	bne.n	8002e52 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8002df6:	8b3b      	ldrh	r3, [r7, #24]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d109      	bne.n	8002e10 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8002dfc:	78fa      	ldrb	r2, [r7, #3]
 8002dfe:	6879      	ldr	r1, [r7, #4]
 8002e00:	4613      	mov	r3, r2
 8002e02:	011b      	lsls	r3, r3, #4
 8002e04:	1a9b      	subs	r3, r3, r2
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	440b      	add	r3, r1
 8002e0a:	333d      	adds	r3, #61	@ 0x3d
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8002e10:	78fa      	ldrb	r2, [r7, #3]
 8002e12:	6879      	ldr	r1, [r7, #4]
 8002e14:	4613      	mov	r3, r2
 8002e16:	011b      	lsls	r3, r3, #4
 8002e18:	1a9b      	subs	r3, r3, r2
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	440b      	add	r3, r1
 8002e1e:	333d      	adds	r3, #61	@ 0x3d
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d10a      	bne.n	8002e3c <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002e26:	78fa      	ldrb	r2, [r7, #3]
 8002e28:	6879      	ldr	r1, [r7, #4]
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	011b      	lsls	r3, r3, #4
 8002e2e:	1a9b      	subs	r3, r3, r2
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	440b      	add	r3, r1
 8002e34:	332a      	adds	r3, #42	@ 0x2a
 8002e36:	2200      	movs	r2, #0
 8002e38:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8002e3a:	e0ce      	b.n	8002fda <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002e3c:	78fa      	ldrb	r2, [r7, #3]
 8002e3e:	6879      	ldr	r1, [r7, #4]
 8002e40:	4613      	mov	r3, r2
 8002e42:	011b      	lsls	r3, r3, #4
 8002e44:	1a9b      	subs	r3, r3, r2
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	440b      	add	r3, r1
 8002e4a:	332a      	adds	r3, #42	@ 0x2a
 8002e4c:	2202      	movs	r2, #2
 8002e4e:	701a      	strb	r2, [r3, #0]
      break;
 8002e50:	e0c3      	b.n	8002fda <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8002e52:	78fa      	ldrb	r2, [r7, #3]
 8002e54:	6879      	ldr	r1, [r7, #4]
 8002e56:	4613      	mov	r3, r2
 8002e58:	011b      	lsls	r3, r3, #4
 8002e5a:	1a9b      	subs	r3, r3, r2
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	440b      	add	r3, r1
 8002e60:	331a      	adds	r3, #26
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	f040 80b8 	bne.w	8002fda <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8002e6a:	78fa      	ldrb	r2, [r7, #3]
 8002e6c:	6879      	ldr	r1, [r7, #4]
 8002e6e:	4613      	mov	r3, r2
 8002e70:	011b      	lsls	r3, r3, #4
 8002e72:	1a9b      	subs	r3, r3, r2
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	440b      	add	r3, r1
 8002e78:	333c      	adds	r3, #60	@ 0x3c
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d10a      	bne.n	8002e96 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002e80:	78fa      	ldrb	r2, [r7, #3]
 8002e82:	6879      	ldr	r1, [r7, #4]
 8002e84:	4613      	mov	r3, r2
 8002e86:	011b      	lsls	r3, r3, #4
 8002e88:	1a9b      	subs	r3, r3, r2
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	440b      	add	r3, r1
 8002e8e:	332a      	adds	r3, #42	@ 0x2a
 8002e90:	2200      	movs	r2, #0
 8002e92:	701a      	strb	r2, [r3, #0]
      break;
 8002e94:	e0a1      	b.n	8002fda <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002e96:	78fa      	ldrb	r2, [r7, #3]
 8002e98:	6879      	ldr	r1, [r7, #4]
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	011b      	lsls	r3, r3, #4
 8002e9e:	1a9b      	subs	r3, r3, r2
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	440b      	add	r3, r1
 8002ea4:	332a      	adds	r3, #42	@ 0x2a
 8002ea6:	2202      	movs	r2, #2
 8002ea8:	701a      	strb	r2, [r3, #0]
      break;
 8002eaa:	e096      	b.n	8002fda <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002eac:	78bb      	ldrb	r3, [r7, #2]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d120      	bne.n	8002ef4 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002eb2:	78fa      	ldrb	r2, [r7, #3]
 8002eb4:	6879      	ldr	r1, [r7, #4]
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	011b      	lsls	r3, r3, #4
 8002eba:	1a9b      	subs	r3, r3, r2
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	440b      	add	r3, r1
 8002ec0:	333d      	adds	r3, #61	@ 0x3d
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d10a      	bne.n	8002ede <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002ec8:	78fa      	ldrb	r2, [r7, #3]
 8002eca:	6879      	ldr	r1, [r7, #4]
 8002ecc:	4613      	mov	r3, r2
 8002ece:	011b      	lsls	r3, r3, #4
 8002ed0:	1a9b      	subs	r3, r3, r2
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	440b      	add	r3, r1
 8002ed6:	332a      	adds	r3, #42	@ 0x2a
 8002ed8:	2200      	movs	r2, #0
 8002eda:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002edc:	e07e      	b.n	8002fdc <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002ede:	78fa      	ldrb	r2, [r7, #3]
 8002ee0:	6879      	ldr	r1, [r7, #4]
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	011b      	lsls	r3, r3, #4
 8002ee6:	1a9b      	subs	r3, r3, r2
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	440b      	add	r3, r1
 8002eec:	332a      	adds	r3, #42	@ 0x2a
 8002eee:	2202      	movs	r2, #2
 8002ef0:	701a      	strb	r2, [r3, #0]
      break;
 8002ef2:	e073      	b.n	8002fdc <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002ef4:	78fa      	ldrb	r2, [r7, #3]
 8002ef6:	6879      	ldr	r1, [r7, #4]
 8002ef8:	4613      	mov	r3, r2
 8002efa:	011b      	lsls	r3, r3, #4
 8002efc:	1a9b      	subs	r3, r3, r2
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	440b      	add	r3, r1
 8002f02:	333c      	adds	r3, #60	@ 0x3c
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d10a      	bne.n	8002f20 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002f0a:	78fa      	ldrb	r2, [r7, #3]
 8002f0c:	6879      	ldr	r1, [r7, #4]
 8002f0e:	4613      	mov	r3, r2
 8002f10:	011b      	lsls	r3, r3, #4
 8002f12:	1a9b      	subs	r3, r3, r2
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	440b      	add	r3, r1
 8002f18:	332a      	adds	r3, #42	@ 0x2a
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	701a      	strb	r2, [r3, #0]
      break;
 8002f1e:	e05d      	b.n	8002fdc <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002f20:	78fa      	ldrb	r2, [r7, #3]
 8002f22:	6879      	ldr	r1, [r7, #4]
 8002f24:	4613      	mov	r3, r2
 8002f26:	011b      	lsls	r3, r3, #4
 8002f28:	1a9b      	subs	r3, r3, r2
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	440b      	add	r3, r1
 8002f2e:	332a      	adds	r3, #42	@ 0x2a
 8002f30:	2202      	movs	r2, #2
 8002f32:	701a      	strb	r2, [r3, #0]
      break;
 8002f34:	e052      	b.n	8002fdc <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002f36:	78bb      	ldrb	r3, [r7, #2]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d120      	bne.n	8002f7e <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002f3c:	78fa      	ldrb	r2, [r7, #3]
 8002f3e:	6879      	ldr	r1, [r7, #4]
 8002f40:	4613      	mov	r3, r2
 8002f42:	011b      	lsls	r3, r3, #4
 8002f44:	1a9b      	subs	r3, r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	440b      	add	r3, r1
 8002f4a:	333d      	adds	r3, #61	@ 0x3d
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d10a      	bne.n	8002f68 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002f52:	78fa      	ldrb	r2, [r7, #3]
 8002f54:	6879      	ldr	r1, [r7, #4]
 8002f56:	4613      	mov	r3, r2
 8002f58:	011b      	lsls	r3, r3, #4
 8002f5a:	1a9b      	subs	r3, r3, r2
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	440b      	add	r3, r1
 8002f60:	332a      	adds	r3, #42	@ 0x2a
 8002f62:	2200      	movs	r2, #0
 8002f64:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002f66:	e039      	b.n	8002fdc <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002f68:	78fa      	ldrb	r2, [r7, #3]
 8002f6a:	6879      	ldr	r1, [r7, #4]
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	011b      	lsls	r3, r3, #4
 8002f70:	1a9b      	subs	r3, r3, r2
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	440b      	add	r3, r1
 8002f76:	332a      	adds	r3, #42	@ 0x2a
 8002f78:	2202      	movs	r2, #2
 8002f7a:	701a      	strb	r2, [r3, #0]
      break;
 8002f7c:	e02e      	b.n	8002fdc <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002f7e:	78fa      	ldrb	r2, [r7, #3]
 8002f80:	6879      	ldr	r1, [r7, #4]
 8002f82:	4613      	mov	r3, r2
 8002f84:	011b      	lsls	r3, r3, #4
 8002f86:	1a9b      	subs	r3, r3, r2
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	440b      	add	r3, r1
 8002f8c:	333c      	adds	r3, #60	@ 0x3c
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d10a      	bne.n	8002faa <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002f94:	78fa      	ldrb	r2, [r7, #3]
 8002f96:	6879      	ldr	r1, [r7, #4]
 8002f98:	4613      	mov	r3, r2
 8002f9a:	011b      	lsls	r3, r3, #4
 8002f9c:	1a9b      	subs	r3, r3, r2
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	440b      	add	r3, r1
 8002fa2:	332a      	adds	r3, #42	@ 0x2a
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	701a      	strb	r2, [r3, #0]
      break;
 8002fa8:	e018      	b.n	8002fdc <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002faa:	78fa      	ldrb	r2, [r7, #3]
 8002fac:	6879      	ldr	r1, [r7, #4]
 8002fae:	4613      	mov	r3, r2
 8002fb0:	011b      	lsls	r3, r3, #4
 8002fb2:	1a9b      	subs	r3, r3, r2
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	440b      	add	r3, r1
 8002fb8:	332a      	adds	r3, #42	@ 0x2a
 8002fba:	2202      	movs	r2, #2
 8002fbc:	701a      	strb	r2, [r3, #0]
      break;
 8002fbe:	e00d      	b.n	8002fdc <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002fc0:	78fa      	ldrb	r2, [r7, #3]
 8002fc2:	6879      	ldr	r1, [r7, #4]
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	011b      	lsls	r3, r3, #4
 8002fc8:	1a9b      	subs	r3, r3, r2
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	440b      	add	r3, r1
 8002fce:	332a      	adds	r3, #42	@ 0x2a
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	701a      	strb	r2, [r3, #0]
      break;
 8002fd4:	e002      	b.n	8002fdc <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8002fd6:	bf00      	nop
 8002fd8:	e000      	b.n	8002fdc <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8002fda:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002fdc:	78fa      	ldrb	r2, [r7, #3]
 8002fde:	6879      	ldr	r1, [r7, #4]
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	011b      	lsls	r3, r3, #4
 8002fe4:	1a9b      	subs	r3, r3, r2
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	440b      	add	r3, r1
 8002fea:	332c      	adds	r3, #44	@ 0x2c
 8002fec:	697a      	ldr	r2, [r7, #20]
 8002fee:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002ff0:	78fa      	ldrb	r2, [r7, #3]
 8002ff2:	8b39      	ldrh	r1, [r7, #24]
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	011b      	lsls	r3, r3, #4
 8002ffa:	1a9b      	subs	r3, r3, r2
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	4403      	add	r3, r0
 8003000:	3334      	adds	r3, #52	@ 0x34
 8003002:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003004:	78fa      	ldrb	r2, [r7, #3]
 8003006:	6879      	ldr	r1, [r7, #4]
 8003008:	4613      	mov	r3, r2
 800300a:	011b      	lsls	r3, r3, #4
 800300c:	1a9b      	subs	r3, r3, r2
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	440b      	add	r3, r1
 8003012:	334c      	adds	r3, #76	@ 0x4c
 8003014:	2200      	movs	r2, #0
 8003016:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003018:	78fa      	ldrb	r2, [r7, #3]
 800301a:	6879      	ldr	r1, [r7, #4]
 800301c:	4613      	mov	r3, r2
 800301e:	011b      	lsls	r3, r3, #4
 8003020:	1a9b      	subs	r3, r3, r2
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	440b      	add	r3, r1
 8003026:	3338      	adds	r3, #56	@ 0x38
 8003028:	2200      	movs	r2, #0
 800302a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800302c:	78fa      	ldrb	r2, [r7, #3]
 800302e:	6879      	ldr	r1, [r7, #4]
 8003030:	4613      	mov	r3, r2
 8003032:	011b      	lsls	r3, r3, #4
 8003034:	1a9b      	subs	r3, r3, r2
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	440b      	add	r3, r1
 800303a:	3315      	adds	r3, #21
 800303c:	78fa      	ldrb	r2, [r7, #3]
 800303e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003040:	78fa      	ldrb	r2, [r7, #3]
 8003042:	6879      	ldr	r1, [r7, #4]
 8003044:	4613      	mov	r3, r2
 8003046:	011b      	lsls	r3, r3, #4
 8003048:	1a9b      	subs	r3, r3, r2
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	440b      	add	r3, r1
 800304e:	334d      	adds	r3, #77	@ 0x4d
 8003050:	2200      	movs	r2, #0
 8003052:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6818      	ldr	r0, [r3, #0]
 8003058:	78fa      	ldrb	r2, [r7, #3]
 800305a:	4613      	mov	r3, r2
 800305c:	011b      	lsls	r3, r3, #4
 800305e:	1a9b      	subs	r3, r3, r2
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	3310      	adds	r3, #16
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	4413      	add	r3, r2
 8003068:	1d19      	adds	r1, r3, #4
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	799b      	ldrb	r3, [r3, #6]
 800306e:	461a      	mov	r2, r3
 8003070:	f004 fc16 	bl	80078a0 <USB_HC_StartXfer>
 8003074:	4603      	mov	r3, r0
}
 8003076:	4618      	mov	r0, r3
 8003078:	3708      	adds	r7, #8
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop

08003080 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b086      	sub	sp, #24
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4618      	mov	r0, r3
 8003098:	f004 f90a 	bl	80072b0 <USB_GetMode>
 800309c:	4603      	mov	r3, r0
 800309e:	2b01      	cmp	r3, #1
 80030a0:	f040 80fb 	bne.w	800329a <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4618      	mov	r0, r3
 80030aa:	f004 f8cd 	bl	8007248 <USB_ReadInterrupts>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	f000 80f1 	beq.w	8003298 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f004 f8c4 	bl	8007248 <USB_ReadInterrupts>
 80030c0:	4603      	mov	r3, r0
 80030c2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030c6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80030ca:	d104      	bne.n	80030d6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80030d4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4618      	mov	r0, r3
 80030dc:	f004 f8b4 	bl	8007248 <USB_ReadInterrupts>
 80030e0:	4603      	mov	r3, r0
 80030e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80030e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80030ea:	d104      	bne.n	80030f6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80030f4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f004 f8a4 	bl	8007248 <USB_ReadInterrupts>
 8003100:	4603      	mov	r3, r0
 8003102:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003106:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800310a:	d104      	bne.n	8003116 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003114:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4618      	mov	r0, r3
 800311c:	f004 f894 	bl	8007248 <USB_ReadInterrupts>
 8003120:	4603      	mov	r3, r0
 8003122:	f003 0302 	and.w	r3, r3, #2
 8003126:	2b02      	cmp	r3, #2
 8003128:	d103      	bne.n	8003132 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2202      	movs	r2, #2
 8003130:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4618      	mov	r0, r3
 8003138:	f004 f886 	bl	8007248 <USB_ReadInterrupts>
 800313c:	4603      	mov	r3, r0
 800313e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003142:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003146:	d120      	bne.n	800318a <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8003150:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0301 	and.w	r3, r3, #1
 800315e:	2b00      	cmp	r3, #0
 8003160:	d113      	bne.n	800318a <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003162:	2110      	movs	r1, #16
 8003164:	6938      	ldr	r0, [r7, #16]
 8003166:	f003 ff79 	bl	800705c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800316a:	6938      	ldr	r0, [r7, #16]
 800316c:	f003 ffa8 	bl	80070c0 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	7a5b      	ldrb	r3, [r3, #9]
 8003174:	2b02      	cmp	r3, #2
 8003176:	d105      	bne.n	8003184 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2101      	movs	r1, #1
 800317e:	4618      	mov	r0, r3
 8003180:	f004 f99a 	bl	80074b8 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f007 f961 	bl	800a44c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4618      	mov	r0, r3
 8003190:	f004 f85a 	bl	8007248 <USB_ReadInterrupts>
 8003194:	4603      	mov	r3, r0
 8003196:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800319a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800319e:	d102      	bne.n	80031a6 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f001 fd4d 	bl	8004c40 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4618      	mov	r0, r3
 80031ac:	f004 f84c 	bl	8007248 <USB_ReadInterrupts>
 80031b0:	4603      	mov	r3, r0
 80031b2:	f003 0308 	and.w	r3, r3, #8
 80031b6:	2b08      	cmp	r3, #8
 80031b8:	d106      	bne.n	80031c8 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f007 f92a 	bl	800a414 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	2208      	movs	r2, #8
 80031c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4618      	mov	r0, r3
 80031ce:	f004 f83b 	bl	8007248 <USB_ReadInterrupts>
 80031d2:	4603      	mov	r3, r0
 80031d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031d8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80031dc:	d139      	bne.n	8003252 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4618      	mov	r0, r3
 80031e4:	f004 fdd6 	bl	8007d94 <USB_HC_ReadInterrupt>
 80031e8:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80031ea:	2300      	movs	r3, #0
 80031ec:	617b      	str	r3, [r7, #20]
 80031ee:	e025      	b.n	800323c <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	f003 030f 	and.w	r3, r3, #15
 80031f6:	68ba      	ldr	r2, [r7, #8]
 80031f8:	fa22 f303 	lsr.w	r3, r2, r3
 80031fc:	f003 0301 	and.w	r3, r3, #1
 8003200:	2b00      	cmp	r3, #0
 8003202:	d018      	beq.n	8003236 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	015a      	lsls	r2, r3, #5
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	4413      	add	r3, r2
 800320c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003216:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800321a:	d106      	bne.n	800322a <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	b2db      	uxtb	r3, r3
 8003220:	4619      	mov	r1, r3
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f000 f905 	bl	8003432 <HCD_HC_IN_IRQHandler>
 8003228:	e005      	b.n	8003236 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	b2db      	uxtb	r3, r3
 800322e:	4619      	mov	r1, r3
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f000 ff67 	bl	8004104 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	3301      	adds	r3, #1
 800323a:	617b      	str	r3, [r7, #20]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	795b      	ldrb	r3, [r3, #5]
 8003240:	461a      	mov	r2, r3
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	4293      	cmp	r3, r2
 8003246:	d3d3      	bcc.n	80031f0 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003250:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4618      	mov	r0, r3
 8003258:	f003 fff6 	bl	8007248 <USB_ReadInterrupts>
 800325c:	4603      	mov	r3, r0
 800325e:	f003 0310 	and.w	r3, r3, #16
 8003262:	2b10      	cmp	r3, #16
 8003264:	d101      	bne.n	800326a <HAL_HCD_IRQHandler+0x1ea>
 8003266:	2301      	movs	r3, #1
 8003268:	e000      	b.n	800326c <HAL_HCD_IRQHandler+0x1ec>
 800326a:	2300      	movs	r3, #0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d014      	beq.n	800329a <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	699a      	ldr	r2, [r3, #24]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f022 0210 	bic.w	r2, r2, #16
 800327e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f001 fbfe 	bl	8004a82 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	699a      	ldr	r2, [r3, #24]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f042 0210 	orr.w	r2, r2, #16
 8003294:	619a      	str	r2, [r3, #24]
 8003296:	e000      	b.n	800329a <HAL_HCD_IRQHandler+0x21a>
      return;
 8003298:	bf00      	nop
    }
  }
}
 800329a:	3718      	adds	r7, #24
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}

080032a0 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d101      	bne.n	80032b6 <HAL_HCD_Start+0x16>
 80032b2:	2302      	movs	r3, #2
 80032b4:	e013      	b.n	80032de <HAL_HCD_Start+0x3e>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2201      	movs	r2, #1
 80032ba:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2101      	movs	r1, #1
 80032c4:	4618      	mov	r0, r3
 80032c6:	f004 f95e 	bl	8007586 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4618      	mov	r0, r3
 80032d0:	f003 fe56 	bl	8006f80 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80032dc:	2300      	movs	r3, #0
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3708      	adds	r7, #8
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}

080032e6 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80032e6:	b580      	push	{r7, lr}
 80032e8:	b082      	sub	sp, #8
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d101      	bne.n	80032fc <HAL_HCD_Stop+0x16>
 80032f8:	2302      	movs	r3, #2
 80032fa:	e00d      	b.n	8003318 <HAL_HCD_Stop+0x32>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4618      	mov	r0, r3
 800330a:	f004 feb1 	bl	8008070 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8003316:	2300      	movs	r3, #0
}
 8003318:	4618      	mov	r0, r3
 800331a:	3708      	adds	r7, #8
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}

08003320 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4618      	mov	r0, r3
 800332e:	f004 f900 	bl	8007532 <USB_ResetPort>
 8003332:	4603      	mov	r3, r0
}
 8003334:	4618      	mov	r0, r3
 8003336:	3708      	adds	r7, #8
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}

0800333c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	460b      	mov	r3, r1
 8003346:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003348:	78fa      	ldrb	r2, [r7, #3]
 800334a:	6879      	ldr	r1, [r7, #4]
 800334c:	4613      	mov	r3, r2
 800334e:	011b      	lsls	r3, r3, #4
 8003350:	1a9b      	subs	r3, r3, r2
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	440b      	add	r3, r1
 8003356:	334c      	adds	r3, #76	@ 0x4c
 8003358:	781b      	ldrb	r3, [r3, #0]
}
 800335a:	4618      	mov	r0, r3
 800335c:	370c      	adds	r7, #12
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr

08003366 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003366:	b480      	push	{r7}
 8003368:	b083      	sub	sp, #12
 800336a:	af00      	add	r7, sp, #0
 800336c:	6078      	str	r0, [r7, #4]
 800336e:	460b      	mov	r3, r1
 8003370:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003372:	78fa      	ldrb	r2, [r7, #3]
 8003374:	6879      	ldr	r1, [r7, #4]
 8003376:	4613      	mov	r3, r2
 8003378:	011b      	lsls	r3, r3, #4
 800337a:	1a9b      	subs	r3, r3, r2
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	440b      	add	r3, r1
 8003380:	3338      	adds	r3, #56	@ 0x38
 8003382:	681b      	ldr	r3, [r3, #0]
}
 8003384:	4618      	mov	r0, r3
 8003386:	370c      	adds	r7, #12
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr

08003390 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b082      	sub	sp, #8
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4618      	mov	r0, r3
 800339e:	f004 f942 	bl	8007626 <USB_GetCurrentFrame>
 80033a2:	4603      	mov	r3, r0
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3708      	adds	r7, #8
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}

080033ac <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4618      	mov	r0, r3
 80033ba:	f004 f91d 	bl	80075f8 <USB_GetHostSpeed>
 80033be:	4603      	mov	r3, r0
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3708      	adds	r7, #8
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	460b      	mov	r3, r1
 80033d2:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 80033d4:	78fa      	ldrb	r2, [r7, #3]
 80033d6:	6879      	ldr	r1, [r7, #4]
 80033d8:	4613      	mov	r3, r2
 80033da:	011b      	lsls	r3, r3, #4
 80033dc:	1a9b      	subs	r3, r3, r2
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	440b      	add	r3, r1
 80033e2:	331a      	adds	r3, #26
 80033e4:	2200      	movs	r2, #0
 80033e6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 80033e8:	78fa      	ldrb	r2, [r7, #3]
 80033ea:	6879      	ldr	r1, [r7, #4]
 80033ec:	4613      	mov	r3, r2
 80033ee:	011b      	lsls	r3, r3, #4
 80033f0:	1a9b      	subs	r3, r3, r2
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	440b      	add	r3, r1
 80033f6:	331b      	adds	r3, #27
 80033f8:	2200      	movs	r2, #0
 80033fa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 80033fc:	78fa      	ldrb	r2, [r7, #3]
 80033fe:	6879      	ldr	r1, [r7, #4]
 8003400:	4613      	mov	r3, r2
 8003402:	011b      	lsls	r3, r3, #4
 8003404:	1a9b      	subs	r3, r3, r2
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	440b      	add	r3, r1
 800340a:	3325      	adds	r3, #37	@ 0x25
 800340c:	2200      	movs	r2, #0
 800340e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8003410:	78fa      	ldrb	r2, [r7, #3]
 8003412:	6879      	ldr	r1, [r7, #4]
 8003414:	4613      	mov	r3, r2
 8003416:	011b      	lsls	r3, r3, #4
 8003418:	1a9b      	subs	r3, r3, r2
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	440b      	add	r3, r1
 800341e:	3324      	adds	r3, #36	@ 0x24
 8003420:	2200      	movs	r2, #0
 8003422:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8003424:	2300      	movs	r3, #0
}
 8003426:	4618      	mov	r0, r3
 8003428:	370c      	adds	r7, #12
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr

08003432 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003432:	b580      	push	{r7, lr}
 8003434:	b086      	sub	sp, #24
 8003436:	af00      	add	r7, sp, #0
 8003438:	6078      	str	r0, [r7, #4]
 800343a:	460b      	mov	r3, r1
 800343c:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	78fa      	ldrb	r2, [r7, #3]
 800344e:	4611      	mov	r1, r2
 8003450:	4618      	mov	r0, r3
 8003452:	f003 ff0c 	bl	800726e <USB_ReadChInterrupts>
 8003456:	4603      	mov	r3, r0
 8003458:	f003 0304 	and.w	r3, r3, #4
 800345c:	2b04      	cmp	r3, #4
 800345e:	d11a      	bne.n	8003496 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003460:	78fb      	ldrb	r3, [r7, #3]
 8003462:	015a      	lsls	r2, r3, #5
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	4413      	add	r3, r2
 8003468:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800346c:	461a      	mov	r2, r3
 800346e:	2304      	movs	r3, #4
 8003470:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003472:	78fa      	ldrb	r2, [r7, #3]
 8003474:	6879      	ldr	r1, [r7, #4]
 8003476:	4613      	mov	r3, r2
 8003478:	011b      	lsls	r3, r3, #4
 800347a:	1a9b      	subs	r3, r3, r2
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	440b      	add	r3, r1
 8003480:	334d      	adds	r3, #77	@ 0x4d
 8003482:	2207      	movs	r2, #7
 8003484:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	78fa      	ldrb	r2, [r7, #3]
 800348c:	4611      	mov	r1, r2
 800348e:	4618      	mov	r0, r3
 8003490:	f004 fc91 	bl	8007db6 <USB_HC_Halt>
 8003494:	e09e      	b.n	80035d4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	78fa      	ldrb	r2, [r7, #3]
 800349c:	4611      	mov	r1, r2
 800349e:	4618      	mov	r0, r3
 80034a0:	f003 fee5 	bl	800726e <USB_ReadChInterrupts>
 80034a4:	4603      	mov	r3, r0
 80034a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80034ae:	d11b      	bne.n	80034e8 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80034b0:	78fb      	ldrb	r3, [r7, #3]
 80034b2:	015a      	lsls	r2, r3, #5
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	4413      	add	r3, r2
 80034b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034bc:	461a      	mov	r2, r3
 80034be:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80034c2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80034c4:	78fa      	ldrb	r2, [r7, #3]
 80034c6:	6879      	ldr	r1, [r7, #4]
 80034c8:	4613      	mov	r3, r2
 80034ca:	011b      	lsls	r3, r3, #4
 80034cc:	1a9b      	subs	r3, r3, r2
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	440b      	add	r3, r1
 80034d2:	334d      	adds	r3, #77	@ 0x4d
 80034d4:	2208      	movs	r2, #8
 80034d6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	78fa      	ldrb	r2, [r7, #3]
 80034de:	4611      	mov	r1, r2
 80034e0:	4618      	mov	r0, r3
 80034e2:	f004 fc68 	bl	8007db6 <USB_HC_Halt>
 80034e6:	e075      	b.n	80035d4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	78fa      	ldrb	r2, [r7, #3]
 80034ee:	4611      	mov	r1, r2
 80034f0:	4618      	mov	r0, r3
 80034f2:	f003 febc 	bl	800726e <USB_ReadChInterrupts>
 80034f6:	4603      	mov	r3, r0
 80034f8:	f003 0308 	and.w	r3, r3, #8
 80034fc:	2b08      	cmp	r3, #8
 80034fe:	d11a      	bne.n	8003536 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003500:	78fb      	ldrb	r3, [r7, #3]
 8003502:	015a      	lsls	r2, r3, #5
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	4413      	add	r3, r2
 8003508:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800350c:	461a      	mov	r2, r3
 800350e:	2308      	movs	r3, #8
 8003510:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003512:	78fa      	ldrb	r2, [r7, #3]
 8003514:	6879      	ldr	r1, [r7, #4]
 8003516:	4613      	mov	r3, r2
 8003518:	011b      	lsls	r3, r3, #4
 800351a:	1a9b      	subs	r3, r3, r2
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	440b      	add	r3, r1
 8003520:	334d      	adds	r3, #77	@ 0x4d
 8003522:	2206      	movs	r2, #6
 8003524:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	78fa      	ldrb	r2, [r7, #3]
 800352c:	4611      	mov	r1, r2
 800352e:	4618      	mov	r0, r3
 8003530:	f004 fc41 	bl	8007db6 <USB_HC_Halt>
 8003534:	e04e      	b.n	80035d4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	78fa      	ldrb	r2, [r7, #3]
 800353c:	4611      	mov	r1, r2
 800353e:	4618      	mov	r0, r3
 8003540:	f003 fe95 	bl	800726e <USB_ReadChInterrupts>
 8003544:	4603      	mov	r3, r0
 8003546:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800354a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800354e:	d11b      	bne.n	8003588 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003550:	78fb      	ldrb	r3, [r7, #3]
 8003552:	015a      	lsls	r2, r3, #5
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	4413      	add	r3, r2
 8003558:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800355c:	461a      	mov	r2, r3
 800355e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003562:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003564:	78fa      	ldrb	r2, [r7, #3]
 8003566:	6879      	ldr	r1, [r7, #4]
 8003568:	4613      	mov	r3, r2
 800356a:	011b      	lsls	r3, r3, #4
 800356c:	1a9b      	subs	r3, r3, r2
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	440b      	add	r3, r1
 8003572:	334d      	adds	r3, #77	@ 0x4d
 8003574:	2209      	movs	r2, #9
 8003576:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	78fa      	ldrb	r2, [r7, #3]
 800357e:	4611      	mov	r1, r2
 8003580:	4618      	mov	r0, r3
 8003582:	f004 fc18 	bl	8007db6 <USB_HC_Halt>
 8003586:	e025      	b.n	80035d4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	78fa      	ldrb	r2, [r7, #3]
 800358e:	4611      	mov	r1, r2
 8003590:	4618      	mov	r0, r3
 8003592:	f003 fe6c 	bl	800726e <USB_ReadChInterrupts>
 8003596:	4603      	mov	r3, r0
 8003598:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800359c:	2b80      	cmp	r3, #128	@ 0x80
 800359e:	d119      	bne.n	80035d4 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80035a0:	78fb      	ldrb	r3, [r7, #3]
 80035a2:	015a      	lsls	r2, r3, #5
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	4413      	add	r3, r2
 80035a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035ac:	461a      	mov	r2, r3
 80035ae:	2380      	movs	r3, #128	@ 0x80
 80035b0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80035b2:	78fa      	ldrb	r2, [r7, #3]
 80035b4:	6879      	ldr	r1, [r7, #4]
 80035b6:	4613      	mov	r3, r2
 80035b8:	011b      	lsls	r3, r3, #4
 80035ba:	1a9b      	subs	r3, r3, r2
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	440b      	add	r3, r1
 80035c0:	334d      	adds	r3, #77	@ 0x4d
 80035c2:	2207      	movs	r2, #7
 80035c4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	78fa      	ldrb	r2, [r7, #3]
 80035cc:	4611      	mov	r1, r2
 80035ce:	4618      	mov	r0, r3
 80035d0:	f004 fbf1 	bl	8007db6 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	78fa      	ldrb	r2, [r7, #3]
 80035da:	4611      	mov	r1, r2
 80035dc:	4618      	mov	r0, r3
 80035de:	f003 fe46 	bl	800726e <USB_ReadChInterrupts>
 80035e2:	4603      	mov	r3, r0
 80035e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80035ec:	d112      	bne.n	8003614 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	78fa      	ldrb	r2, [r7, #3]
 80035f4:	4611      	mov	r1, r2
 80035f6:	4618      	mov	r0, r3
 80035f8:	f004 fbdd 	bl	8007db6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80035fc:	78fb      	ldrb	r3, [r7, #3]
 80035fe:	015a      	lsls	r2, r3, #5
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	4413      	add	r3, r2
 8003604:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003608:	461a      	mov	r2, r3
 800360a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800360e:	6093      	str	r3, [r2, #8]
 8003610:	f000 bd75 	b.w	80040fe <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	78fa      	ldrb	r2, [r7, #3]
 800361a:	4611      	mov	r1, r2
 800361c:	4618      	mov	r0, r3
 800361e:	f003 fe26 	bl	800726e <USB_ReadChInterrupts>
 8003622:	4603      	mov	r3, r0
 8003624:	f003 0301 	and.w	r3, r3, #1
 8003628:	2b01      	cmp	r3, #1
 800362a:	f040 8128 	bne.w	800387e <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800362e:	78fb      	ldrb	r3, [r7, #3]
 8003630:	015a      	lsls	r2, r3, #5
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	4413      	add	r3, r2
 8003636:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800363a:	461a      	mov	r2, r3
 800363c:	2320      	movs	r3, #32
 800363e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003640:	78fa      	ldrb	r2, [r7, #3]
 8003642:	6879      	ldr	r1, [r7, #4]
 8003644:	4613      	mov	r3, r2
 8003646:	011b      	lsls	r3, r3, #4
 8003648:	1a9b      	subs	r3, r3, r2
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	440b      	add	r3, r1
 800364e:	331b      	adds	r3, #27
 8003650:	781b      	ldrb	r3, [r3, #0]
 8003652:	2b01      	cmp	r3, #1
 8003654:	d119      	bne.n	800368a <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003656:	78fa      	ldrb	r2, [r7, #3]
 8003658:	6879      	ldr	r1, [r7, #4]
 800365a:	4613      	mov	r3, r2
 800365c:	011b      	lsls	r3, r3, #4
 800365e:	1a9b      	subs	r3, r3, r2
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	440b      	add	r3, r1
 8003664:	331b      	adds	r3, #27
 8003666:	2200      	movs	r2, #0
 8003668:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800366a:	78fb      	ldrb	r3, [r7, #3]
 800366c:	015a      	lsls	r2, r3, #5
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	4413      	add	r3, r2
 8003672:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	78fa      	ldrb	r2, [r7, #3]
 800367a:	0151      	lsls	r1, r2, #5
 800367c:	693a      	ldr	r2, [r7, #16]
 800367e:	440a      	add	r2, r1
 8003680:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003684:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003688:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	799b      	ldrb	r3, [r3, #6]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d01b      	beq.n	80036ca <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003692:	78fa      	ldrb	r2, [r7, #3]
 8003694:	6879      	ldr	r1, [r7, #4]
 8003696:	4613      	mov	r3, r2
 8003698:	011b      	lsls	r3, r3, #4
 800369a:	1a9b      	subs	r3, r3, r2
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	440b      	add	r3, r1
 80036a0:	3330      	adds	r3, #48	@ 0x30
 80036a2:	6819      	ldr	r1, [r3, #0]
 80036a4:	78fb      	ldrb	r3, [r7, #3]
 80036a6:	015a      	lsls	r2, r3, #5
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	4413      	add	r3, r2
 80036ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036b0:	691b      	ldr	r3, [r3, #16]
 80036b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036b6:	78fa      	ldrb	r2, [r7, #3]
 80036b8:	1ac9      	subs	r1, r1, r3
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	4613      	mov	r3, r2
 80036be:	011b      	lsls	r3, r3, #4
 80036c0:	1a9b      	subs	r3, r3, r2
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	4403      	add	r3, r0
 80036c6:	3338      	adds	r3, #56	@ 0x38
 80036c8:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80036ca:	78fa      	ldrb	r2, [r7, #3]
 80036cc:	6879      	ldr	r1, [r7, #4]
 80036ce:	4613      	mov	r3, r2
 80036d0:	011b      	lsls	r3, r3, #4
 80036d2:	1a9b      	subs	r3, r3, r2
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	440b      	add	r3, r1
 80036d8:	334d      	adds	r3, #77	@ 0x4d
 80036da:	2201      	movs	r2, #1
 80036dc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80036de:	78fa      	ldrb	r2, [r7, #3]
 80036e0:	6879      	ldr	r1, [r7, #4]
 80036e2:	4613      	mov	r3, r2
 80036e4:	011b      	lsls	r3, r3, #4
 80036e6:	1a9b      	subs	r3, r3, r2
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	440b      	add	r3, r1
 80036ec:	3344      	adds	r3, #68	@ 0x44
 80036ee:	2200      	movs	r2, #0
 80036f0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80036f2:	78fb      	ldrb	r3, [r7, #3]
 80036f4:	015a      	lsls	r2, r3, #5
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	4413      	add	r3, r2
 80036fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036fe:	461a      	mov	r2, r3
 8003700:	2301      	movs	r3, #1
 8003702:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003704:	78fa      	ldrb	r2, [r7, #3]
 8003706:	6879      	ldr	r1, [r7, #4]
 8003708:	4613      	mov	r3, r2
 800370a:	011b      	lsls	r3, r3, #4
 800370c:	1a9b      	subs	r3, r3, r2
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	440b      	add	r3, r1
 8003712:	3326      	adds	r3, #38	@ 0x26
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d00a      	beq.n	8003730 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800371a:	78fa      	ldrb	r2, [r7, #3]
 800371c:	6879      	ldr	r1, [r7, #4]
 800371e:	4613      	mov	r3, r2
 8003720:	011b      	lsls	r3, r3, #4
 8003722:	1a9b      	subs	r3, r3, r2
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	440b      	add	r3, r1
 8003728:	3326      	adds	r3, #38	@ 0x26
 800372a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800372c:	2b02      	cmp	r3, #2
 800372e:	d110      	bne.n	8003752 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	78fa      	ldrb	r2, [r7, #3]
 8003736:	4611      	mov	r1, r2
 8003738:	4618      	mov	r0, r3
 800373a:	f004 fb3c 	bl	8007db6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800373e:	78fb      	ldrb	r3, [r7, #3]
 8003740:	015a      	lsls	r2, r3, #5
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	4413      	add	r3, r2
 8003746:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800374a:	461a      	mov	r2, r3
 800374c:	2310      	movs	r3, #16
 800374e:	6093      	str	r3, [r2, #8]
 8003750:	e03d      	b.n	80037ce <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003752:	78fa      	ldrb	r2, [r7, #3]
 8003754:	6879      	ldr	r1, [r7, #4]
 8003756:	4613      	mov	r3, r2
 8003758:	011b      	lsls	r3, r3, #4
 800375a:	1a9b      	subs	r3, r3, r2
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	440b      	add	r3, r1
 8003760:	3326      	adds	r3, #38	@ 0x26
 8003762:	781b      	ldrb	r3, [r3, #0]
 8003764:	2b03      	cmp	r3, #3
 8003766:	d00a      	beq.n	800377e <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8003768:	78fa      	ldrb	r2, [r7, #3]
 800376a:	6879      	ldr	r1, [r7, #4]
 800376c:	4613      	mov	r3, r2
 800376e:	011b      	lsls	r3, r3, #4
 8003770:	1a9b      	subs	r3, r3, r2
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	440b      	add	r3, r1
 8003776:	3326      	adds	r3, #38	@ 0x26
 8003778:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800377a:	2b01      	cmp	r3, #1
 800377c:	d127      	bne.n	80037ce <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800377e:	78fb      	ldrb	r3, [r7, #3]
 8003780:	015a      	lsls	r2, r3, #5
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	4413      	add	r3, r2
 8003786:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	78fa      	ldrb	r2, [r7, #3]
 800378e:	0151      	lsls	r1, r2, #5
 8003790:	693a      	ldr	r2, [r7, #16]
 8003792:	440a      	add	r2, r1
 8003794:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003798:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800379c:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800379e:	78fa      	ldrb	r2, [r7, #3]
 80037a0:	6879      	ldr	r1, [r7, #4]
 80037a2:	4613      	mov	r3, r2
 80037a4:	011b      	lsls	r3, r3, #4
 80037a6:	1a9b      	subs	r3, r3, r2
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	440b      	add	r3, r1
 80037ac:	334c      	adds	r3, #76	@ 0x4c
 80037ae:	2201      	movs	r2, #1
 80037b0:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80037b2:	78fa      	ldrb	r2, [r7, #3]
 80037b4:	6879      	ldr	r1, [r7, #4]
 80037b6:	4613      	mov	r3, r2
 80037b8:	011b      	lsls	r3, r3, #4
 80037ba:	1a9b      	subs	r3, r3, r2
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	440b      	add	r3, r1
 80037c0:	334c      	adds	r3, #76	@ 0x4c
 80037c2:	781a      	ldrb	r2, [r3, #0]
 80037c4:	78fb      	ldrb	r3, [r7, #3]
 80037c6:	4619      	mov	r1, r3
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f006 fe4d 	bl	800a468 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	799b      	ldrb	r3, [r3, #6]
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d13b      	bne.n	800384e <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80037d6:	78fa      	ldrb	r2, [r7, #3]
 80037d8:	6879      	ldr	r1, [r7, #4]
 80037da:	4613      	mov	r3, r2
 80037dc:	011b      	lsls	r3, r3, #4
 80037de:	1a9b      	subs	r3, r3, r2
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	440b      	add	r3, r1
 80037e4:	3338      	adds	r3, #56	@ 0x38
 80037e6:	6819      	ldr	r1, [r3, #0]
 80037e8:	78fa      	ldrb	r2, [r7, #3]
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	4613      	mov	r3, r2
 80037ee:	011b      	lsls	r3, r3, #4
 80037f0:	1a9b      	subs	r3, r3, r2
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	4403      	add	r3, r0
 80037f6:	3328      	adds	r3, #40	@ 0x28
 80037f8:	881b      	ldrh	r3, [r3, #0]
 80037fa:	440b      	add	r3, r1
 80037fc:	1e59      	subs	r1, r3, #1
 80037fe:	78fa      	ldrb	r2, [r7, #3]
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	4613      	mov	r3, r2
 8003804:	011b      	lsls	r3, r3, #4
 8003806:	1a9b      	subs	r3, r3, r2
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	4403      	add	r3, r0
 800380c:	3328      	adds	r3, #40	@ 0x28
 800380e:	881b      	ldrh	r3, [r3, #0]
 8003810:	fbb1 f3f3 	udiv	r3, r1, r3
 8003814:	f003 0301 	and.w	r3, r3, #1
 8003818:	2b00      	cmp	r3, #0
 800381a:	f000 8470 	beq.w	80040fe <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 800381e:	78fa      	ldrb	r2, [r7, #3]
 8003820:	6879      	ldr	r1, [r7, #4]
 8003822:	4613      	mov	r3, r2
 8003824:	011b      	lsls	r3, r3, #4
 8003826:	1a9b      	subs	r3, r3, r2
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	440b      	add	r3, r1
 800382c:	333c      	adds	r3, #60	@ 0x3c
 800382e:	781b      	ldrb	r3, [r3, #0]
 8003830:	78fa      	ldrb	r2, [r7, #3]
 8003832:	f083 0301 	eor.w	r3, r3, #1
 8003836:	b2d8      	uxtb	r0, r3
 8003838:	6879      	ldr	r1, [r7, #4]
 800383a:	4613      	mov	r3, r2
 800383c:	011b      	lsls	r3, r3, #4
 800383e:	1a9b      	subs	r3, r3, r2
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	440b      	add	r3, r1
 8003844:	333c      	adds	r3, #60	@ 0x3c
 8003846:	4602      	mov	r2, r0
 8003848:	701a      	strb	r2, [r3, #0]
 800384a:	f000 bc58 	b.w	80040fe <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 800384e:	78fa      	ldrb	r2, [r7, #3]
 8003850:	6879      	ldr	r1, [r7, #4]
 8003852:	4613      	mov	r3, r2
 8003854:	011b      	lsls	r3, r3, #4
 8003856:	1a9b      	subs	r3, r3, r2
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	440b      	add	r3, r1
 800385c:	333c      	adds	r3, #60	@ 0x3c
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	78fa      	ldrb	r2, [r7, #3]
 8003862:	f083 0301 	eor.w	r3, r3, #1
 8003866:	b2d8      	uxtb	r0, r3
 8003868:	6879      	ldr	r1, [r7, #4]
 800386a:	4613      	mov	r3, r2
 800386c:	011b      	lsls	r3, r3, #4
 800386e:	1a9b      	subs	r3, r3, r2
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	440b      	add	r3, r1
 8003874:	333c      	adds	r3, #60	@ 0x3c
 8003876:	4602      	mov	r2, r0
 8003878:	701a      	strb	r2, [r3, #0]
 800387a:	f000 bc40 	b.w	80040fe <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	78fa      	ldrb	r2, [r7, #3]
 8003884:	4611      	mov	r1, r2
 8003886:	4618      	mov	r0, r3
 8003888:	f003 fcf1 	bl	800726e <USB_ReadChInterrupts>
 800388c:	4603      	mov	r3, r0
 800388e:	f003 0320 	and.w	r3, r3, #32
 8003892:	2b20      	cmp	r3, #32
 8003894:	d131      	bne.n	80038fa <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003896:	78fb      	ldrb	r3, [r7, #3]
 8003898:	015a      	lsls	r2, r3, #5
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	4413      	add	r3, r2
 800389e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038a2:	461a      	mov	r2, r3
 80038a4:	2320      	movs	r3, #32
 80038a6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80038a8:	78fa      	ldrb	r2, [r7, #3]
 80038aa:	6879      	ldr	r1, [r7, #4]
 80038ac:	4613      	mov	r3, r2
 80038ae:	011b      	lsls	r3, r3, #4
 80038b0:	1a9b      	subs	r3, r3, r2
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	440b      	add	r3, r1
 80038b6:	331a      	adds	r3, #26
 80038b8:	781b      	ldrb	r3, [r3, #0]
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	f040 841f 	bne.w	80040fe <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80038c0:	78fa      	ldrb	r2, [r7, #3]
 80038c2:	6879      	ldr	r1, [r7, #4]
 80038c4:	4613      	mov	r3, r2
 80038c6:	011b      	lsls	r3, r3, #4
 80038c8:	1a9b      	subs	r3, r3, r2
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	440b      	add	r3, r1
 80038ce:	331b      	adds	r3, #27
 80038d0:	2201      	movs	r2, #1
 80038d2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80038d4:	78fa      	ldrb	r2, [r7, #3]
 80038d6:	6879      	ldr	r1, [r7, #4]
 80038d8:	4613      	mov	r3, r2
 80038da:	011b      	lsls	r3, r3, #4
 80038dc:	1a9b      	subs	r3, r3, r2
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	440b      	add	r3, r1
 80038e2:	334d      	adds	r3, #77	@ 0x4d
 80038e4:	2203      	movs	r2, #3
 80038e6:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	78fa      	ldrb	r2, [r7, #3]
 80038ee:	4611      	mov	r1, r2
 80038f0:	4618      	mov	r0, r3
 80038f2:	f004 fa60 	bl	8007db6 <USB_HC_Halt>
 80038f6:	f000 bc02 	b.w	80040fe <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	78fa      	ldrb	r2, [r7, #3]
 8003900:	4611      	mov	r1, r2
 8003902:	4618      	mov	r0, r3
 8003904:	f003 fcb3 	bl	800726e <USB_ReadChInterrupts>
 8003908:	4603      	mov	r3, r0
 800390a:	f003 0302 	and.w	r3, r3, #2
 800390e:	2b02      	cmp	r3, #2
 8003910:	f040 8305 	bne.w	8003f1e <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003914:	78fb      	ldrb	r3, [r7, #3]
 8003916:	015a      	lsls	r2, r3, #5
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	4413      	add	r3, r2
 800391c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003920:	461a      	mov	r2, r3
 8003922:	2302      	movs	r3, #2
 8003924:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003926:	78fa      	ldrb	r2, [r7, #3]
 8003928:	6879      	ldr	r1, [r7, #4]
 800392a:	4613      	mov	r3, r2
 800392c:	011b      	lsls	r3, r3, #4
 800392e:	1a9b      	subs	r3, r3, r2
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	440b      	add	r3, r1
 8003934:	334d      	adds	r3, #77	@ 0x4d
 8003936:	781b      	ldrb	r3, [r3, #0]
 8003938:	2b01      	cmp	r3, #1
 800393a:	d114      	bne.n	8003966 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800393c:	78fa      	ldrb	r2, [r7, #3]
 800393e:	6879      	ldr	r1, [r7, #4]
 8003940:	4613      	mov	r3, r2
 8003942:	011b      	lsls	r3, r3, #4
 8003944:	1a9b      	subs	r3, r3, r2
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	440b      	add	r3, r1
 800394a:	334d      	adds	r3, #77	@ 0x4d
 800394c:	2202      	movs	r2, #2
 800394e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003950:	78fa      	ldrb	r2, [r7, #3]
 8003952:	6879      	ldr	r1, [r7, #4]
 8003954:	4613      	mov	r3, r2
 8003956:	011b      	lsls	r3, r3, #4
 8003958:	1a9b      	subs	r3, r3, r2
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	440b      	add	r3, r1
 800395e:	334c      	adds	r3, #76	@ 0x4c
 8003960:	2201      	movs	r2, #1
 8003962:	701a      	strb	r2, [r3, #0]
 8003964:	e2cc      	b.n	8003f00 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003966:	78fa      	ldrb	r2, [r7, #3]
 8003968:	6879      	ldr	r1, [r7, #4]
 800396a:	4613      	mov	r3, r2
 800396c:	011b      	lsls	r3, r3, #4
 800396e:	1a9b      	subs	r3, r3, r2
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	440b      	add	r3, r1
 8003974:	334d      	adds	r3, #77	@ 0x4d
 8003976:	781b      	ldrb	r3, [r3, #0]
 8003978:	2b06      	cmp	r3, #6
 800397a:	d114      	bne.n	80039a6 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800397c:	78fa      	ldrb	r2, [r7, #3]
 800397e:	6879      	ldr	r1, [r7, #4]
 8003980:	4613      	mov	r3, r2
 8003982:	011b      	lsls	r3, r3, #4
 8003984:	1a9b      	subs	r3, r3, r2
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	440b      	add	r3, r1
 800398a:	334d      	adds	r3, #77	@ 0x4d
 800398c:	2202      	movs	r2, #2
 800398e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8003990:	78fa      	ldrb	r2, [r7, #3]
 8003992:	6879      	ldr	r1, [r7, #4]
 8003994:	4613      	mov	r3, r2
 8003996:	011b      	lsls	r3, r3, #4
 8003998:	1a9b      	subs	r3, r3, r2
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	440b      	add	r3, r1
 800399e:	334c      	adds	r3, #76	@ 0x4c
 80039a0:	2205      	movs	r2, #5
 80039a2:	701a      	strb	r2, [r3, #0]
 80039a4:	e2ac      	b.n	8003f00 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80039a6:	78fa      	ldrb	r2, [r7, #3]
 80039a8:	6879      	ldr	r1, [r7, #4]
 80039aa:	4613      	mov	r3, r2
 80039ac:	011b      	lsls	r3, r3, #4
 80039ae:	1a9b      	subs	r3, r3, r2
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	440b      	add	r3, r1
 80039b4:	334d      	adds	r3, #77	@ 0x4d
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	2b07      	cmp	r3, #7
 80039ba:	d00b      	beq.n	80039d4 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80039bc:	78fa      	ldrb	r2, [r7, #3]
 80039be:	6879      	ldr	r1, [r7, #4]
 80039c0:	4613      	mov	r3, r2
 80039c2:	011b      	lsls	r3, r3, #4
 80039c4:	1a9b      	subs	r3, r3, r2
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	440b      	add	r3, r1
 80039ca:	334d      	adds	r3, #77	@ 0x4d
 80039cc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80039ce:	2b09      	cmp	r3, #9
 80039d0:	f040 80a6 	bne.w	8003b20 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80039d4:	78fa      	ldrb	r2, [r7, #3]
 80039d6:	6879      	ldr	r1, [r7, #4]
 80039d8:	4613      	mov	r3, r2
 80039da:	011b      	lsls	r3, r3, #4
 80039dc:	1a9b      	subs	r3, r3, r2
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	440b      	add	r3, r1
 80039e2:	334d      	adds	r3, #77	@ 0x4d
 80039e4:	2202      	movs	r2, #2
 80039e6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80039e8:	78fa      	ldrb	r2, [r7, #3]
 80039ea:	6879      	ldr	r1, [r7, #4]
 80039ec:	4613      	mov	r3, r2
 80039ee:	011b      	lsls	r3, r3, #4
 80039f0:	1a9b      	subs	r3, r3, r2
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	440b      	add	r3, r1
 80039f6:	3344      	adds	r3, #68	@ 0x44
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	1c59      	adds	r1, r3, #1
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	4613      	mov	r3, r2
 8003a00:	011b      	lsls	r3, r3, #4
 8003a02:	1a9b      	subs	r3, r3, r2
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	4403      	add	r3, r0
 8003a08:	3344      	adds	r3, #68	@ 0x44
 8003a0a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003a0c:	78fa      	ldrb	r2, [r7, #3]
 8003a0e:	6879      	ldr	r1, [r7, #4]
 8003a10:	4613      	mov	r3, r2
 8003a12:	011b      	lsls	r3, r3, #4
 8003a14:	1a9b      	subs	r3, r3, r2
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	440b      	add	r3, r1
 8003a1a:	3344      	adds	r3, #68	@ 0x44
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	d943      	bls.n	8003aaa <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003a22:	78fa      	ldrb	r2, [r7, #3]
 8003a24:	6879      	ldr	r1, [r7, #4]
 8003a26:	4613      	mov	r3, r2
 8003a28:	011b      	lsls	r3, r3, #4
 8003a2a:	1a9b      	subs	r3, r3, r2
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	440b      	add	r3, r1
 8003a30:	3344      	adds	r3, #68	@ 0x44
 8003a32:	2200      	movs	r2, #0
 8003a34:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8003a36:	78fa      	ldrb	r2, [r7, #3]
 8003a38:	6879      	ldr	r1, [r7, #4]
 8003a3a:	4613      	mov	r3, r2
 8003a3c:	011b      	lsls	r3, r3, #4
 8003a3e:	1a9b      	subs	r3, r3, r2
 8003a40:	009b      	lsls	r3, r3, #2
 8003a42:	440b      	add	r3, r1
 8003a44:	331a      	adds	r3, #26
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d123      	bne.n	8003a94 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8003a4c:	78fa      	ldrb	r2, [r7, #3]
 8003a4e:	6879      	ldr	r1, [r7, #4]
 8003a50:	4613      	mov	r3, r2
 8003a52:	011b      	lsls	r3, r3, #4
 8003a54:	1a9b      	subs	r3, r3, r2
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	440b      	add	r3, r1
 8003a5a:	331b      	adds	r3, #27
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8003a60:	78fa      	ldrb	r2, [r7, #3]
 8003a62:	6879      	ldr	r1, [r7, #4]
 8003a64:	4613      	mov	r3, r2
 8003a66:	011b      	lsls	r3, r3, #4
 8003a68:	1a9b      	subs	r3, r3, r2
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	440b      	add	r3, r1
 8003a6e:	331c      	adds	r3, #28
 8003a70:	2200      	movs	r2, #0
 8003a72:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003a74:	78fb      	ldrb	r3, [r7, #3]
 8003a76:	015a      	lsls	r2, r3, #5
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	4413      	add	r3, r2
 8003a7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	78fa      	ldrb	r2, [r7, #3]
 8003a84:	0151      	lsls	r1, r2, #5
 8003a86:	693a      	ldr	r2, [r7, #16]
 8003a88:	440a      	add	r2, r1
 8003a8a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003a8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a92:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003a94:	78fa      	ldrb	r2, [r7, #3]
 8003a96:	6879      	ldr	r1, [r7, #4]
 8003a98:	4613      	mov	r3, r2
 8003a9a:	011b      	lsls	r3, r3, #4
 8003a9c:	1a9b      	subs	r3, r3, r2
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	440b      	add	r3, r1
 8003aa2:	334c      	adds	r3, #76	@ 0x4c
 8003aa4:	2204      	movs	r2, #4
 8003aa6:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003aa8:	e229      	b.n	8003efe <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003aaa:	78fa      	ldrb	r2, [r7, #3]
 8003aac:	6879      	ldr	r1, [r7, #4]
 8003aae:	4613      	mov	r3, r2
 8003ab0:	011b      	lsls	r3, r3, #4
 8003ab2:	1a9b      	subs	r3, r3, r2
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	440b      	add	r3, r1
 8003ab8:	334c      	adds	r3, #76	@ 0x4c
 8003aba:	2202      	movs	r2, #2
 8003abc:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003abe:	78fa      	ldrb	r2, [r7, #3]
 8003ac0:	6879      	ldr	r1, [r7, #4]
 8003ac2:	4613      	mov	r3, r2
 8003ac4:	011b      	lsls	r3, r3, #4
 8003ac6:	1a9b      	subs	r3, r3, r2
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	440b      	add	r3, r1
 8003acc:	3326      	adds	r3, #38	@ 0x26
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d00b      	beq.n	8003aec <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003ad4:	78fa      	ldrb	r2, [r7, #3]
 8003ad6:	6879      	ldr	r1, [r7, #4]
 8003ad8:	4613      	mov	r3, r2
 8003ada:	011b      	lsls	r3, r3, #4
 8003adc:	1a9b      	subs	r3, r3, r2
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	440b      	add	r3, r1
 8003ae2:	3326      	adds	r3, #38	@ 0x26
 8003ae4:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	f040 8209 	bne.w	8003efe <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003aec:	78fb      	ldrb	r3, [r7, #3]
 8003aee:	015a      	lsls	r2, r3, #5
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	4413      	add	r3, r2
 8003af4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003b02:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003b0a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003b0c:	78fb      	ldrb	r3, [r7, #3]
 8003b0e:	015a      	lsls	r2, r3, #5
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	4413      	add	r3, r2
 8003b14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b18:	461a      	mov	r2, r3
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003b1e:	e1ee      	b.n	8003efe <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003b20:	78fa      	ldrb	r2, [r7, #3]
 8003b22:	6879      	ldr	r1, [r7, #4]
 8003b24:	4613      	mov	r3, r2
 8003b26:	011b      	lsls	r3, r3, #4
 8003b28:	1a9b      	subs	r3, r3, r2
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	440b      	add	r3, r1
 8003b2e:	334d      	adds	r3, #77	@ 0x4d
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	2b05      	cmp	r3, #5
 8003b34:	f040 80c8 	bne.w	8003cc8 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003b38:	78fa      	ldrb	r2, [r7, #3]
 8003b3a:	6879      	ldr	r1, [r7, #4]
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	011b      	lsls	r3, r3, #4
 8003b40:	1a9b      	subs	r3, r3, r2
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	440b      	add	r3, r1
 8003b46:	334d      	adds	r3, #77	@ 0x4d
 8003b48:	2202      	movs	r2, #2
 8003b4a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003b4c:	78fa      	ldrb	r2, [r7, #3]
 8003b4e:	6879      	ldr	r1, [r7, #4]
 8003b50:	4613      	mov	r3, r2
 8003b52:	011b      	lsls	r3, r3, #4
 8003b54:	1a9b      	subs	r3, r3, r2
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	440b      	add	r3, r1
 8003b5a:	331b      	adds	r3, #27
 8003b5c:	781b      	ldrb	r3, [r3, #0]
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	f040 81ce 	bne.w	8003f00 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003b64:	78fa      	ldrb	r2, [r7, #3]
 8003b66:	6879      	ldr	r1, [r7, #4]
 8003b68:	4613      	mov	r3, r2
 8003b6a:	011b      	lsls	r3, r3, #4
 8003b6c:	1a9b      	subs	r3, r3, r2
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	440b      	add	r3, r1
 8003b72:	3326      	adds	r3, #38	@ 0x26
 8003b74:	781b      	ldrb	r3, [r3, #0]
 8003b76:	2b03      	cmp	r3, #3
 8003b78:	d16b      	bne.n	8003c52 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8003b7a:	78fa      	ldrb	r2, [r7, #3]
 8003b7c:	6879      	ldr	r1, [r7, #4]
 8003b7e:	4613      	mov	r3, r2
 8003b80:	011b      	lsls	r3, r3, #4
 8003b82:	1a9b      	subs	r3, r3, r2
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	440b      	add	r3, r1
 8003b88:	3348      	adds	r3, #72	@ 0x48
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	1c59      	adds	r1, r3, #1
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	4613      	mov	r3, r2
 8003b92:	011b      	lsls	r3, r3, #4
 8003b94:	1a9b      	subs	r3, r3, r2
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	4403      	add	r3, r0
 8003b9a:	3348      	adds	r3, #72	@ 0x48
 8003b9c:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8003b9e:	78fa      	ldrb	r2, [r7, #3]
 8003ba0:	6879      	ldr	r1, [r7, #4]
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	011b      	lsls	r3, r3, #4
 8003ba6:	1a9b      	subs	r3, r3, r2
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	440b      	add	r3, r1
 8003bac:	3348      	adds	r3, #72	@ 0x48
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2b02      	cmp	r3, #2
 8003bb2:	d943      	bls.n	8003c3c <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8003bb4:	78fa      	ldrb	r2, [r7, #3]
 8003bb6:	6879      	ldr	r1, [r7, #4]
 8003bb8:	4613      	mov	r3, r2
 8003bba:	011b      	lsls	r3, r3, #4
 8003bbc:	1a9b      	subs	r3, r3, r2
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	440b      	add	r3, r1
 8003bc2:	3348      	adds	r3, #72	@ 0x48
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8003bc8:	78fa      	ldrb	r2, [r7, #3]
 8003bca:	6879      	ldr	r1, [r7, #4]
 8003bcc:	4613      	mov	r3, r2
 8003bce:	011b      	lsls	r3, r3, #4
 8003bd0:	1a9b      	subs	r3, r3, r2
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	440b      	add	r3, r1
 8003bd6:	331b      	adds	r3, #27
 8003bd8:	2200      	movs	r2, #0
 8003bda:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8003bdc:	78fa      	ldrb	r2, [r7, #3]
 8003bde:	6879      	ldr	r1, [r7, #4]
 8003be0:	4613      	mov	r3, r2
 8003be2:	011b      	lsls	r3, r3, #4
 8003be4:	1a9b      	subs	r3, r3, r2
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	440b      	add	r3, r1
 8003bea:	3344      	adds	r3, #68	@ 0x44
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	2b02      	cmp	r3, #2
 8003bf0:	d809      	bhi.n	8003c06 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8003bf2:	78fa      	ldrb	r2, [r7, #3]
 8003bf4:	6879      	ldr	r1, [r7, #4]
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	011b      	lsls	r3, r3, #4
 8003bfa:	1a9b      	subs	r3, r3, r2
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	440b      	add	r3, r1
 8003c00:	331c      	adds	r3, #28
 8003c02:	2201      	movs	r2, #1
 8003c04:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003c06:	78fb      	ldrb	r3, [r7, #3]
 8003c08:	015a      	lsls	r2, r3, #5
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	4413      	add	r3, r2
 8003c0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	78fa      	ldrb	r2, [r7, #3]
 8003c16:	0151      	lsls	r1, r2, #5
 8003c18:	693a      	ldr	r2, [r7, #16]
 8003c1a:	440a      	add	r2, r1
 8003c1c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003c20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c24:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8003c26:	78fa      	ldrb	r2, [r7, #3]
 8003c28:	6879      	ldr	r1, [r7, #4]
 8003c2a:	4613      	mov	r3, r2
 8003c2c:	011b      	lsls	r3, r3, #4
 8003c2e:	1a9b      	subs	r3, r3, r2
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	440b      	add	r3, r1
 8003c34:	334c      	adds	r3, #76	@ 0x4c
 8003c36:	2204      	movs	r2, #4
 8003c38:	701a      	strb	r2, [r3, #0]
 8003c3a:	e014      	b.n	8003c66 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003c3c:	78fa      	ldrb	r2, [r7, #3]
 8003c3e:	6879      	ldr	r1, [r7, #4]
 8003c40:	4613      	mov	r3, r2
 8003c42:	011b      	lsls	r3, r3, #4
 8003c44:	1a9b      	subs	r3, r3, r2
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	440b      	add	r3, r1
 8003c4a:	334c      	adds	r3, #76	@ 0x4c
 8003c4c:	2202      	movs	r2, #2
 8003c4e:	701a      	strb	r2, [r3, #0]
 8003c50:	e009      	b.n	8003c66 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003c52:	78fa      	ldrb	r2, [r7, #3]
 8003c54:	6879      	ldr	r1, [r7, #4]
 8003c56:	4613      	mov	r3, r2
 8003c58:	011b      	lsls	r3, r3, #4
 8003c5a:	1a9b      	subs	r3, r3, r2
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	440b      	add	r3, r1
 8003c60:	334c      	adds	r3, #76	@ 0x4c
 8003c62:	2202      	movs	r2, #2
 8003c64:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003c66:	78fa      	ldrb	r2, [r7, #3]
 8003c68:	6879      	ldr	r1, [r7, #4]
 8003c6a:	4613      	mov	r3, r2
 8003c6c:	011b      	lsls	r3, r3, #4
 8003c6e:	1a9b      	subs	r3, r3, r2
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	440b      	add	r3, r1
 8003c74:	3326      	adds	r3, #38	@ 0x26
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d00b      	beq.n	8003c94 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003c7c:	78fa      	ldrb	r2, [r7, #3]
 8003c7e:	6879      	ldr	r1, [r7, #4]
 8003c80:	4613      	mov	r3, r2
 8003c82:	011b      	lsls	r3, r3, #4
 8003c84:	1a9b      	subs	r3, r3, r2
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	440b      	add	r3, r1
 8003c8a:	3326      	adds	r3, #38	@ 0x26
 8003c8c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	f040 8136 	bne.w	8003f00 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003c94:	78fb      	ldrb	r3, [r7, #3]
 8003c96:	015a      	lsls	r2, r3, #5
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	4413      	add	r3, r2
 8003c9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003caa:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003cb2:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003cb4:	78fb      	ldrb	r3, [r7, #3]
 8003cb6:	015a      	lsls	r2, r3, #5
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	4413      	add	r3, r2
 8003cbc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6013      	str	r3, [r2, #0]
 8003cc6:	e11b      	b.n	8003f00 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003cc8:	78fa      	ldrb	r2, [r7, #3]
 8003cca:	6879      	ldr	r1, [r7, #4]
 8003ccc:	4613      	mov	r3, r2
 8003cce:	011b      	lsls	r3, r3, #4
 8003cd0:	1a9b      	subs	r3, r3, r2
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	440b      	add	r3, r1
 8003cd6:	334d      	adds	r3, #77	@ 0x4d
 8003cd8:	781b      	ldrb	r3, [r3, #0]
 8003cda:	2b03      	cmp	r3, #3
 8003cdc:	f040 8081 	bne.w	8003de2 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003ce0:	78fa      	ldrb	r2, [r7, #3]
 8003ce2:	6879      	ldr	r1, [r7, #4]
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	011b      	lsls	r3, r3, #4
 8003ce8:	1a9b      	subs	r3, r3, r2
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	440b      	add	r3, r1
 8003cee:	334d      	adds	r3, #77	@ 0x4d
 8003cf0:	2202      	movs	r2, #2
 8003cf2:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003cf4:	78fa      	ldrb	r2, [r7, #3]
 8003cf6:	6879      	ldr	r1, [r7, #4]
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	011b      	lsls	r3, r3, #4
 8003cfc:	1a9b      	subs	r3, r3, r2
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	440b      	add	r3, r1
 8003d02:	331b      	adds	r3, #27
 8003d04:	781b      	ldrb	r3, [r3, #0]
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	f040 80fa 	bne.w	8003f00 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003d0c:	78fa      	ldrb	r2, [r7, #3]
 8003d0e:	6879      	ldr	r1, [r7, #4]
 8003d10:	4613      	mov	r3, r2
 8003d12:	011b      	lsls	r3, r3, #4
 8003d14:	1a9b      	subs	r3, r3, r2
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	440b      	add	r3, r1
 8003d1a:	334c      	adds	r3, #76	@ 0x4c
 8003d1c:	2202      	movs	r2, #2
 8003d1e:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8003d20:	78fb      	ldrb	r3, [r7, #3]
 8003d22:	015a      	lsls	r2, r3, #5
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	4413      	add	r3, r2
 8003d28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	78fa      	ldrb	r2, [r7, #3]
 8003d30:	0151      	lsls	r1, r2, #5
 8003d32:	693a      	ldr	r2, [r7, #16]
 8003d34:	440a      	add	r2, r1
 8003d36:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003d3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d3e:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8003d40:	78fb      	ldrb	r3, [r7, #3]
 8003d42:	015a      	lsls	r2, r3, #5
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	4413      	add	r3, r2
 8003d48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	78fa      	ldrb	r2, [r7, #3]
 8003d50:	0151      	lsls	r1, r2, #5
 8003d52:	693a      	ldr	r2, [r7, #16]
 8003d54:	440a      	add	r2, r1
 8003d56:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003d5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003d5e:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8003d60:	78fb      	ldrb	r3, [r7, #3]
 8003d62:	015a      	lsls	r2, r3, #5
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	4413      	add	r3, r2
 8003d68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	78fa      	ldrb	r2, [r7, #3]
 8003d70:	0151      	lsls	r1, r2, #5
 8003d72:	693a      	ldr	r2, [r7, #16]
 8003d74:	440a      	add	r2, r1
 8003d76:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003d7a:	f023 0320 	bic.w	r3, r3, #32
 8003d7e:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003d80:	78fa      	ldrb	r2, [r7, #3]
 8003d82:	6879      	ldr	r1, [r7, #4]
 8003d84:	4613      	mov	r3, r2
 8003d86:	011b      	lsls	r3, r3, #4
 8003d88:	1a9b      	subs	r3, r3, r2
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	440b      	add	r3, r1
 8003d8e:	3326      	adds	r3, #38	@ 0x26
 8003d90:	781b      	ldrb	r3, [r3, #0]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d00b      	beq.n	8003dae <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003d96:	78fa      	ldrb	r2, [r7, #3]
 8003d98:	6879      	ldr	r1, [r7, #4]
 8003d9a:	4613      	mov	r3, r2
 8003d9c:	011b      	lsls	r3, r3, #4
 8003d9e:	1a9b      	subs	r3, r3, r2
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	440b      	add	r3, r1
 8003da4:	3326      	adds	r3, #38	@ 0x26
 8003da6:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	f040 80a9 	bne.w	8003f00 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003dae:	78fb      	ldrb	r3, [r7, #3]
 8003db0:	015a      	lsls	r2, r3, #5
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	4413      	add	r3, r2
 8003db6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003dc4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003dcc:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003dce:	78fb      	ldrb	r3, [r7, #3]
 8003dd0:	015a      	lsls	r2, r3, #5
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	4413      	add	r3, r2
 8003dd6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003dda:	461a      	mov	r2, r3
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6013      	str	r3, [r2, #0]
 8003de0:	e08e      	b.n	8003f00 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003de2:	78fa      	ldrb	r2, [r7, #3]
 8003de4:	6879      	ldr	r1, [r7, #4]
 8003de6:	4613      	mov	r3, r2
 8003de8:	011b      	lsls	r3, r3, #4
 8003dea:	1a9b      	subs	r3, r3, r2
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	440b      	add	r3, r1
 8003df0:	334d      	adds	r3, #77	@ 0x4d
 8003df2:	781b      	ldrb	r3, [r3, #0]
 8003df4:	2b04      	cmp	r3, #4
 8003df6:	d143      	bne.n	8003e80 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003df8:	78fa      	ldrb	r2, [r7, #3]
 8003dfa:	6879      	ldr	r1, [r7, #4]
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	011b      	lsls	r3, r3, #4
 8003e00:	1a9b      	subs	r3, r3, r2
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	440b      	add	r3, r1
 8003e06:	334d      	adds	r3, #77	@ 0x4d
 8003e08:	2202      	movs	r2, #2
 8003e0a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003e0c:	78fa      	ldrb	r2, [r7, #3]
 8003e0e:	6879      	ldr	r1, [r7, #4]
 8003e10:	4613      	mov	r3, r2
 8003e12:	011b      	lsls	r3, r3, #4
 8003e14:	1a9b      	subs	r3, r3, r2
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	440b      	add	r3, r1
 8003e1a:	334c      	adds	r3, #76	@ 0x4c
 8003e1c:	2202      	movs	r2, #2
 8003e1e:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003e20:	78fa      	ldrb	r2, [r7, #3]
 8003e22:	6879      	ldr	r1, [r7, #4]
 8003e24:	4613      	mov	r3, r2
 8003e26:	011b      	lsls	r3, r3, #4
 8003e28:	1a9b      	subs	r3, r3, r2
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	440b      	add	r3, r1
 8003e2e:	3326      	adds	r3, #38	@ 0x26
 8003e30:	781b      	ldrb	r3, [r3, #0]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d00a      	beq.n	8003e4c <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003e36:	78fa      	ldrb	r2, [r7, #3]
 8003e38:	6879      	ldr	r1, [r7, #4]
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	011b      	lsls	r3, r3, #4
 8003e3e:	1a9b      	subs	r3, r3, r2
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	440b      	add	r3, r1
 8003e44:	3326      	adds	r3, #38	@ 0x26
 8003e46:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d159      	bne.n	8003f00 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003e4c:	78fb      	ldrb	r3, [r7, #3]
 8003e4e:	015a      	lsls	r2, r3, #5
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	4413      	add	r3, r2
 8003e54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003e62:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003e6a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003e6c:	78fb      	ldrb	r3, [r7, #3]
 8003e6e:	015a      	lsls	r2, r3, #5
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	4413      	add	r3, r2
 8003e74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e78:	461a      	mov	r2, r3
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	6013      	str	r3, [r2, #0]
 8003e7e:	e03f      	b.n	8003f00 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8003e80:	78fa      	ldrb	r2, [r7, #3]
 8003e82:	6879      	ldr	r1, [r7, #4]
 8003e84:	4613      	mov	r3, r2
 8003e86:	011b      	lsls	r3, r3, #4
 8003e88:	1a9b      	subs	r3, r3, r2
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	440b      	add	r3, r1
 8003e8e:	334d      	adds	r3, #77	@ 0x4d
 8003e90:	781b      	ldrb	r3, [r3, #0]
 8003e92:	2b08      	cmp	r3, #8
 8003e94:	d126      	bne.n	8003ee4 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003e96:	78fa      	ldrb	r2, [r7, #3]
 8003e98:	6879      	ldr	r1, [r7, #4]
 8003e9a:	4613      	mov	r3, r2
 8003e9c:	011b      	lsls	r3, r3, #4
 8003e9e:	1a9b      	subs	r3, r3, r2
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	440b      	add	r3, r1
 8003ea4:	334d      	adds	r3, #77	@ 0x4d
 8003ea6:	2202      	movs	r2, #2
 8003ea8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003eaa:	78fa      	ldrb	r2, [r7, #3]
 8003eac:	6879      	ldr	r1, [r7, #4]
 8003eae:	4613      	mov	r3, r2
 8003eb0:	011b      	lsls	r3, r3, #4
 8003eb2:	1a9b      	subs	r3, r3, r2
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	440b      	add	r3, r1
 8003eb8:	3344      	adds	r3, #68	@ 0x44
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	1c59      	adds	r1, r3, #1
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	011b      	lsls	r3, r3, #4
 8003ec4:	1a9b      	subs	r3, r3, r2
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	4403      	add	r3, r0
 8003eca:	3344      	adds	r3, #68	@ 0x44
 8003ecc:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8003ece:	78fa      	ldrb	r2, [r7, #3]
 8003ed0:	6879      	ldr	r1, [r7, #4]
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	011b      	lsls	r3, r3, #4
 8003ed6:	1a9b      	subs	r3, r3, r2
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	440b      	add	r3, r1
 8003edc:	334c      	adds	r3, #76	@ 0x4c
 8003ede:	2204      	movs	r2, #4
 8003ee0:	701a      	strb	r2, [r3, #0]
 8003ee2:	e00d      	b.n	8003f00 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8003ee4:	78fa      	ldrb	r2, [r7, #3]
 8003ee6:	6879      	ldr	r1, [r7, #4]
 8003ee8:	4613      	mov	r3, r2
 8003eea:	011b      	lsls	r3, r3, #4
 8003eec:	1a9b      	subs	r3, r3, r2
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	440b      	add	r3, r1
 8003ef2:	334d      	adds	r3, #77	@ 0x4d
 8003ef4:	781b      	ldrb	r3, [r3, #0]
 8003ef6:	2b02      	cmp	r3, #2
 8003ef8:	f000 8100 	beq.w	80040fc <HCD_HC_IN_IRQHandler+0xcca>
 8003efc:	e000      	b.n	8003f00 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003efe:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003f00:	78fa      	ldrb	r2, [r7, #3]
 8003f02:	6879      	ldr	r1, [r7, #4]
 8003f04:	4613      	mov	r3, r2
 8003f06:	011b      	lsls	r3, r3, #4
 8003f08:	1a9b      	subs	r3, r3, r2
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	440b      	add	r3, r1
 8003f0e:	334c      	adds	r3, #76	@ 0x4c
 8003f10:	781a      	ldrb	r2, [r3, #0]
 8003f12:	78fb      	ldrb	r3, [r7, #3]
 8003f14:	4619      	mov	r1, r3
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f006 faa6 	bl	800a468 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003f1c:	e0ef      	b.n	80040fe <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	78fa      	ldrb	r2, [r7, #3]
 8003f24:	4611      	mov	r1, r2
 8003f26:	4618      	mov	r0, r3
 8003f28:	f003 f9a1 	bl	800726e <USB_ReadChInterrupts>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f32:	2b40      	cmp	r3, #64	@ 0x40
 8003f34:	d12f      	bne.n	8003f96 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003f36:	78fb      	ldrb	r3, [r7, #3]
 8003f38:	015a      	lsls	r2, r3, #5
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	4413      	add	r3, r2
 8003f3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f42:	461a      	mov	r2, r3
 8003f44:	2340      	movs	r3, #64	@ 0x40
 8003f46:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8003f48:	78fa      	ldrb	r2, [r7, #3]
 8003f4a:	6879      	ldr	r1, [r7, #4]
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	011b      	lsls	r3, r3, #4
 8003f50:	1a9b      	subs	r3, r3, r2
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	440b      	add	r3, r1
 8003f56:	334d      	adds	r3, #77	@ 0x4d
 8003f58:	2205      	movs	r2, #5
 8003f5a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003f5c:	78fa      	ldrb	r2, [r7, #3]
 8003f5e:	6879      	ldr	r1, [r7, #4]
 8003f60:	4613      	mov	r3, r2
 8003f62:	011b      	lsls	r3, r3, #4
 8003f64:	1a9b      	subs	r3, r3, r2
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	440b      	add	r3, r1
 8003f6a:	331a      	adds	r3, #26
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d109      	bne.n	8003f86 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003f72:	78fa      	ldrb	r2, [r7, #3]
 8003f74:	6879      	ldr	r1, [r7, #4]
 8003f76:	4613      	mov	r3, r2
 8003f78:	011b      	lsls	r3, r3, #4
 8003f7a:	1a9b      	subs	r3, r3, r2
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	440b      	add	r3, r1
 8003f80:	3344      	adds	r3, #68	@ 0x44
 8003f82:	2200      	movs	r2, #0
 8003f84:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	78fa      	ldrb	r2, [r7, #3]
 8003f8c:	4611      	mov	r1, r2
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f003 ff11 	bl	8007db6 <USB_HC_Halt>
 8003f94:	e0b3      	b.n	80040fe <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	78fa      	ldrb	r2, [r7, #3]
 8003f9c:	4611      	mov	r1, r2
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f003 f965 	bl	800726e <USB_ReadChInterrupts>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	f003 0310 	and.w	r3, r3, #16
 8003faa:	2b10      	cmp	r3, #16
 8003fac:	f040 80a7 	bne.w	80040fe <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003fb0:	78fa      	ldrb	r2, [r7, #3]
 8003fb2:	6879      	ldr	r1, [r7, #4]
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	011b      	lsls	r3, r3, #4
 8003fb8:	1a9b      	subs	r3, r3, r2
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	440b      	add	r3, r1
 8003fbe:	3326      	adds	r3, #38	@ 0x26
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	2b03      	cmp	r3, #3
 8003fc4:	d11b      	bne.n	8003ffe <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003fc6:	78fa      	ldrb	r2, [r7, #3]
 8003fc8:	6879      	ldr	r1, [r7, #4]
 8003fca:	4613      	mov	r3, r2
 8003fcc:	011b      	lsls	r3, r3, #4
 8003fce:	1a9b      	subs	r3, r3, r2
 8003fd0:	009b      	lsls	r3, r3, #2
 8003fd2:	440b      	add	r3, r1
 8003fd4:	3344      	adds	r3, #68	@ 0x44
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8003fda:	78fa      	ldrb	r2, [r7, #3]
 8003fdc:	6879      	ldr	r1, [r7, #4]
 8003fde:	4613      	mov	r3, r2
 8003fe0:	011b      	lsls	r3, r3, #4
 8003fe2:	1a9b      	subs	r3, r3, r2
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	440b      	add	r3, r1
 8003fe8:	334d      	adds	r3, #77	@ 0x4d
 8003fea:	2204      	movs	r2, #4
 8003fec:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	78fa      	ldrb	r2, [r7, #3]
 8003ff4:	4611      	mov	r1, r2
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f003 fedd 	bl	8007db6 <USB_HC_Halt>
 8003ffc:	e03f      	b.n	800407e <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003ffe:	78fa      	ldrb	r2, [r7, #3]
 8004000:	6879      	ldr	r1, [r7, #4]
 8004002:	4613      	mov	r3, r2
 8004004:	011b      	lsls	r3, r3, #4
 8004006:	1a9b      	subs	r3, r3, r2
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	440b      	add	r3, r1
 800400c:	3326      	adds	r3, #38	@ 0x26
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d00a      	beq.n	800402a <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004014:	78fa      	ldrb	r2, [r7, #3]
 8004016:	6879      	ldr	r1, [r7, #4]
 8004018:	4613      	mov	r3, r2
 800401a:	011b      	lsls	r3, r3, #4
 800401c:	1a9b      	subs	r3, r3, r2
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	440b      	add	r3, r1
 8004022:	3326      	adds	r3, #38	@ 0x26
 8004024:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004026:	2b02      	cmp	r3, #2
 8004028:	d129      	bne.n	800407e <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800402a:	78fa      	ldrb	r2, [r7, #3]
 800402c:	6879      	ldr	r1, [r7, #4]
 800402e:	4613      	mov	r3, r2
 8004030:	011b      	lsls	r3, r3, #4
 8004032:	1a9b      	subs	r3, r3, r2
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	440b      	add	r3, r1
 8004038:	3344      	adds	r3, #68	@ 0x44
 800403a:	2200      	movs	r2, #0
 800403c:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	799b      	ldrb	r3, [r3, #6]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d00a      	beq.n	800405c <HCD_HC_IN_IRQHandler+0xc2a>
 8004046:	78fa      	ldrb	r2, [r7, #3]
 8004048:	6879      	ldr	r1, [r7, #4]
 800404a:	4613      	mov	r3, r2
 800404c:	011b      	lsls	r3, r3, #4
 800404e:	1a9b      	subs	r3, r3, r2
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	440b      	add	r3, r1
 8004054:	331b      	adds	r3, #27
 8004056:	781b      	ldrb	r3, [r3, #0]
 8004058:	2b01      	cmp	r3, #1
 800405a:	d110      	bne.n	800407e <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 800405c:	78fa      	ldrb	r2, [r7, #3]
 800405e:	6879      	ldr	r1, [r7, #4]
 8004060:	4613      	mov	r3, r2
 8004062:	011b      	lsls	r3, r3, #4
 8004064:	1a9b      	subs	r3, r3, r2
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	440b      	add	r3, r1
 800406a:	334d      	adds	r3, #77	@ 0x4d
 800406c:	2204      	movs	r2, #4
 800406e:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	78fa      	ldrb	r2, [r7, #3]
 8004076:	4611      	mov	r1, r2
 8004078:	4618      	mov	r0, r3
 800407a:	f003 fe9c 	bl	8007db6 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 800407e:	78fa      	ldrb	r2, [r7, #3]
 8004080:	6879      	ldr	r1, [r7, #4]
 8004082:	4613      	mov	r3, r2
 8004084:	011b      	lsls	r3, r3, #4
 8004086:	1a9b      	subs	r3, r3, r2
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	440b      	add	r3, r1
 800408c:	331b      	adds	r3, #27
 800408e:	781b      	ldrb	r3, [r3, #0]
 8004090:	2b01      	cmp	r3, #1
 8004092:	d129      	bne.n	80040e8 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004094:	78fa      	ldrb	r2, [r7, #3]
 8004096:	6879      	ldr	r1, [r7, #4]
 8004098:	4613      	mov	r3, r2
 800409a:	011b      	lsls	r3, r3, #4
 800409c:	1a9b      	subs	r3, r3, r2
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	440b      	add	r3, r1
 80040a2:	331b      	adds	r3, #27
 80040a4:	2200      	movs	r2, #0
 80040a6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80040a8:	78fb      	ldrb	r3, [r7, #3]
 80040aa:	015a      	lsls	r2, r3, #5
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	4413      	add	r3, r2
 80040b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	78fa      	ldrb	r2, [r7, #3]
 80040b8:	0151      	lsls	r1, r2, #5
 80040ba:	693a      	ldr	r2, [r7, #16]
 80040bc:	440a      	add	r2, r1
 80040be:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80040c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040c6:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80040c8:	78fb      	ldrb	r3, [r7, #3]
 80040ca:	015a      	lsls	r2, r3, #5
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	4413      	add	r3, r2
 80040d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	78fa      	ldrb	r2, [r7, #3]
 80040d8:	0151      	lsls	r1, r2, #5
 80040da:	693a      	ldr	r2, [r7, #16]
 80040dc:	440a      	add	r2, r1
 80040de:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80040e2:	f043 0320 	orr.w	r3, r3, #32
 80040e6:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80040e8:	78fb      	ldrb	r3, [r7, #3]
 80040ea:	015a      	lsls	r2, r3, #5
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	4413      	add	r3, r2
 80040f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040f4:	461a      	mov	r2, r3
 80040f6:	2310      	movs	r3, #16
 80040f8:	6093      	str	r3, [r2, #8]
 80040fa:	e000      	b.n	80040fe <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80040fc:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80040fe:	3718      	adds	r7, #24
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}

08004104 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b086      	sub	sp, #24
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	460b      	mov	r3, r1
 800410e:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	78fa      	ldrb	r2, [r7, #3]
 8004120:	4611      	mov	r1, r2
 8004122:	4618      	mov	r0, r3
 8004124:	f003 f8a3 	bl	800726e <USB_ReadChInterrupts>
 8004128:	4603      	mov	r3, r0
 800412a:	f003 0304 	and.w	r3, r3, #4
 800412e:	2b04      	cmp	r3, #4
 8004130:	d11b      	bne.n	800416a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8004132:	78fb      	ldrb	r3, [r7, #3]
 8004134:	015a      	lsls	r2, r3, #5
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	4413      	add	r3, r2
 800413a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800413e:	461a      	mov	r2, r3
 8004140:	2304      	movs	r3, #4
 8004142:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004144:	78fa      	ldrb	r2, [r7, #3]
 8004146:	6879      	ldr	r1, [r7, #4]
 8004148:	4613      	mov	r3, r2
 800414a:	011b      	lsls	r3, r3, #4
 800414c:	1a9b      	subs	r3, r3, r2
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	440b      	add	r3, r1
 8004152:	334d      	adds	r3, #77	@ 0x4d
 8004154:	2207      	movs	r2, #7
 8004156:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	78fa      	ldrb	r2, [r7, #3]
 800415e:	4611      	mov	r1, r2
 8004160:	4618      	mov	r0, r3
 8004162:	f003 fe28 	bl	8007db6 <USB_HC_Halt>
 8004166:	f000 bc89 	b.w	8004a7c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	78fa      	ldrb	r2, [r7, #3]
 8004170:	4611      	mov	r1, r2
 8004172:	4618      	mov	r0, r3
 8004174:	f003 f87b 	bl	800726e <USB_ReadChInterrupts>
 8004178:	4603      	mov	r3, r0
 800417a:	f003 0320 	and.w	r3, r3, #32
 800417e:	2b20      	cmp	r3, #32
 8004180:	f040 8082 	bne.w	8004288 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004184:	78fb      	ldrb	r3, [r7, #3]
 8004186:	015a      	lsls	r2, r3, #5
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	4413      	add	r3, r2
 800418c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004190:	461a      	mov	r2, r3
 8004192:	2320      	movs	r3, #32
 8004194:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8004196:	78fa      	ldrb	r2, [r7, #3]
 8004198:	6879      	ldr	r1, [r7, #4]
 800419a:	4613      	mov	r3, r2
 800419c:	011b      	lsls	r3, r3, #4
 800419e:	1a9b      	subs	r3, r3, r2
 80041a0:	009b      	lsls	r3, r3, #2
 80041a2:	440b      	add	r3, r1
 80041a4:	3319      	adds	r3, #25
 80041a6:	781b      	ldrb	r3, [r3, #0]
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d124      	bne.n	80041f6 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 80041ac:	78fa      	ldrb	r2, [r7, #3]
 80041ae:	6879      	ldr	r1, [r7, #4]
 80041b0:	4613      	mov	r3, r2
 80041b2:	011b      	lsls	r3, r3, #4
 80041b4:	1a9b      	subs	r3, r3, r2
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	440b      	add	r3, r1
 80041ba:	3319      	adds	r3, #25
 80041bc:	2200      	movs	r2, #0
 80041be:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80041c0:	78fa      	ldrb	r2, [r7, #3]
 80041c2:	6879      	ldr	r1, [r7, #4]
 80041c4:	4613      	mov	r3, r2
 80041c6:	011b      	lsls	r3, r3, #4
 80041c8:	1a9b      	subs	r3, r3, r2
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	440b      	add	r3, r1
 80041ce:	334c      	adds	r3, #76	@ 0x4c
 80041d0:	2202      	movs	r2, #2
 80041d2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80041d4:	78fa      	ldrb	r2, [r7, #3]
 80041d6:	6879      	ldr	r1, [r7, #4]
 80041d8:	4613      	mov	r3, r2
 80041da:	011b      	lsls	r3, r3, #4
 80041dc:	1a9b      	subs	r3, r3, r2
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	440b      	add	r3, r1
 80041e2:	334d      	adds	r3, #77	@ 0x4d
 80041e4:	2203      	movs	r2, #3
 80041e6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	78fa      	ldrb	r2, [r7, #3]
 80041ee:	4611      	mov	r1, r2
 80041f0:	4618      	mov	r0, r3
 80041f2:	f003 fde0 	bl	8007db6 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80041f6:	78fa      	ldrb	r2, [r7, #3]
 80041f8:	6879      	ldr	r1, [r7, #4]
 80041fa:	4613      	mov	r3, r2
 80041fc:	011b      	lsls	r3, r3, #4
 80041fe:	1a9b      	subs	r3, r3, r2
 8004200:	009b      	lsls	r3, r3, #2
 8004202:	440b      	add	r3, r1
 8004204:	331a      	adds	r3, #26
 8004206:	781b      	ldrb	r3, [r3, #0]
 8004208:	2b01      	cmp	r3, #1
 800420a:	f040 8437 	bne.w	8004a7c <HCD_HC_OUT_IRQHandler+0x978>
 800420e:	78fa      	ldrb	r2, [r7, #3]
 8004210:	6879      	ldr	r1, [r7, #4]
 8004212:	4613      	mov	r3, r2
 8004214:	011b      	lsls	r3, r3, #4
 8004216:	1a9b      	subs	r3, r3, r2
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	440b      	add	r3, r1
 800421c:	331b      	adds	r3, #27
 800421e:	781b      	ldrb	r3, [r3, #0]
 8004220:	2b00      	cmp	r3, #0
 8004222:	f040 842b 	bne.w	8004a7c <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8004226:	78fa      	ldrb	r2, [r7, #3]
 8004228:	6879      	ldr	r1, [r7, #4]
 800422a:	4613      	mov	r3, r2
 800422c:	011b      	lsls	r3, r3, #4
 800422e:	1a9b      	subs	r3, r3, r2
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	440b      	add	r3, r1
 8004234:	3326      	adds	r3, #38	@ 0x26
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	2b01      	cmp	r3, #1
 800423a:	d009      	beq.n	8004250 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 800423c:	78fa      	ldrb	r2, [r7, #3]
 800423e:	6879      	ldr	r1, [r7, #4]
 8004240:	4613      	mov	r3, r2
 8004242:	011b      	lsls	r3, r3, #4
 8004244:	1a9b      	subs	r3, r3, r2
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	440b      	add	r3, r1
 800424a:	331b      	adds	r3, #27
 800424c:	2201      	movs	r2, #1
 800424e:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8004250:	78fa      	ldrb	r2, [r7, #3]
 8004252:	6879      	ldr	r1, [r7, #4]
 8004254:	4613      	mov	r3, r2
 8004256:	011b      	lsls	r3, r3, #4
 8004258:	1a9b      	subs	r3, r3, r2
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	440b      	add	r3, r1
 800425e:	334d      	adds	r3, #77	@ 0x4d
 8004260:	2203      	movs	r2, #3
 8004262:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	78fa      	ldrb	r2, [r7, #3]
 800426a:	4611      	mov	r1, r2
 800426c:	4618      	mov	r0, r3
 800426e:	f003 fda2 	bl	8007db6 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8004272:	78fa      	ldrb	r2, [r7, #3]
 8004274:	6879      	ldr	r1, [r7, #4]
 8004276:	4613      	mov	r3, r2
 8004278:	011b      	lsls	r3, r3, #4
 800427a:	1a9b      	subs	r3, r3, r2
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	440b      	add	r3, r1
 8004280:	3344      	adds	r3, #68	@ 0x44
 8004282:	2200      	movs	r2, #0
 8004284:	601a      	str	r2, [r3, #0]
 8004286:	e3f9      	b.n	8004a7c <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	78fa      	ldrb	r2, [r7, #3]
 800428e:	4611      	mov	r1, r2
 8004290:	4618      	mov	r0, r3
 8004292:	f002 ffec 	bl	800726e <USB_ReadChInterrupts>
 8004296:	4603      	mov	r3, r0
 8004298:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800429c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042a0:	d111      	bne.n	80042c6 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80042a2:	78fb      	ldrb	r3, [r7, #3]
 80042a4:	015a      	lsls	r2, r3, #5
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	4413      	add	r3, r2
 80042aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042ae:	461a      	mov	r2, r3
 80042b0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80042b4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	78fa      	ldrb	r2, [r7, #3]
 80042bc:	4611      	mov	r1, r2
 80042be:	4618      	mov	r0, r3
 80042c0:	f003 fd79 	bl	8007db6 <USB_HC_Halt>
 80042c4:	e3da      	b.n	8004a7c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	78fa      	ldrb	r2, [r7, #3]
 80042cc:	4611      	mov	r1, r2
 80042ce:	4618      	mov	r0, r3
 80042d0:	f002 ffcd 	bl	800726e <USB_ReadChInterrupts>
 80042d4:	4603      	mov	r3, r0
 80042d6:	f003 0301 	and.w	r3, r3, #1
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d168      	bne.n	80043b0 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80042de:	78fa      	ldrb	r2, [r7, #3]
 80042e0:	6879      	ldr	r1, [r7, #4]
 80042e2:	4613      	mov	r3, r2
 80042e4:	011b      	lsls	r3, r3, #4
 80042e6:	1a9b      	subs	r3, r3, r2
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	440b      	add	r3, r1
 80042ec:	3344      	adds	r3, #68	@ 0x44
 80042ee:	2200      	movs	r2, #0
 80042f0:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	78fa      	ldrb	r2, [r7, #3]
 80042f8:	4611      	mov	r1, r2
 80042fa:	4618      	mov	r0, r3
 80042fc:	f002 ffb7 	bl	800726e <USB_ReadChInterrupts>
 8004300:	4603      	mov	r3, r0
 8004302:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004306:	2b40      	cmp	r3, #64	@ 0x40
 8004308:	d112      	bne.n	8004330 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800430a:	78fa      	ldrb	r2, [r7, #3]
 800430c:	6879      	ldr	r1, [r7, #4]
 800430e:	4613      	mov	r3, r2
 8004310:	011b      	lsls	r3, r3, #4
 8004312:	1a9b      	subs	r3, r3, r2
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	440b      	add	r3, r1
 8004318:	3319      	adds	r3, #25
 800431a:	2201      	movs	r2, #1
 800431c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800431e:	78fb      	ldrb	r3, [r7, #3]
 8004320:	015a      	lsls	r2, r3, #5
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	4413      	add	r3, r2
 8004326:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800432a:	461a      	mov	r2, r3
 800432c:	2340      	movs	r3, #64	@ 0x40
 800432e:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8004330:	78fa      	ldrb	r2, [r7, #3]
 8004332:	6879      	ldr	r1, [r7, #4]
 8004334:	4613      	mov	r3, r2
 8004336:	011b      	lsls	r3, r3, #4
 8004338:	1a9b      	subs	r3, r3, r2
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	440b      	add	r3, r1
 800433e:	331b      	adds	r3, #27
 8004340:	781b      	ldrb	r3, [r3, #0]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d019      	beq.n	800437a <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004346:	78fa      	ldrb	r2, [r7, #3]
 8004348:	6879      	ldr	r1, [r7, #4]
 800434a:	4613      	mov	r3, r2
 800434c:	011b      	lsls	r3, r3, #4
 800434e:	1a9b      	subs	r3, r3, r2
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	440b      	add	r3, r1
 8004354:	331b      	adds	r3, #27
 8004356:	2200      	movs	r2, #0
 8004358:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800435a:	78fb      	ldrb	r3, [r7, #3]
 800435c:	015a      	lsls	r2, r3, #5
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	4413      	add	r3, r2
 8004362:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	78fa      	ldrb	r2, [r7, #3]
 800436a:	0151      	lsls	r1, r2, #5
 800436c:	693a      	ldr	r2, [r7, #16]
 800436e:	440a      	add	r2, r1
 8004370:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004374:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004378:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800437a:	78fb      	ldrb	r3, [r7, #3]
 800437c:	015a      	lsls	r2, r3, #5
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	4413      	add	r3, r2
 8004382:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004386:	461a      	mov	r2, r3
 8004388:	2301      	movs	r3, #1
 800438a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 800438c:	78fa      	ldrb	r2, [r7, #3]
 800438e:	6879      	ldr	r1, [r7, #4]
 8004390:	4613      	mov	r3, r2
 8004392:	011b      	lsls	r3, r3, #4
 8004394:	1a9b      	subs	r3, r3, r2
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	440b      	add	r3, r1
 800439a:	334d      	adds	r3, #77	@ 0x4d
 800439c:	2201      	movs	r2, #1
 800439e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	78fa      	ldrb	r2, [r7, #3]
 80043a6:	4611      	mov	r1, r2
 80043a8:	4618      	mov	r0, r3
 80043aa:	f003 fd04 	bl	8007db6 <USB_HC_Halt>
 80043ae:	e365      	b.n	8004a7c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	78fa      	ldrb	r2, [r7, #3]
 80043b6:	4611      	mov	r1, r2
 80043b8:	4618      	mov	r0, r3
 80043ba:	f002 ff58 	bl	800726e <USB_ReadChInterrupts>
 80043be:	4603      	mov	r3, r0
 80043c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043c4:	2b40      	cmp	r3, #64	@ 0x40
 80043c6:	d139      	bne.n	800443c <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80043c8:	78fa      	ldrb	r2, [r7, #3]
 80043ca:	6879      	ldr	r1, [r7, #4]
 80043cc:	4613      	mov	r3, r2
 80043ce:	011b      	lsls	r3, r3, #4
 80043d0:	1a9b      	subs	r3, r3, r2
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	440b      	add	r3, r1
 80043d6:	334d      	adds	r3, #77	@ 0x4d
 80043d8:	2205      	movs	r2, #5
 80043da:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80043dc:	78fa      	ldrb	r2, [r7, #3]
 80043de:	6879      	ldr	r1, [r7, #4]
 80043e0:	4613      	mov	r3, r2
 80043e2:	011b      	lsls	r3, r3, #4
 80043e4:	1a9b      	subs	r3, r3, r2
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	440b      	add	r3, r1
 80043ea:	331a      	adds	r3, #26
 80043ec:	781b      	ldrb	r3, [r3, #0]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d109      	bne.n	8004406 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80043f2:	78fa      	ldrb	r2, [r7, #3]
 80043f4:	6879      	ldr	r1, [r7, #4]
 80043f6:	4613      	mov	r3, r2
 80043f8:	011b      	lsls	r3, r3, #4
 80043fa:	1a9b      	subs	r3, r3, r2
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	440b      	add	r3, r1
 8004400:	3319      	adds	r3, #25
 8004402:	2201      	movs	r2, #1
 8004404:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8004406:	78fa      	ldrb	r2, [r7, #3]
 8004408:	6879      	ldr	r1, [r7, #4]
 800440a:	4613      	mov	r3, r2
 800440c:	011b      	lsls	r3, r3, #4
 800440e:	1a9b      	subs	r3, r3, r2
 8004410:	009b      	lsls	r3, r3, #2
 8004412:	440b      	add	r3, r1
 8004414:	3344      	adds	r3, #68	@ 0x44
 8004416:	2200      	movs	r2, #0
 8004418:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	78fa      	ldrb	r2, [r7, #3]
 8004420:	4611      	mov	r1, r2
 8004422:	4618      	mov	r0, r3
 8004424:	f003 fcc7 	bl	8007db6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004428:	78fb      	ldrb	r3, [r7, #3]
 800442a:	015a      	lsls	r2, r3, #5
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	4413      	add	r3, r2
 8004430:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004434:	461a      	mov	r2, r3
 8004436:	2340      	movs	r3, #64	@ 0x40
 8004438:	6093      	str	r3, [r2, #8]
 800443a:	e31f      	b.n	8004a7c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	78fa      	ldrb	r2, [r7, #3]
 8004442:	4611      	mov	r1, r2
 8004444:	4618      	mov	r0, r3
 8004446:	f002 ff12 	bl	800726e <USB_ReadChInterrupts>
 800444a:	4603      	mov	r3, r0
 800444c:	f003 0308 	and.w	r3, r3, #8
 8004450:	2b08      	cmp	r3, #8
 8004452:	d11a      	bne.n	800448a <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8004454:	78fb      	ldrb	r3, [r7, #3]
 8004456:	015a      	lsls	r2, r3, #5
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	4413      	add	r3, r2
 800445c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004460:	461a      	mov	r2, r3
 8004462:	2308      	movs	r3, #8
 8004464:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8004466:	78fa      	ldrb	r2, [r7, #3]
 8004468:	6879      	ldr	r1, [r7, #4]
 800446a:	4613      	mov	r3, r2
 800446c:	011b      	lsls	r3, r3, #4
 800446e:	1a9b      	subs	r3, r3, r2
 8004470:	009b      	lsls	r3, r3, #2
 8004472:	440b      	add	r3, r1
 8004474:	334d      	adds	r3, #77	@ 0x4d
 8004476:	2206      	movs	r2, #6
 8004478:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	78fa      	ldrb	r2, [r7, #3]
 8004480:	4611      	mov	r1, r2
 8004482:	4618      	mov	r0, r3
 8004484:	f003 fc97 	bl	8007db6 <USB_HC_Halt>
 8004488:	e2f8      	b.n	8004a7c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	78fa      	ldrb	r2, [r7, #3]
 8004490:	4611      	mov	r1, r2
 8004492:	4618      	mov	r0, r3
 8004494:	f002 feeb 	bl	800726e <USB_ReadChInterrupts>
 8004498:	4603      	mov	r3, r0
 800449a:	f003 0310 	and.w	r3, r3, #16
 800449e:	2b10      	cmp	r3, #16
 80044a0:	d144      	bne.n	800452c <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80044a2:	78fa      	ldrb	r2, [r7, #3]
 80044a4:	6879      	ldr	r1, [r7, #4]
 80044a6:	4613      	mov	r3, r2
 80044a8:	011b      	lsls	r3, r3, #4
 80044aa:	1a9b      	subs	r3, r3, r2
 80044ac:	009b      	lsls	r3, r3, #2
 80044ae:	440b      	add	r3, r1
 80044b0:	3344      	adds	r3, #68	@ 0x44
 80044b2:	2200      	movs	r2, #0
 80044b4:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 80044b6:	78fa      	ldrb	r2, [r7, #3]
 80044b8:	6879      	ldr	r1, [r7, #4]
 80044ba:	4613      	mov	r3, r2
 80044bc:	011b      	lsls	r3, r3, #4
 80044be:	1a9b      	subs	r3, r3, r2
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	440b      	add	r3, r1
 80044c4:	334d      	adds	r3, #77	@ 0x4d
 80044c6:	2204      	movs	r2, #4
 80044c8:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 80044ca:	78fa      	ldrb	r2, [r7, #3]
 80044cc:	6879      	ldr	r1, [r7, #4]
 80044ce:	4613      	mov	r3, r2
 80044d0:	011b      	lsls	r3, r3, #4
 80044d2:	1a9b      	subs	r3, r3, r2
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	440b      	add	r3, r1
 80044d8:	3319      	adds	r3, #25
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d114      	bne.n	800450a <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 80044e0:	78fa      	ldrb	r2, [r7, #3]
 80044e2:	6879      	ldr	r1, [r7, #4]
 80044e4:	4613      	mov	r3, r2
 80044e6:	011b      	lsls	r3, r3, #4
 80044e8:	1a9b      	subs	r3, r3, r2
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	440b      	add	r3, r1
 80044ee:	3318      	adds	r3, #24
 80044f0:	781b      	ldrb	r3, [r3, #0]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d109      	bne.n	800450a <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 80044f6:	78fa      	ldrb	r2, [r7, #3]
 80044f8:	6879      	ldr	r1, [r7, #4]
 80044fa:	4613      	mov	r3, r2
 80044fc:	011b      	lsls	r3, r3, #4
 80044fe:	1a9b      	subs	r3, r3, r2
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	440b      	add	r3, r1
 8004504:	3319      	adds	r3, #25
 8004506:	2201      	movs	r2, #1
 8004508:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	78fa      	ldrb	r2, [r7, #3]
 8004510:	4611      	mov	r1, r2
 8004512:	4618      	mov	r0, r3
 8004514:	f003 fc4f 	bl	8007db6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004518:	78fb      	ldrb	r3, [r7, #3]
 800451a:	015a      	lsls	r2, r3, #5
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	4413      	add	r3, r2
 8004520:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004524:	461a      	mov	r2, r3
 8004526:	2310      	movs	r3, #16
 8004528:	6093      	str	r3, [r2, #8]
 800452a:	e2a7      	b.n	8004a7c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	78fa      	ldrb	r2, [r7, #3]
 8004532:	4611      	mov	r1, r2
 8004534:	4618      	mov	r0, r3
 8004536:	f002 fe9a 	bl	800726e <USB_ReadChInterrupts>
 800453a:	4603      	mov	r3, r0
 800453c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004540:	2b80      	cmp	r3, #128	@ 0x80
 8004542:	f040 8083 	bne.w	800464c <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	799b      	ldrb	r3, [r3, #6]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d111      	bne.n	8004572 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 800454e:	78fa      	ldrb	r2, [r7, #3]
 8004550:	6879      	ldr	r1, [r7, #4]
 8004552:	4613      	mov	r3, r2
 8004554:	011b      	lsls	r3, r3, #4
 8004556:	1a9b      	subs	r3, r3, r2
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	440b      	add	r3, r1
 800455c:	334d      	adds	r3, #77	@ 0x4d
 800455e:	2207      	movs	r2, #7
 8004560:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	78fa      	ldrb	r2, [r7, #3]
 8004568:	4611      	mov	r1, r2
 800456a:	4618      	mov	r0, r3
 800456c:	f003 fc23 	bl	8007db6 <USB_HC_Halt>
 8004570:	e062      	b.n	8004638 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8004572:	78fa      	ldrb	r2, [r7, #3]
 8004574:	6879      	ldr	r1, [r7, #4]
 8004576:	4613      	mov	r3, r2
 8004578:	011b      	lsls	r3, r3, #4
 800457a:	1a9b      	subs	r3, r3, r2
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	440b      	add	r3, r1
 8004580:	3344      	adds	r3, #68	@ 0x44
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	1c59      	adds	r1, r3, #1
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	4613      	mov	r3, r2
 800458a:	011b      	lsls	r3, r3, #4
 800458c:	1a9b      	subs	r3, r3, r2
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	4403      	add	r3, r0
 8004592:	3344      	adds	r3, #68	@ 0x44
 8004594:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004596:	78fa      	ldrb	r2, [r7, #3]
 8004598:	6879      	ldr	r1, [r7, #4]
 800459a:	4613      	mov	r3, r2
 800459c:	011b      	lsls	r3, r3, #4
 800459e:	1a9b      	subs	r3, r3, r2
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	440b      	add	r3, r1
 80045a4:	3344      	adds	r3, #68	@ 0x44
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	2b02      	cmp	r3, #2
 80045aa:	d922      	bls.n	80045f2 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80045ac:	78fa      	ldrb	r2, [r7, #3]
 80045ae:	6879      	ldr	r1, [r7, #4]
 80045b0:	4613      	mov	r3, r2
 80045b2:	011b      	lsls	r3, r3, #4
 80045b4:	1a9b      	subs	r3, r3, r2
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	440b      	add	r3, r1
 80045ba:	3344      	adds	r3, #68	@ 0x44
 80045bc:	2200      	movs	r2, #0
 80045be:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80045c0:	78fa      	ldrb	r2, [r7, #3]
 80045c2:	6879      	ldr	r1, [r7, #4]
 80045c4:	4613      	mov	r3, r2
 80045c6:	011b      	lsls	r3, r3, #4
 80045c8:	1a9b      	subs	r3, r3, r2
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	440b      	add	r3, r1
 80045ce:	334c      	adds	r3, #76	@ 0x4c
 80045d0:	2204      	movs	r2, #4
 80045d2:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80045d4:	78fa      	ldrb	r2, [r7, #3]
 80045d6:	6879      	ldr	r1, [r7, #4]
 80045d8:	4613      	mov	r3, r2
 80045da:	011b      	lsls	r3, r3, #4
 80045dc:	1a9b      	subs	r3, r3, r2
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	440b      	add	r3, r1
 80045e2:	334c      	adds	r3, #76	@ 0x4c
 80045e4:	781a      	ldrb	r2, [r3, #0]
 80045e6:	78fb      	ldrb	r3, [r7, #3]
 80045e8:	4619      	mov	r1, r3
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f005 ff3c 	bl	800a468 <HAL_HCD_HC_NotifyURBChange_Callback>
 80045f0:	e022      	b.n	8004638 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80045f2:	78fa      	ldrb	r2, [r7, #3]
 80045f4:	6879      	ldr	r1, [r7, #4]
 80045f6:	4613      	mov	r3, r2
 80045f8:	011b      	lsls	r3, r3, #4
 80045fa:	1a9b      	subs	r3, r3, r2
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	440b      	add	r3, r1
 8004600:	334c      	adds	r3, #76	@ 0x4c
 8004602:	2202      	movs	r2, #2
 8004604:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004606:	78fb      	ldrb	r3, [r7, #3]
 8004608:	015a      	lsls	r2, r3, #5
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	4413      	add	r3, r2
 800460e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800461c:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004624:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004626:	78fb      	ldrb	r3, [r7, #3]
 8004628:	015a      	lsls	r2, r3, #5
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	4413      	add	r3, r2
 800462e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004632:	461a      	mov	r2, r3
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004638:	78fb      	ldrb	r3, [r7, #3]
 800463a:	015a      	lsls	r2, r3, #5
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	4413      	add	r3, r2
 8004640:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004644:	461a      	mov	r2, r3
 8004646:	2380      	movs	r3, #128	@ 0x80
 8004648:	6093      	str	r3, [r2, #8]
 800464a:	e217      	b.n	8004a7c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	78fa      	ldrb	r2, [r7, #3]
 8004652:	4611      	mov	r1, r2
 8004654:	4618      	mov	r0, r3
 8004656:	f002 fe0a 	bl	800726e <USB_ReadChInterrupts>
 800465a:	4603      	mov	r3, r0
 800465c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004660:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004664:	d11b      	bne.n	800469e <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004666:	78fa      	ldrb	r2, [r7, #3]
 8004668:	6879      	ldr	r1, [r7, #4]
 800466a:	4613      	mov	r3, r2
 800466c:	011b      	lsls	r3, r3, #4
 800466e:	1a9b      	subs	r3, r3, r2
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	440b      	add	r3, r1
 8004674:	334d      	adds	r3, #77	@ 0x4d
 8004676:	2209      	movs	r2, #9
 8004678:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	78fa      	ldrb	r2, [r7, #3]
 8004680:	4611      	mov	r1, r2
 8004682:	4618      	mov	r0, r3
 8004684:	f003 fb97 	bl	8007db6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8004688:	78fb      	ldrb	r3, [r7, #3]
 800468a:	015a      	lsls	r2, r3, #5
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	4413      	add	r3, r2
 8004690:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004694:	461a      	mov	r2, r3
 8004696:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800469a:	6093      	str	r3, [r2, #8]
 800469c:	e1ee      	b.n	8004a7c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	78fa      	ldrb	r2, [r7, #3]
 80046a4:	4611      	mov	r1, r2
 80046a6:	4618      	mov	r0, r3
 80046a8:	f002 fde1 	bl	800726e <USB_ReadChInterrupts>
 80046ac:	4603      	mov	r3, r0
 80046ae:	f003 0302 	and.w	r3, r3, #2
 80046b2:	2b02      	cmp	r3, #2
 80046b4:	f040 81df 	bne.w	8004a76 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80046b8:	78fb      	ldrb	r3, [r7, #3]
 80046ba:	015a      	lsls	r2, r3, #5
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	4413      	add	r3, r2
 80046c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046c4:	461a      	mov	r2, r3
 80046c6:	2302      	movs	r3, #2
 80046c8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80046ca:	78fa      	ldrb	r2, [r7, #3]
 80046cc:	6879      	ldr	r1, [r7, #4]
 80046ce:	4613      	mov	r3, r2
 80046d0:	011b      	lsls	r3, r3, #4
 80046d2:	1a9b      	subs	r3, r3, r2
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	440b      	add	r3, r1
 80046d8:	334d      	adds	r3, #77	@ 0x4d
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	2b01      	cmp	r3, #1
 80046de:	f040 8093 	bne.w	8004808 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80046e2:	78fa      	ldrb	r2, [r7, #3]
 80046e4:	6879      	ldr	r1, [r7, #4]
 80046e6:	4613      	mov	r3, r2
 80046e8:	011b      	lsls	r3, r3, #4
 80046ea:	1a9b      	subs	r3, r3, r2
 80046ec:	009b      	lsls	r3, r3, #2
 80046ee:	440b      	add	r3, r1
 80046f0:	334d      	adds	r3, #77	@ 0x4d
 80046f2:	2202      	movs	r2, #2
 80046f4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80046f6:	78fa      	ldrb	r2, [r7, #3]
 80046f8:	6879      	ldr	r1, [r7, #4]
 80046fa:	4613      	mov	r3, r2
 80046fc:	011b      	lsls	r3, r3, #4
 80046fe:	1a9b      	subs	r3, r3, r2
 8004700:	009b      	lsls	r3, r3, #2
 8004702:	440b      	add	r3, r1
 8004704:	334c      	adds	r3, #76	@ 0x4c
 8004706:	2201      	movs	r2, #1
 8004708:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800470a:	78fa      	ldrb	r2, [r7, #3]
 800470c:	6879      	ldr	r1, [r7, #4]
 800470e:	4613      	mov	r3, r2
 8004710:	011b      	lsls	r3, r3, #4
 8004712:	1a9b      	subs	r3, r3, r2
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	440b      	add	r3, r1
 8004718:	3326      	adds	r3, #38	@ 0x26
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	2b02      	cmp	r3, #2
 800471e:	d00b      	beq.n	8004738 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8004720:	78fa      	ldrb	r2, [r7, #3]
 8004722:	6879      	ldr	r1, [r7, #4]
 8004724:	4613      	mov	r3, r2
 8004726:	011b      	lsls	r3, r3, #4
 8004728:	1a9b      	subs	r3, r3, r2
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	440b      	add	r3, r1
 800472e:	3326      	adds	r3, #38	@ 0x26
 8004730:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004732:	2b03      	cmp	r3, #3
 8004734:	f040 8190 	bne.w	8004a58 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	799b      	ldrb	r3, [r3, #6]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d115      	bne.n	800476c <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8004740:	78fa      	ldrb	r2, [r7, #3]
 8004742:	6879      	ldr	r1, [r7, #4]
 8004744:	4613      	mov	r3, r2
 8004746:	011b      	lsls	r3, r3, #4
 8004748:	1a9b      	subs	r3, r3, r2
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	440b      	add	r3, r1
 800474e:	333d      	adds	r3, #61	@ 0x3d
 8004750:	781b      	ldrb	r3, [r3, #0]
 8004752:	78fa      	ldrb	r2, [r7, #3]
 8004754:	f083 0301 	eor.w	r3, r3, #1
 8004758:	b2d8      	uxtb	r0, r3
 800475a:	6879      	ldr	r1, [r7, #4]
 800475c:	4613      	mov	r3, r2
 800475e:	011b      	lsls	r3, r3, #4
 8004760:	1a9b      	subs	r3, r3, r2
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	440b      	add	r3, r1
 8004766:	333d      	adds	r3, #61	@ 0x3d
 8004768:	4602      	mov	r2, r0
 800476a:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	799b      	ldrb	r3, [r3, #6]
 8004770:	2b01      	cmp	r3, #1
 8004772:	f040 8171 	bne.w	8004a58 <HCD_HC_OUT_IRQHandler+0x954>
 8004776:	78fa      	ldrb	r2, [r7, #3]
 8004778:	6879      	ldr	r1, [r7, #4]
 800477a:	4613      	mov	r3, r2
 800477c:	011b      	lsls	r3, r3, #4
 800477e:	1a9b      	subs	r3, r3, r2
 8004780:	009b      	lsls	r3, r3, #2
 8004782:	440b      	add	r3, r1
 8004784:	3334      	adds	r3, #52	@ 0x34
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2b00      	cmp	r3, #0
 800478a:	f000 8165 	beq.w	8004a58 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 800478e:	78fa      	ldrb	r2, [r7, #3]
 8004790:	6879      	ldr	r1, [r7, #4]
 8004792:	4613      	mov	r3, r2
 8004794:	011b      	lsls	r3, r3, #4
 8004796:	1a9b      	subs	r3, r3, r2
 8004798:	009b      	lsls	r3, r3, #2
 800479a:	440b      	add	r3, r1
 800479c:	3334      	adds	r3, #52	@ 0x34
 800479e:	6819      	ldr	r1, [r3, #0]
 80047a0:	78fa      	ldrb	r2, [r7, #3]
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	4613      	mov	r3, r2
 80047a6:	011b      	lsls	r3, r3, #4
 80047a8:	1a9b      	subs	r3, r3, r2
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	4403      	add	r3, r0
 80047ae:	3328      	adds	r3, #40	@ 0x28
 80047b0:	881b      	ldrh	r3, [r3, #0]
 80047b2:	440b      	add	r3, r1
 80047b4:	1e59      	subs	r1, r3, #1
 80047b6:	78fa      	ldrb	r2, [r7, #3]
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	4613      	mov	r3, r2
 80047bc:	011b      	lsls	r3, r3, #4
 80047be:	1a9b      	subs	r3, r3, r2
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	4403      	add	r3, r0
 80047c4:	3328      	adds	r3, #40	@ 0x28
 80047c6:	881b      	ldrh	r3, [r3, #0]
 80047c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80047cc:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	f003 0301 	and.w	r3, r3, #1
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	f000 813f 	beq.w	8004a58 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80047da:	78fa      	ldrb	r2, [r7, #3]
 80047dc:	6879      	ldr	r1, [r7, #4]
 80047de:	4613      	mov	r3, r2
 80047e0:	011b      	lsls	r3, r3, #4
 80047e2:	1a9b      	subs	r3, r3, r2
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	440b      	add	r3, r1
 80047e8:	333d      	adds	r3, #61	@ 0x3d
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	78fa      	ldrb	r2, [r7, #3]
 80047ee:	f083 0301 	eor.w	r3, r3, #1
 80047f2:	b2d8      	uxtb	r0, r3
 80047f4:	6879      	ldr	r1, [r7, #4]
 80047f6:	4613      	mov	r3, r2
 80047f8:	011b      	lsls	r3, r3, #4
 80047fa:	1a9b      	subs	r3, r3, r2
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	440b      	add	r3, r1
 8004800:	333d      	adds	r3, #61	@ 0x3d
 8004802:	4602      	mov	r2, r0
 8004804:	701a      	strb	r2, [r3, #0]
 8004806:	e127      	b.n	8004a58 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004808:	78fa      	ldrb	r2, [r7, #3]
 800480a:	6879      	ldr	r1, [r7, #4]
 800480c:	4613      	mov	r3, r2
 800480e:	011b      	lsls	r3, r3, #4
 8004810:	1a9b      	subs	r3, r3, r2
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	440b      	add	r3, r1
 8004816:	334d      	adds	r3, #77	@ 0x4d
 8004818:	781b      	ldrb	r3, [r3, #0]
 800481a:	2b03      	cmp	r3, #3
 800481c:	d120      	bne.n	8004860 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800481e:	78fa      	ldrb	r2, [r7, #3]
 8004820:	6879      	ldr	r1, [r7, #4]
 8004822:	4613      	mov	r3, r2
 8004824:	011b      	lsls	r3, r3, #4
 8004826:	1a9b      	subs	r3, r3, r2
 8004828:	009b      	lsls	r3, r3, #2
 800482a:	440b      	add	r3, r1
 800482c:	334d      	adds	r3, #77	@ 0x4d
 800482e:	2202      	movs	r2, #2
 8004830:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004832:	78fa      	ldrb	r2, [r7, #3]
 8004834:	6879      	ldr	r1, [r7, #4]
 8004836:	4613      	mov	r3, r2
 8004838:	011b      	lsls	r3, r3, #4
 800483a:	1a9b      	subs	r3, r3, r2
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	440b      	add	r3, r1
 8004840:	331b      	adds	r3, #27
 8004842:	781b      	ldrb	r3, [r3, #0]
 8004844:	2b01      	cmp	r3, #1
 8004846:	f040 8107 	bne.w	8004a58 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800484a:	78fa      	ldrb	r2, [r7, #3]
 800484c:	6879      	ldr	r1, [r7, #4]
 800484e:	4613      	mov	r3, r2
 8004850:	011b      	lsls	r3, r3, #4
 8004852:	1a9b      	subs	r3, r3, r2
 8004854:	009b      	lsls	r3, r3, #2
 8004856:	440b      	add	r3, r1
 8004858:	334c      	adds	r3, #76	@ 0x4c
 800485a:	2202      	movs	r2, #2
 800485c:	701a      	strb	r2, [r3, #0]
 800485e:	e0fb      	b.n	8004a58 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004860:	78fa      	ldrb	r2, [r7, #3]
 8004862:	6879      	ldr	r1, [r7, #4]
 8004864:	4613      	mov	r3, r2
 8004866:	011b      	lsls	r3, r3, #4
 8004868:	1a9b      	subs	r3, r3, r2
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	440b      	add	r3, r1
 800486e:	334d      	adds	r3, #77	@ 0x4d
 8004870:	781b      	ldrb	r3, [r3, #0]
 8004872:	2b04      	cmp	r3, #4
 8004874:	d13a      	bne.n	80048ec <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004876:	78fa      	ldrb	r2, [r7, #3]
 8004878:	6879      	ldr	r1, [r7, #4]
 800487a:	4613      	mov	r3, r2
 800487c:	011b      	lsls	r3, r3, #4
 800487e:	1a9b      	subs	r3, r3, r2
 8004880:	009b      	lsls	r3, r3, #2
 8004882:	440b      	add	r3, r1
 8004884:	334d      	adds	r3, #77	@ 0x4d
 8004886:	2202      	movs	r2, #2
 8004888:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800488a:	78fa      	ldrb	r2, [r7, #3]
 800488c:	6879      	ldr	r1, [r7, #4]
 800488e:	4613      	mov	r3, r2
 8004890:	011b      	lsls	r3, r3, #4
 8004892:	1a9b      	subs	r3, r3, r2
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	440b      	add	r3, r1
 8004898:	334c      	adds	r3, #76	@ 0x4c
 800489a:	2202      	movs	r2, #2
 800489c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800489e:	78fa      	ldrb	r2, [r7, #3]
 80048a0:	6879      	ldr	r1, [r7, #4]
 80048a2:	4613      	mov	r3, r2
 80048a4:	011b      	lsls	r3, r3, #4
 80048a6:	1a9b      	subs	r3, r3, r2
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	440b      	add	r3, r1
 80048ac:	331b      	adds	r3, #27
 80048ae:	781b      	ldrb	r3, [r3, #0]
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	f040 80d1 	bne.w	8004a58 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80048b6:	78fa      	ldrb	r2, [r7, #3]
 80048b8:	6879      	ldr	r1, [r7, #4]
 80048ba:	4613      	mov	r3, r2
 80048bc:	011b      	lsls	r3, r3, #4
 80048be:	1a9b      	subs	r3, r3, r2
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	440b      	add	r3, r1
 80048c4:	331b      	adds	r3, #27
 80048c6:	2200      	movs	r2, #0
 80048c8:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80048ca:	78fb      	ldrb	r3, [r7, #3]
 80048cc:	015a      	lsls	r2, r3, #5
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	4413      	add	r3, r2
 80048d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	78fa      	ldrb	r2, [r7, #3]
 80048da:	0151      	lsls	r1, r2, #5
 80048dc:	693a      	ldr	r2, [r7, #16]
 80048de:	440a      	add	r2, r1
 80048e0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80048e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80048e8:	6053      	str	r3, [r2, #4]
 80048ea:	e0b5      	b.n	8004a58 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80048ec:	78fa      	ldrb	r2, [r7, #3]
 80048ee:	6879      	ldr	r1, [r7, #4]
 80048f0:	4613      	mov	r3, r2
 80048f2:	011b      	lsls	r3, r3, #4
 80048f4:	1a9b      	subs	r3, r3, r2
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	440b      	add	r3, r1
 80048fa:	334d      	adds	r3, #77	@ 0x4d
 80048fc:	781b      	ldrb	r3, [r3, #0]
 80048fe:	2b05      	cmp	r3, #5
 8004900:	d114      	bne.n	800492c <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004902:	78fa      	ldrb	r2, [r7, #3]
 8004904:	6879      	ldr	r1, [r7, #4]
 8004906:	4613      	mov	r3, r2
 8004908:	011b      	lsls	r3, r3, #4
 800490a:	1a9b      	subs	r3, r3, r2
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	440b      	add	r3, r1
 8004910:	334d      	adds	r3, #77	@ 0x4d
 8004912:	2202      	movs	r2, #2
 8004914:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8004916:	78fa      	ldrb	r2, [r7, #3]
 8004918:	6879      	ldr	r1, [r7, #4]
 800491a:	4613      	mov	r3, r2
 800491c:	011b      	lsls	r3, r3, #4
 800491e:	1a9b      	subs	r3, r3, r2
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	440b      	add	r3, r1
 8004924:	334c      	adds	r3, #76	@ 0x4c
 8004926:	2202      	movs	r2, #2
 8004928:	701a      	strb	r2, [r3, #0]
 800492a:	e095      	b.n	8004a58 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800492c:	78fa      	ldrb	r2, [r7, #3]
 800492e:	6879      	ldr	r1, [r7, #4]
 8004930:	4613      	mov	r3, r2
 8004932:	011b      	lsls	r3, r3, #4
 8004934:	1a9b      	subs	r3, r3, r2
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	440b      	add	r3, r1
 800493a:	334d      	adds	r3, #77	@ 0x4d
 800493c:	781b      	ldrb	r3, [r3, #0]
 800493e:	2b06      	cmp	r3, #6
 8004940:	d114      	bne.n	800496c <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004942:	78fa      	ldrb	r2, [r7, #3]
 8004944:	6879      	ldr	r1, [r7, #4]
 8004946:	4613      	mov	r3, r2
 8004948:	011b      	lsls	r3, r3, #4
 800494a:	1a9b      	subs	r3, r3, r2
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	440b      	add	r3, r1
 8004950:	334d      	adds	r3, #77	@ 0x4d
 8004952:	2202      	movs	r2, #2
 8004954:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8004956:	78fa      	ldrb	r2, [r7, #3]
 8004958:	6879      	ldr	r1, [r7, #4]
 800495a:	4613      	mov	r3, r2
 800495c:	011b      	lsls	r3, r3, #4
 800495e:	1a9b      	subs	r3, r3, r2
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	440b      	add	r3, r1
 8004964:	334c      	adds	r3, #76	@ 0x4c
 8004966:	2205      	movs	r2, #5
 8004968:	701a      	strb	r2, [r3, #0]
 800496a:	e075      	b.n	8004a58 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800496c:	78fa      	ldrb	r2, [r7, #3]
 800496e:	6879      	ldr	r1, [r7, #4]
 8004970:	4613      	mov	r3, r2
 8004972:	011b      	lsls	r3, r3, #4
 8004974:	1a9b      	subs	r3, r3, r2
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	440b      	add	r3, r1
 800497a:	334d      	adds	r3, #77	@ 0x4d
 800497c:	781b      	ldrb	r3, [r3, #0]
 800497e:	2b07      	cmp	r3, #7
 8004980:	d00a      	beq.n	8004998 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004982:	78fa      	ldrb	r2, [r7, #3]
 8004984:	6879      	ldr	r1, [r7, #4]
 8004986:	4613      	mov	r3, r2
 8004988:	011b      	lsls	r3, r3, #4
 800498a:	1a9b      	subs	r3, r3, r2
 800498c:	009b      	lsls	r3, r3, #2
 800498e:	440b      	add	r3, r1
 8004990:	334d      	adds	r3, #77	@ 0x4d
 8004992:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004994:	2b09      	cmp	r3, #9
 8004996:	d170      	bne.n	8004a7a <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004998:	78fa      	ldrb	r2, [r7, #3]
 800499a:	6879      	ldr	r1, [r7, #4]
 800499c:	4613      	mov	r3, r2
 800499e:	011b      	lsls	r3, r3, #4
 80049a0:	1a9b      	subs	r3, r3, r2
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	440b      	add	r3, r1
 80049a6:	334d      	adds	r3, #77	@ 0x4d
 80049a8:	2202      	movs	r2, #2
 80049aa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80049ac:	78fa      	ldrb	r2, [r7, #3]
 80049ae:	6879      	ldr	r1, [r7, #4]
 80049b0:	4613      	mov	r3, r2
 80049b2:	011b      	lsls	r3, r3, #4
 80049b4:	1a9b      	subs	r3, r3, r2
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	440b      	add	r3, r1
 80049ba:	3344      	adds	r3, #68	@ 0x44
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	1c59      	adds	r1, r3, #1
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	4613      	mov	r3, r2
 80049c4:	011b      	lsls	r3, r3, #4
 80049c6:	1a9b      	subs	r3, r3, r2
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	4403      	add	r3, r0
 80049cc:	3344      	adds	r3, #68	@ 0x44
 80049ce:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80049d0:	78fa      	ldrb	r2, [r7, #3]
 80049d2:	6879      	ldr	r1, [r7, #4]
 80049d4:	4613      	mov	r3, r2
 80049d6:	011b      	lsls	r3, r3, #4
 80049d8:	1a9b      	subs	r3, r3, r2
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	440b      	add	r3, r1
 80049de:	3344      	adds	r3, #68	@ 0x44
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	2b02      	cmp	r3, #2
 80049e4:	d914      	bls.n	8004a10 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80049e6:	78fa      	ldrb	r2, [r7, #3]
 80049e8:	6879      	ldr	r1, [r7, #4]
 80049ea:	4613      	mov	r3, r2
 80049ec:	011b      	lsls	r3, r3, #4
 80049ee:	1a9b      	subs	r3, r3, r2
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	440b      	add	r3, r1
 80049f4:	3344      	adds	r3, #68	@ 0x44
 80049f6:	2200      	movs	r2, #0
 80049f8:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80049fa:	78fa      	ldrb	r2, [r7, #3]
 80049fc:	6879      	ldr	r1, [r7, #4]
 80049fe:	4613      	mov	r3, r2
 8004a00:	011b      	lsls	r3, r3, #4
 8004a02:	1a9b      	subs	r3, r3, r2
 8004a04:	009b      	lsls	r3, r3, #2
 8004a06:	440b      	add	r3, r1
 8004a08:	334c      	adds	r3, #76	@ 0x4c
 8004a0a:	2204      	movs	r2, #4
 8004a0c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004a0e:	e022      	b.n	8004a56 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004a10:	78fa      	ldrb	r2, [r7, #3]
 8004a12:	6879      	ldr	r1, [r7, #4]
 8004a14:	4613      	mov	r3, r2
 8004a16:	011b      	lsls	r3, r3, #4
 8004a18:	1a9b      	subs	r3, r3, r2
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	440b      	add	r3, r1
 8004a1e:	334c      	adds	r3, #76	@ 0x4c
 8004a20:	2202      	movs	r2, #2
 8004a22:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004a24:	78fb      	ldrb	r3, [r7, #3]
 8004a26:	015a      	lsls	r2, r3, #5
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	4413      	add	r3, r2
 8004a2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004a3a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004a42:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004a44:	78fb      	ldrb	r3, [r7, #3]
 8004a46:	015a      	lsls	r2, r3, #5
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	4413      	add	r3, r2
 8004a4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a50:	461a      	mov	r2, r3
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004a56:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004a58:	78fa      	ldrb	r2, [r7, #3]
 8004a5a:	6879      	ldr	r1, [r7, #4]
 8004a5c:	4613      	mov	r3, r2
 8004a5e:	011b      	lsls	r3, r3, #4
 8004a60:	1a9b      	subs	r3, r3, r2
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	440b      	add	r3, r1
 8004a66:	334c      	adds	r3, #76	@ 0x4c
 8004a68:	781a      	ldrb	r2, [r3, #0]
 8004a6a:	78fb      	ldrb	r3, [r7, #3]
 8004a6c:	4619      	mov	r1, r3
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f005 fcfa 	bl	800a468 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004a74:	e002      	b.n	8004a7c <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8004a76:	bf00      	nop
 8004a78:	e000      	b.n	8004a7c <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8004a7a:	bf00      	nop
  }
}
 8004a7c:	3718      	adds	r7, #24
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}

08004a82 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004a82:	b580      	push	{r7, lr}
 8004a84:	b08a      	sub	sp, #40	@ 0x28
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a92:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	6a1b      	ldr	r3, [r3, #32]
 8004a9a:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004a9c:	69fb      	ldr	r3, [r7, #28]
 8004a9e:	f003 030f 	and.w	r3, r3, #15
 8004aa2:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004aa4:	69fb      	ldr	r3, [r7, #28]
 8004aa6:	0c5b      	lsrs	r3, r3, #17
 8004aa8:	f003 030f 	and.w	r3, r3, #15
 8004aac:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004aae:	69fb      	ldr	r3, [r7, #28]
 8004ab0:	091b      	lsrs	r3, r3, #4
 8004ab2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004ab6:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	d004      	beq.n	8004ac8 <HCD_RXQLVL_IRQHandler+0x46>
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	2b05      	cmp	r3, #5
 8004ac2:	f000 80b6 	beq.w	8004c32 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004ac6:	e0b7      	b.n	8004c38 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	f000 80b3 	beq.w	8004c36 <HCD_RXQLVL_IRQHandler+0x1b4>
 8004ad0:	6879      	ldr	r1, [r7, #4]
 8004ad2:	69ba      	ldr	r2, [r7, #24]
 8004ad4:	4613      	mov	r3, r2
 8004ad6:	011b      	lsls	r3, r3, #4
 8004ad8:	1a9b      	subs	r3, r3, r2
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	440b      	add	r3, r1
 8004ade:	332c      	adds	r3, #44	@ 0x2c
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	f000 80a7 	beq.w	8004c36 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8004ae8:	6879      	ldr	r1, [r7, #4]
 8004aea:	69ba      	ldr	r2, [r7, #24]
 8004aec:	4613      	mov	r3, r2
 8004aee:	011b      	lsls	r3, r3, #4
 8004af0:	1a9b      	subs	r3, r3, r2
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	440b      	add	r3, r1
 8004af6:	3338      	adds	r3, #56	@ 0x38
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	18d1      	adds	r1, r2, r3
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	69ba      	ldr	r2, [r7, #24]
 8004b02:	4613      	mov	r3, r2
 8004b04:	011b      	lsls	r3, r3, #4
 8004b06:	1a9b      	subs	r3, r3, r2
 8004b08:	009b      	lsls	r3, r3, #2
 8004b0a:	4403      	add	r3, r0
 8004b0c:	3334      	adds	r3, #52	@ 0x34
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4299      	cmp	r1, r3
 8004b12:	f200 8083 	bhi.w	8004c1c <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6818      	ldr	r0, [r3, #0]
 8004b1a:	6879      	ldr	r1, [r7, #4]
 8004b1c:	69ba      	ldr	r2, [r7, #24]
 8004b1e:	4613      	mov	r3, r2
 8004b20:	011b      	lsls	r3, r3, #4
 8004b22:	1a9b      	subs	r3, r3, r2
 8004b24:	009b      	lsls	r3, r3, #2
 8004b26:	440b      	add	r3, r1
 8004b28:	332c      	adds	r3, #44	@ 0x2c
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	693a      	ldr	r2, [r7, #16]
 8004b2e:	b292      	uxth	r2, r2
 8004b30:	4619      	mov	r1, r3
 8004b32:	f002 fb31 	bl	8007198 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8004b36:	6879      	ldr	r1, [r7, #4]
 8004b38:	69ba      	ldr	r2, [r7, #24]
 8004b3a:	4613      	mov	r3, r2
 8004b3c:	011b      	lsls	r3, r3, #4
 8004b3e:	1a9b      	subs	r3, r3, r2
 8004b40:	009b      	lsls	r3, r3, #2
 8004b42:	440b      	add	r3, r1
 8004b44:	332c      	adds	r3, #44	@ 0x2c
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	18d1      	adds	r1, r2, r3
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	69ba      	ldr	r2, [r7, #24]
 8004b50:	4613      	mov	r3, r2
 8004b52:	011b      	lsls	r3, r3, #4
 8004b54:	1a9b      	subs	r3, r3, r2
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	4403      	add	r3, r0
 8004b5a:	332c      	adds	r3, #44	@ 0x2c
 8004b5c:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8004b5e:	6879      	ldr	r1, [r7, #4]
 8004b60:	69ba      	ldr	r2, [r7, #24]
 8004b62:	4613      	mov	r3, r2
 8004b64:	011b      	lsls	r3, r3, #4
 8004b66:	1a9b      	subs	r3, r3, r2
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	440b      	add	r3, r1
 8004b6c:	3338      	adds	r3, #56	@ 0x38
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	18d1      	adds	r1, r2, r3
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	69ba      	ldr	r2, [r7, #24]
 8004b78:	4613      	mov	r3, r2
 8004b7a:	011b      	lsls	r3, r3, #4
 8004b7c:	1a9b      	subs	r3, r3, r2
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	4403      	add	r3, r0
 8004b82:	3338      	adds	r3, #56	@ 0x38
 8004b84:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004b86:	69bb      	ldr	r3, [r7, #24]
 8004b88:	015a      	lsls	r2, r3, #5
 8004b8a:	6a3b      	ldr	r3, [r7, #32]
 8004b8c:	4413      	add	r3, r2
 8004b8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b92:	691b      	ldr	r3, [r3, #16]
 8004b94:	0cdb      	lsrs	r3, r3, #19
 8004b96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b9a:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004b9c:	6879      	ldr	r1, [r7, #4]
 8004b9e:	69ba      	ldr	r2, [r7, #24]
 8004ba0:	4613      	mov	r3, r2
 8004ba2:	011b      	lsls	r3, r3, #4
 8004ba4:	1a9b      	subs	r3, r3, r2
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	440b      	add	r3, r1
 8004baa:	3328      	adds	r3, #40	@ 0x28
 8004bac:	881b      	ldrh	r3, [r3, #0]
 8004bae:	461a      	mov	r2, r3
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d13f      	bne.n	8004c36 <HCD_RXQLVL_IRQHandler+0x1b4>
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d03c      	beq.n	8004c36 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8004bbc:	69bb      	ldr	r3, [r7, #24]
 8004bbe:	015a      	lsls	r2, r3, #5
 8004bc0:	6a3b      	ldr	r3, [r7, #32]
 8004bc2:	4413      	add	r3, r2
 8004bc4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004bd2:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004bda:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8004bdc:	69bb      	ldr	r3, [r7, #24]
 8004bde:	015a      	lsls	r2, r3, #5
 8004be0:	6a3b      	ldr	r3, [r7, #32]
 8004be2:	4413      	add	r3, r2
 8004be4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004be8:	461a      	mov	r2, r3
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8004bee:	6879      	ldr	r1, [r7, #4]
 8004bf0:	69ba      	ldr	r2, [r7, #24]
 8004bf2:	4613      	mov	r3, r2
 8004bf4:	011b      	lsls	r3, r3, #4
 8004bf6:	1a9b      	subs	r3, r3, r2
 8004bf8:	009b      	lsls	r3, r3, #2
 8004bfa:	440b      	add	r3, r1
 8004bfc:	333c      	adds	r3, #60	@ 0x3c
 8004bfe:	781b      	ldrb	r3, [r3, #0]
 8004c00:	f083 0301 	eor.w	r3, r3, #1
 8004c04:	b2d8      	uxtb	r0, r3
 8004c06:	6879      	ldr	r1, [r7, #4]
 8004c08:	69ba      	ldr	r2, [r7, #24]
 8004c0a:	4613      	mov	r3, r2
 8004c0c:	011b      	lsls	r3, r3, #4
 8004c0e:	1a9b      	subs	r3, r3, r2
 8004c10:	009b      	lsls	r3, r3, #2
 8004c12:	440b      	add	r3, r1
 8004c14:	333c      	adds	r3, #60	@ 0x3c
 8004c16:	4602      	mov	r2, r0
 8004c18:	701a      	strb	r2, [r3, #0]
      break;
 8004c1a:	e00c      	b.n	8004c36 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8004c1c:	6879      	ldr	r1, [r7, #4]
 8004c1e:	69ba      	ldr	r2, [r7, #24]
 8004c20:	4613      	mov	r3, r2
 8004c22:	011b      	lsls	r3, r3, #4
 8004c24:	1a9b      	subs	r3, r3, r2
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	440b      	add	r3, r1
 8004c2a:	334c      	adds	r3, #76	@ 0x4c
 8004c2c:	2204      	movs	r2, #4
 8004c2e:	701a      	strb	r2, [r3, #0]
      break;
 8004c30:	e001      	b.n	8004c36 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8004c32:	bf00      	nop
 8004c34:	e000      	b.n	8004c38 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8004c36:	bf00      	nop
  }
}
 8004c38:	bf00      	nop
 8004c3a:	3728      	adds	r7, #40	@ 0x28
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}

08004c40 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b086      	sub	sp, #24
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8004c6c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	f003 0302 	and.w	r3, r3, #2
 8004c74:	2b02      	cmp	r3, #2
 8004c76:	d10b      	bne.n	8004c90 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f003 0301 	and.w	r3, r3, #1
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d102      	bne.n	8004c88 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f005 fbd4 	bl	800a430 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	f043 0302 	orr.w	r3, r3, #2
 8004c8e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f003 0308 	and.w	r3, r3, #8
 8004c96:	2b08      	cmp	r3, #8
 8004c98:	d132      	bne.n	8004d00 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	f043 0308 	orr.w	r3, r3, #8
 8004ca0:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f003 0304 	and.w	r3, r3, #4
 8004ca8:	2b04      	cmp	r3, #4
 8004caa:	d126      	bne.n	8004cfa <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	7a5b      	ldrb	r3, [r3, #9]
 8004cb0:	2b02      	cmp	r3, #2
 8004cb2:	d113      	bne.n	8004cdc <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8004cba:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004cbe:	d106      	bne.n	8004cce <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	2102      	movs	r1, #2
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f002 fbf6 	bl	80074b8 <USB_InitFSLSPClkSel>
 8004ccc:	e011      	b.n	8004cf2 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	2101      	movs	r1, #1
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f002 fbef 	bl	80074b8 <USB_InitFSLSPClkSel>
 8004cda:	e00a      	b.n	8004cf2 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	79db      	ldrb	r3, [r3, #7]
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d106      	bne.n	8004cf2 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004cea:	461a      	mov	r2, r3
 8004cec:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8004cf0:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f005 fbc6 	bl	800a484 <HAL_HCD_PortEnabled_Callback>
 8004cf8:	e002      	b.n	8004d00 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f005 fbd0 	bl	800a4a0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f003 0320 	and.w	r3, r3, #32
 8004d06:	2b20      	cmp	r3, #32
 8004d08:	d103      	bne.n	8004d12 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	f043 0320 	orr.w	r3, r3, #32
 8004d10:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004d18:	461a      	mov	r2, r3
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	6013      	str	r3, [r2, #0]
}
 8004d1e:	bf00      	nop
 8004d20:	3718      	adds	r7, #24
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
	...

08004d28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b084      	sub	sp, #16
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d101      	bne.n	8004d3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e12b      	b.n	8004f92 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d106      	bne.n	8004d54 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f7fd f98c 	bl	800206c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2224      	movs	r2, #36	@ 0x24
 8004d58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f022 0201 	bic.w	r2, r2, #1
 8004d6a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004d7a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004d8a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004d8c:	f001 fc60 	bl	8006650 <HAL_RCC_GetPCLK1Freq>
 8004d90:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	4a81      	ldr	r2, [pc, #516]	@ (8004f9c <HAL_I2C_Init+0x274>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d807      	bhi.n	8004dac <HAL_I2C_Init+0x84>
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	4a80      	ldr	r2, [pc, #512]	@ (8004fa0 <HAL_I2C_Init+0x278>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	bf94      	ite	ls
 8004da4:	2301      	movls	r3, #1
 8004da6:	2300      	movhi	r3, #0
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	e006      	b.n	8004dba <HAL_I2C_Init+0x92>
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	4a7d      	ldr	r2, [pc, #500]	@ (8004fa4 <HAL_I2C_Init+0x27c>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	bf94      	ite	ls
 8004db4:	2301      	movls	r3, #1
 8004db6:	2300      	movhi	r3, #0
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d001      	beq.n	8004dc2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e0e7      	b.n	8004f92 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	4a78      	ldr	r2, [pc, #480]	@ (8004fa8 <HAL_I2C_Init+0x280>)
 8004dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8004dca:	0c9b      	lsrs	r3, r3, #18
 8004dcc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	68ba      	ldr	r2, [r7, #8]
 8004dde:	430a      	orrs	r2, r1
 8004de0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	6a1b      	ldr	r3, [r3, #32]
 8004de8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	4a6a      	ldr	r2, [pc, #424]	@ (8004f9c <HAL_I2C_Init+0x274>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d802      	bhi.n	8004dfc <HAL_I2C_Init+0xd4>
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	3301      	adds	r3, #1
 8004dfa:	e009      	b.n	8004e10 <HAL_I2C_Init+0xe8>
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004e02:	fb02 f303 	mul.w	r3, r2, r3
 8004e06:	4a69      	ldr	r2, [pc, #420]	@ (8004fac <HAL_I2C_Init+0x284>)
 8004e08:	fba2 2303 	umull	r2, r3, r2, r3
 8004e0c:	099b      	lsrs	r3, r3, #6
 8004e0e:	3301      	adds	r3, #1
 8004e10:	687a      	ldr	r2, [r7, #4]
 8004e12:	6812      	ldr	r2, [r2, #0]
 8004e14:	430b      	orrs	r3, r1
 8004e16:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	69db      	ldr	r3, [r3, #28]
 8004e1e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004e22:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	495c      	ldr	r1, [pc, #368]	@ (8004f9c <HAL_I2C_Init+0x274>)
 8004e2c:	428b      	cmp	r3, r1
 8004e2e:	d819      	bhi.n	8004e64 <HAL_I2C_Init+0x13c>
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	1e59      	subs	r1, r3, #1
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	005b      	lsls	r3, r3, #1
 8004e3a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e3e:	1c59      	adds	r1, r3, #1
 8004e40:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004e44:	400b      	ands	r3, r1
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d00a      	beq.n	8004e60 <HAL_I2C_Init+0x138>
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	1e59      	subs	r1, r3, #1
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	005b      	lsls	r3, r3, #1
 8004e54:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e58:	3301      	adds	r3, #1
 8004e5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e5e:	e051      	b.n	8004f04 <HAL_I2C_Init+0x1dc>
 8004e60:	2304      	movs	r3, #4
 8004e62:	e04f      	b.n	8004f04 <HAL_I2C_Init+0x1dc>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d111      	bne.n	8004e90 <HAL_I2C_Init+0x168>
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	1e58      	subs	r0, r3, #1
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6859      	ldr	r1, [r3, #4]
 8004e74:	460b      	mov	r3, r1
 8004e76:	005b      	lsls	r3, r3, #1
 8004e78:	440b      	add	r3, r1
 8004e7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e7e:	3301      	adds	r3, #1
 8004e80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	bf0c      	ite	eq
 8004e88:	2301      	moveq	r3, #1
 8004e8a:	2300      	movne	r3, #0
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	e012      	b.n	8004eb6 <HAL_I2C_Init+0x18e>
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	1e58      	subs	r0, r3, #1
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6859      	ldr	r1, [r3, #4]
 8004e98:	460b      	mov	r3, r1
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	440b      	add	r3, r1
 8004e9e:	0099      	lsls	r1, r3, #2
 8004ea0:	440b      	add	r3, r1
 8004ea2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ea6:	3301      	adds	r3, #1
 8004ea8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	bf0c      	ite	eq
 8004eb0:	2301      	moveq	r3, #1
 8004eb2:	2300      	movne	r3, #0
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d001      	beq.n	8004ebe <HAL_I2C_Init+0x196>
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e022      	b.n	8004f04 <HAL_I2C_Init+0x1dc>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d10e      	bne.n	8004ee4 <HAL_I2C_Init+0x1bc>
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	1e58      	subs	r0, r3, #1
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6859      	ldr	r1, [r3, #4]
 8004ece:	460b      	mov	r3, r1
 8004ed0:	005b      	lsls	r3, r3, #1
 8004ed2:	440b      	add	r3, r1
 8004ed4:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ed8:	3301      	adds	r3, #1
 8004eda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ede:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ee2:	e00f      	b.n	8004f04 <HAL_I2C_Init+0x1dc>
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	1e58      	subs	r0, r3, #1
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6859      	ldr	r1, [r3, #4]
 8004eec:	460b      	mov	r3, r1
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	440b      	add	r3, r1
 8004ef2:	0099      	lsls	r1, r3, #2
 8004ef4:	440b      	add	r3, r1
 8004ef6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004efa:	3301      	adds	r3, #1
 8004efc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f00:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004f04:	6879      	ldr	r1, [r7, #4]
 8004f06:	6809      	ldr	r1, [r1, #0]
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	69da      	ldr	r2, [r3, #28]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6a1b      	ldr	r3, [r3, #32]
 8004f1e:	431a      	orrs	r2, r3
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	430a      	orrs	r2, r1
 8004f26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004f32:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	6911      	ldr	r1, [r2, #16]
 8004f3a:	687a      	ldr	r2, [r7, #4]
 8004f3c:	68d2      	ldr	r2, [r2, #12]
 8004f3e:	4311      	orrs	r1, r2
 8004f40:	687a      	ldr	r2, [r7, #4]
 8004f42:	6812      	ldr	r2, [r2, #0]
 8004f44:	430b      	orrs	r3, r1
 8004f46:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	68db      	ldr	r3, [r3, #12]
 8004f4e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	695a      	ldr	r2, [r3, #20]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	699b      	ldr	r3, [r3, #24]
 8004f5a:	431a      	orrs	r2, r3
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	430a      	orrs	r2, r1
 8004f62:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	681a      	ldr	r2, [r3, #0]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f042 0201 	orr.w	r2, r2, #1
 8004f72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2200      	movs	r2, #0
 8004f78:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2220      	movs	r2, #32
 8004f7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004f90:	2300      	movs	r3, #0
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3710      	adds	r7, #16
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}
 8004f9a:	bf00      	nop
 8004f9c:	000186a0 	.word	0x000186a0
 8004fa0:	001e847f 	.word	0x001e847f
 8004fa4:	003d08ff 	.word	0x003d08ff
 8004fa8:	431bde83 	.word	0x431bde83
 8004fac:	10624dd3 	.word	0x10624dd3

08004fb0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b088      	sub	sp, #32
 8004fb4:	af02      	add	r7, sp, #8
 8004fb6:	60f8      	str	r0, [r7, #12]
 8004fb8:	4608      	mov	r0, r1
 8004fba:	4611      	mov	r1, r2
 8004fbc:	461a      	mov	r2, r3
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	817b      	strh	r3, [r7, #10]
 8004fc2:	460b      	mov	r3, r1
 8004fc4:	813b      	strh	r3, [r7, #8]
 8004fc6:	4613      	mov	r3, r2
 8004fc8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004fca:	f7fd fa81 	bl	80024d0 <HAL_GetTick>
 8004fce:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fd6:	b2db      	uxtb	r3, r3
 8004fd8:	2b20      	cmp	r3, #32
 8004fda:	f040 80d9 	bne.w	8005190 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	9300      	str	r3, [sp, #0]
 8004fe2:	2319      	movs	r3, #25
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	496d      	ldr	r1, [pc, #436]	@ (800519c <HAL_I2C_Mem_Write+0x1ec>)
 8004fe8:	68f8      	ldr	r0, [r7, #12]
 8004fea:	f000 fc8b 	bl	8005904 <I2C_WaitOnFlagUntilTimeout>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d001      	beq.n	8004ff8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004ff4:	2302      	movs	r3, #2
 8004ff6:	e0cc      	b.n	8005192 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d101      	bne.n	8005006 <HAL_I2C_Mem_Write+0x56>
 8005002:	2302      	movs	r3, #2
 8005004:	e0c5      	b.n	8005192 <HAL_I2C_Mem_Write+0x1e2>
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2201      	movs	r2, #1
 800500a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 0301 	and.w	r3, r3, #1
 8005018:	2b01      	cmp	r3, #1
 800501a:	d007      	beq.n	800502c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f042 0201 	orr.w	r2, r2, #1
 800502a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800503a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2221      	movs	r2, #33	@ 0x21
 8005040:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2240      	movs	r2, #64	@ 0x40
 8005048:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2200      	movs	r2, #0
 8005050:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	6a3a      	ldr	r2, [r7, #32]
 8005056:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800505c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005062:	b29a      	uxth	r2, r3
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	4a4d      	ldr	r2, [pc, #308]	@ (80051a0 <HAL_I2C_Mem_Write+0x1f0>)
 800506c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800506e:	88f8      	ldrh	r0, [r7, #6]
 8005070:	893a      	ldrh	r2, [r7, #8]
 8005072:	8979      	ldrh	r1, [r7, #10]
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	9301      	str	r3, [sp, #4]
 8005078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800507a:	9300      	str	r3, [sp, #0]
 800507c:	4603      	mov	r3, r0
 800507e:	68f8      	ldr	r0, [r7, #12]
 8005080:	f000 fac2 	bl	8005608 <I2C_RequestMemoryWrite>
 8005084:	4603      	mov	r3, r0
 8005086:	2b00      	cmp	r3, #0
 8005088:	d052      	beq.n	8005130 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	e081      	b.n	8005192 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800508e:	697a      	ldr	r2, [r7, #20]
 8005090:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005092:	68f8      	ldr	r0, [r7, #12]
 8005094:	f000 fd50 	bl	8005b38 <I2C_WaitOnTXEFlagUntilTimeout>
 8005098:	4603      	mov	r3, r0
 800509a:	2b00      	cmp	r3, #0
 800509c:	d00d      	beq.n	80050ba <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050a2:	2b04      	cmp	r3, #4
 80050a4:	d107      	bne.n	80050b6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80050b4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e06b      	b.n	8005192 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050be:	781a      	ldrb	r2, [r3, #0]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ca:	1c5a      	adds	r2, r3, #1
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050d4:	3b01      	subs	r3, #1
 80050d6:	b29a      	uxth	r2, r3
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	3b01      	subs	r3, #1
 80050e4:	b29a      	uxth	r2, r3
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	695b      	ldr	r3, [r3, #20]
 80050f0:	f003 0304 	and.w	r3, r3, #4
 80050f4:	2b04      	cmp	r3, #4
 80050f6:	d11b      	bne.n	8005130 <HAL_I2C_Mem_Write+0x180>
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d017      	beq.n	8005130 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005104:	781a      	ldrb	r2, [r3, #0]
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005110:	1c5a      	adds	r2, r3, #1
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800511a:	3b01      	subs	r3, #1
 800511c:	b29a      	uxth	r2, r3
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005126:	b29b      	uxth	r3, r3
 8005128:	3b01      	subs	r3, #1
 800512a:	b29a      	uxth	r2, r3
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005134:	2b00      	cmp	r3, #0
 8005136:	d1aa      	bne.n	800508e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005138:	697a      	ldr	r2, [r7, #20]
 800513a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800513c:	68f8      	ldr	r0, [r7, #12]
 800513e:	f000 fd43 	bl	8005bc8 <I2C_WaitOnBTFFlagUntilTimeout>
 8005142:	4603      	mov	r3, r0
 8005144:	2b00      	cmp	r3, #0
 8005146:	d00d      	beq.n	8005164 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800514c:	2b04      	cmp	r3, #4
 800514e:	d107      	bne.n	8005160 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800515e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005160:	2301      	movs	r3, #1
 8005162:	e016      	b.n	8005192 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005172:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2220      	movs	r2, #32
 8005178:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2200      	movs	r2, #0
 8005180:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2200      	movs	r2, #0
 8005188:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800518c:	2300      	movs	r3, #0
 800518e:	e000      	b.n	8005192 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005190:	2302      	movs	r3, #2
  }
}
 8005192:	4618      	mov	r0, r3
 8005194:	3718      	adds	r7, #24
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}
 800519a:	bf00      	nop
 800519c:	00100002 	.word	0x00100002
 80051a0:	ffff0000 	.word	0xffff0000

080051a4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b08c      	sub	sp, #48	@ 0x30
 80051a8:	af02      	add	r7, sp, #8
 80051aa:	60f8      	str	r0, [r7, #12]
 80051ac:	4608      	mov	r0, r1
 80051ae:	4611      	mov	r1, r2
 80051b0:	461a      	mov	r2, r3
 80051b2:	4603      	mov	r3, r0
 80051b4:	817b      	strh	r3, [r7, #10]
 80051b6:	460b      	mov	r3, r1
 80051b8:	813b      	strh	r3, [r7, #8]
 80051ba:	4613      	mov	r3, r2
 80051bc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80051be:	f7fd f987 	bl	80024d0 <HAL_GetTick>
 80051c2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	2b20      	cmp	r3, #32
 80051ce:	f040 8214 	bne.w	80055fa <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80051d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051d4:	9300      	str	r3, [sp, #0]
 80051d6:	2319      	movs	r3, #25
 80051d8:	2201      	movs	r2, #1
 80051da:	497b      	ldr	r1, [pc, #492]	@ (80053c8 <HAL_I2C_Mem_Read+0x224>)
 80051dc:	68f8      	ldr	r0, [r7, #12]
 80051de:	f000 fb91 	bl	8005904 <I2C_WaitOnFlagUntilTimeout>
 80051e2:	4603      	mov	r3, r0
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d001      	beq.n	80051ec <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80051e8:	2302      	movs	r3, #2
 80051ea:	e207      	b.n	80055fc <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	d101      	bne.n	80051fa <HAL_I2C_Mem_Read+0x56>
 80051f6:	2302      	movs	r3, #2
 80051f8:	e200      	b.n	80055fc <HAL_I2C_Mem_Read+0x458>
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2201      	movs	r2, #1
 80051fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 0301 	and.w	r3, r3, #1
 800520c:	2b01      	cmp	r3, #1
 800520e:	d007      	beq.n	8005220 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f042 0201 	orr.w	r2, r2, #1
 800521e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800522e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2222      	movs	r2, #34	@ 0x22
 8005234:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2240      	movs	r2, #64	@ 0x40
 800523c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2200      	movs	r2, #0
 8005244:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800524a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005250:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005256:	b29a      	uxth	r2, r3
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	4a5b      	ldr	r2, [pc, #364]	@ (80053cc <HAL_I2C_Mem_Read+0x228>)
 8005260:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005262:	88f8      	ldrh	r0, [r7, #6]
 8005264:	893a      	ldrh	r2, [r7, #8]
 8005266:	8979      	ldrh	r1, [r7, #10]
 8005268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800526a:	9301      	str	r3, [sp, #4]
 800526c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800526e:	9300      	str	r3, [sp, #0]
 8005270:	4603      	mov	r3, r0
 8005272:	68f8      	ldr	r0, [r7, #12]
 8005274:	f000 fa5e 	bl	8005734 <I2C_RequestMemoryRead>
 8005278:	4603      	mov	r3, r0
 800527a:	2b00      	cmp	r3, #0
 800527c:	d001      	beq.n	8005282 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	e1bc      	b.n	80055fc <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005286:	2b00      	cmp	r3, #0
 8005288:	d113      	bne.n	80052b2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800528a:	2300      	movs	r3, #0
 800528c:	623b      	str	r3, [r7, #32]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	695b      	ldr	r3, [r3, #20]
 8005294:	623b      	str	r3, [r7, #32]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	699b      	ldr	r3, [r3, #24]
 800529c:	623b      	str	r3, [r7, #32]
 800529e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80052ae:	601a      	str	r2, [r3, #0]
 80052b0:	e190      	b.n	80055d4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d11b      	bne.n	80052f2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80052c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052ca:	2300      	movs	r3, #0
 80052cc:	61fb      	str	r3, [r7, #28]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	695b      	ldr	r3, [r3, #20]
 80052d4:	61fb      	str	r3, [r7, #28]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	699b      	ldr	r3, [r3, #24]
 80052dc:	61fb      	str	r3, [r7, #28]
 80052de:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80052ee:	601a      	str	r2, [r3, #0]
 80052f0:	e170      	b.n	80055d4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052f6:	2b02      	cmp	r3, #2
 80052f8:	d11b      	bne.n	8005332 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005308:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005318:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800531a:	2300      	movs	r3, #0
 800531c:	61bb      	str	r3, [r7, #24]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	695b      	ldr	r3, [r3, #20]
 8005324:	61bb      	str	r3, [r7, #24]
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	699b      	ldr	r3, [r3, #24]
 800532c:	61bb      	str	r3, [r7, #24]
 800532e:	69bb      	ldr	r3, [r7, #24]
 8005330:	e150      	b.n	80055d4 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005332:	2300      	movs	r3, #0
 8005334:	617b      	str	r3, [r7, #20]
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	695b      	ldr	r3, [r3, #20]
 800533c:	617b      	str	r3, [r7, #20]
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	699b      	ldr	r3, [r3, #24]
 8005344:	617b      	str	r3, [r7, #20]
 8005346:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005348:	e144      	b.n	80055d4 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800534e:	2b03      	cmp	r3, #3
 8005350:	f200 80f1 	bhi.w	8005536 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005358:	2b01      	cmp	r3, #1
 800535a:	d123      	bne.n	80053a4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800535c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800535e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005360:	68f8      	ldr	r0, [r7, #12]
 8005362:	f000 fc79 	bl	8005c58 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005366:	4603      	mov	r3, r0
 8005368:	2b00      	cmp	r3, #0
 800536a:	d001      	beq.n	8005370 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	e145      	b.n	80055fc <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	691a      	ldr	r2, [r3, #16]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800537a:	b2d2      	uxtb	r2, r2
 800537c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005382:	1c5a      	adds	r2, r3, #1
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800538c:	3b01      	subs	r3, #1
 800538e:	b29a      	uxth	r2, r3
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005398:	b29b      	uxth	r3, r3
 800539a:	3b01      	subs	r3, #1
 800539c:	b29a      	uxth	r2, r3
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80053a2:	e117      	b.n	80055d4 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053a8:	2b02      	cmp	r3, #2
 80053aa:	d14e      	bne.n	800544a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80053ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ae:	9300      	str	r3, [sp, #0]
 80053b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053b2:	2200      	movs	r2, #0
 80053b4:	4906      	ldr	r1, [pc, #24]	@ (80053d0 <HAL_I2C_Mem_Read+0x22c>)
 80053b6:	68f8      	ldr	r0, [r7, #12]
 80053b8:	f000 faa4 	bl	8005904 <I2C_WaitOnFlagUntilTimeout>
 80053bc:	4603      	mov	r3, r0
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d008      	beq.n	80053d4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	e11a      	b.n	80055fc <HAL_I2C_Mem_Read+0x458>
 80053c6:	bf00      	nop
 80053c8:	00100002 	.word	0x00100002
 80053cc:	ffff0000 	.word	0xffff0000
 80053d0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80053e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	691a      	ldr	r2, [r3, #16]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053ee:	b2d2      	uxtb	r2, r2
 80053f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053f6:	1c5a      	adds	r2, r3, #1
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005400:	3b01      	subs	r3, #1
 8005402:	b29a      	uxth	r2, r3
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800540c:	b29b      	uxth	r3, r3
 800540e:	3b01      	subs	r3, #1
 8005410:	b29a      	uxth	r2, r3
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	691a      	ldr	r2, [r3, #16]
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005420:	b2d2      	uxtb	r2, r2
 8005422:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005428:	1c5a      	adds	r2, r3, #1
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005432:	3b01      	subs	r3, #1
 8005434:	b29a      	uxth	r2, r3
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800543e:	b29b      	uxth	r3, r3
 8005440:	3b01      	subs	r3, #1
 8005442:	b29a      	uxth	r2, r3
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005448:	e0c4      	b.n	80055d4 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800544a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800544c:	9300      	str	r3, [sp, #0]
 800544e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005450:	2200      	movs	r2, #0
 8005452:	496c      	ldr	r1, [pc, #432]	@ (8005604 <HAL_I2C_Mem_Read+0x460>)
 8005454:	68f8      	ldr	r0, [r7, #12]
 8005456:	f000 fa55 	bl	8005904 <I2C_WaitOnFlagUntilTimeout>
 800545a:	4603      	mov	r3, r0
 800545c:	2b00      	cmp	r3, #0
 800545e:	d001      	beq.n	8005464 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	e0cb      	b.n	80055fc <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005472:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	691a      	ldr	r2, [r3, #16]
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800547e:	b2d2      	uxtb	r2, r2
 8005480:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005486:	1c5a      	adds	r2, r3, #1
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005490:	3b01      	subs	r3, #1
 8005492:	b29a      	uxth	r2, r3
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800549c:	b29b      	uxth	r3, r3
 800549e:	3b01      	subs	r3, #1
 80054a0:	b29a      	uxth	r2, r3
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80054a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054a8:	9300      	str	r3, [sp, #0]
 80054aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054ac:	2200      	movs	r2, #0
 80054ae:	4955      	ldr	r1, [pc, #340]	@ (8005604 <HAL_I2C_Mem_Read+0x460>)
 80054b0:	68f8      	ldr	r0, [r7, #12]
 80054b2:	f000 fa27 	bl	8005904 <I2C_WaitOnFlagUntilTimeout>
 80054b6:	4603      	mov	r3, r0
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d001      	beq.n	80054c0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	e09d      	b.n	80055fc <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	681a      	ldr	r2, [r3, #0]
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80054ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	691a      	ldr	r2, [r3, #16]
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054da:	b2d2      	uxtb	r2, r2
 80054dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054e2:	1c5a      	adds	r2, r3, #1
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054ec:	3b01      	subs	r3, #1
 80054ee:	b29a      	uxth	r2, r3
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054f8:	b29b      	uxth	r3, r3
 80054fa:	3b01      	subs	r3, #1
 80054fc:	b29a      	uxth	r2, r3
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	691a      	ldr	r2, [r3, #16]
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800550c:	b2d2      	uxtb	r2, r2
 800550e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005514:	1c5a      	adds	r2, r3, #1
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800551e:	3b01      	subs	r3, #1
 8005520:	b29a      	uxth	r2, r3
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800552a:	b29b      	uxth	r3, r3
 800552c:	3b01      	subs	r3, #1
 800552e:	b29a      	uxth	r2, r3
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005534:	e04e      	b.n	80055d4 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005536:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005538:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800553a:	68f8      	ldr	r0, [r7, #12]
 800553c:	f000 fb8c 	bl	8005c58 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005540:	4603      	mov	r3, r0
 8005542:	2b00      	cmp	r3, #0
 8005544:	d001      	beq.n	800554a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	e058      	b.n	80055fc <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	691a      	ldr	r2, [r3, #16]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005554:	b2d2      	uxtb	r2, r2
 8005556:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800555c:	1c5a      	adds	r2, r3, #1
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005566:	3b01      	subs	r3, #1
 8005568:	b29a      	uxth	r2, r3
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005572:	b29b      	uxth	r3, r3
 8005574:	3b01      	subs	r3, #1
 8005576:	b29a      	uxth	r2, r3
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	695b      	ldr	r3, [r3, #20]
 8005582:	f003 0304 	and.w	r3, r3, #4
 8005586:	2b04      	cmp	r3, #4
 8005588:	d124      	bne.n	80055d4 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800558e:	2b03      	cmp	r3, #3
 8005590:	d107      	bne.n	80055a2 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80055a0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	691a      	ldr	r2, [r3, #16]
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055ac:	b2d2      	uxtb	r2, r2
 80055ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055b4:	1c5a      	adds	r2, r3, #1
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055be:	3b01      	subs	r3, #1
 80055c0:	b29a      	uxth	r2, r3
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055ca:	b29b      	uxth	r3, r3
 80055cc:	3b01      	subs	r3, #1
 80055ce:	b29a      	uxth	r2, r3
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055d8:	2b00      	cmp	r3, #0
 80055da:	f47f aeb6 	bne.w	800534a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2220      	movs	r2, #32
 80055e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2200      	movs	r2, #0
 80055ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2200      	movs	r2, #0
 80055f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80055f6:	2300      	movs	r3, #0
 80055f8:	e000      	b.n	80055fc <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80055fa:	2302      	movs	r3, #2
  }
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3728      	adds	r7, #40	@ 0x28
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}
 8005604:	00010004 	.word	0x00010004

08005608 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b088      	sub	sp, #32
 800560c:	af02      	add	r7, sp, #8
 800560e:	60f8      	str	r0, [r7, #12]
 8005610:	4608      	mov	r0, r1
 8005612:	4611      	mov	r1, r2
 8005614:	461a      	mov	r2, r3
 8005616:	4603      	mov	r3, r0
 8005618:	817b      	strh	r3, [r7, #10]
 800561a:	460b      	mov	r3, r1
 800561c:	813b      	strh	r3, [r7, #8]
 800561e:	4613      	mov	r3, r2
 8005620:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005630:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005634:	9300      	str	r3, [sp, #0]
 8005636:	6a3b      	ldr	r3, [r7, #32]
 8005638:	2200      	movs	r2, #0
 800563a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800563e:	68f8      	ldr	r0, [r7, #12]
 8005640:	f000 f960 	bl	8005904 <I2C_WaitOnFlagUntilTimeout>
 8005644:	4603      	mov	r3, r0
 8005646:	2b00      	cmp	r3, #0
 8005648:	d00d      	beq.n	8005666 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005654:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005658:	d103      	bne.n	8005662 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005660:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005662:	2303      	movs	r3, #3
 8005664:	e05f      	b.n	8005726 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005666:	897b      	ldrh	r3, [r7, #10]
 8005668:	b2db      	uxtb	r3, r3
 800566a:	461a      	mov	r2, r3
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005674:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005678:	6a3a      	ldr	r2, [r7, #32]
 800567a:	492d      	ldr	r1, [pc, #180]	@ (8005730 <I2C_RequestMemoryWrite+0x128>)
 800567c:	68f8      	ldr	r0, [r7, #12]
 800567e:	f000 f9bb 	bl	80059f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005682:	4603      	mov	r3, r0
 8005684:	2b00      	cmp	r3, #0
 8005686:	d001      	beq.n	800568c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	e04c      	b.n	8005726 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800568c:	2300      	movs	r3, #0
 800568e:	617b      	str	r3, [r7, #20]
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	695b      	ldr	r3, [r3, #20]
 8005696:	617b      	str	r3, [r7, #20]
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	699b      	ldr	r3, [r3, #24]
 800569e:	617b      	str	r3, [r7, #20]
 80056a0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80056a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056a4:	6a39      	ldr	r1, [r7, #32]
 80056a6:	68f8      	ldr	r0, [r7, #12]
 80056a8:	f000 fa46 	bl	8005b38 <I2C_WaitOnTXEFlagUntilTimeout>
 80056ac:	4603      	mov	r3, r0
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d00d      	beq.n	80056ce <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056b6:	2b04      	cmp	r3, #4
 80056b8:	d107      	bne.n	80056ca <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	681a      	ldr	r2, [r3, #0]
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80056c8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	e02b      	b.n	8005726 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80056ce:	88fb      	ldrh	r3, [r7, #6]
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d105      	bne.n	80056e0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80056d4:	893b      	ldrh	r3, [r7, #8]
 80056d6:	b2da      	uxtb	r2, r3
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	611a      	str	r2, [r3, #16]
 80056de:	e021      	b.n	8005724 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80056e0:	893b      	ldrh	r3, [r7, #8]
 80056e2:	0a1b      	lsrs	r3, r3, #8
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	b2da      	uxtb	r2, r3
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80056ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056f0:	6a39      	ldr	r1, [r7, #32]
 80056f2:	68f8      	ldr	r0, [r7, #12]
 80056f4:	f000 fa20 	bl	8005b38 <I2C_WaitOnTXEFlagUntilTimeout>
 80056f8:	4603      	mov	r3, r0
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d00d      	beq.n	800571a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005702:	2b04      	cmp	r3, #4
 8005704:	d107      	bne.n	8005716 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005714:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	e005      	b.n	8005726 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800571a:	893b      	ldrh	r3, [r7, #8]
 800571c:	b2da      	uxtb	r2, r3
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005724:	2300      	movs	r3, #0
}
 8005726:	4618      	mov	r0, r3
 8005728:	3718      	adds	r7, #24
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}
 800572e:	bf00      	nop
 8005730:	00010002 	.word	0x00010002

08005734 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b088      	sub	sp, #32
 8005738:	af02      	add	r7, sp, #8
 800573a:	60f8      	str	r0, [r7, #12]
 800573c:	4608      	mov	r0, r1
 800573e:	4611      	mov	r1, r2
 8005740:	461a      	mov	r2, r3
 8005742:	4603      	mov	r3, r0
 8005744:	817b      	strh	r3, [r7, #10]
 8005746:	460b      	mov	r3, r1
 8005748:	813b      	strh	r3, [r7, #8]
 800574a:	4613      	mov	r3, r2
 800574c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800575c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	681a      	ldr	r2, [r3, #0]
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800576c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800576e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005770:	9300      	str	r3, [sp, #0]
 8005772:	6a3b      	ldr	r3, [r7, #32]
 8005774:	2200      	movs	r2, #0
 8005776:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800577a:	68f8      	ldr	r0, [r7, #12]
 800577c:	f000 f8c2 	bl	8005904 <I2C_WaitOnFlagUntilTimeout>
 8005780:	4603      	mov	r3, r0
 8005782:	2b00      	cmp	r3, #0
 8005784:	d00d      	beq.n	80057a2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005790:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005794:	d103      	bne.n	800579e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800579c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800579e:	2303      	movs	r3, #3
 80057a0:	e0aa      	b.n	80058f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80057a2:	897b      	ldrh	r3, [r7, #10]
 80057a4:	b2db      	uxtb	r3, r3
 80057a6:	461a      	mov	r2, r3
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80057b0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80057b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057b4:	6a3a      	ldr	r2, [r7, #32]
 80057b6:	4952      	ldr	r1, [pc, #328]	@ (8005900 <I2C_RequestMemoryRead+0x1cc>)
 80057b8:	68f8      	ldr	r0, [r7, #12]
 80057ba:	f000 f91d 	bl	80059f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80057be:	4603      	mov	r3, r0
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d001      	beq.n	80057c8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80057c4:	2301      	movs	r3, #1
 80057c6:	e097      	b.n	80058f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057c8:	2300      	movs	r3, #0
 80057ca:	617b      	str	r3, [r7, #20]
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	695b      	ldr	r3, [r3, #20]
 80057d2:	617b      	str	r3, [r7, #20]
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	699b      	ldr	r3, [r3, #24]
 80057da:	617b      	str	r3, [r7, #20]
 80057dc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80057de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057e0:	6a39      	ldr	r1, [r7, #32]
 80057e2:	68f8      	ldr	r0, [r7, #12]
 80057e4:	f000 f9a8 	bl	8005b38 <I2C_WaitOnTXEFlagUntilTimeout>
 80057e8:	4603      	mov	r3, r0
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d00d      	beq.n	800580a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057f2:	2b04      	cmp	r3, #4
 80057f4:	d107      	bne.n	8005806 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005804:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	e076      	b.n	80058f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800580a:	88fb      	ldrh	r3, [r7, #6]
 800580c:	2b01      	cmp	r3, #1
 800580e:	d105      	bne.n	800581c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005810:	893b      	ldrh	r3, [r7, #8]
 8005812:	b2da      	uxtb	r2, r3
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	611a      	str	r2, [r3, #16]
 800581a:	e021      	b.n	8005860 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800581c:	893b      	ldrh	r3, [r7, #8]
 800581e:	0a1b      	lsrs	r3, r3, #8
 8005820:	b29b      	uxth	r3, r3
 8005822:	b2da      	uxtb	r2, r3
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800582a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800582c:	6a39      	ldr	r1, [r7, #32]
 800582e:	68f8      	ldr	r0, [r7, #12]
 8005830:	f000 f982 	bl	8005b38 <I2C_WaitOnTXEFlagUntilTimeout>
 8005834:	4603      	mov	r3, r0
 8005836:	2b00      	cmp	r3, #0
 8005838:	d00d      	beq.n	8005856 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800583e:	2b04      	cmp	r3, #4
 8005840:	d107      	bne.n	8005852 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	681a      	ldr	r2, [r3, #0]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005850:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	e050      	b.n	80058f8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005856:	893b      	ldrh	r3, [r7, #8]
 8005858:	b2da      	uxtb	r2, r3
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005860:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005862:	6a39      	ldr	r1, [r7, #32]
 8005864:	68f8      	ldr	r0, [r7, #12]
 8005866:	f000 f967 	bl	8005b38 <I2C_WaitOnTXEFlagUntilTimeout>
 800586a:	4603      	mov	r3, r0
 800586c:	2b00      	cmp	r3, #0
 800586e:	d00d      	beq.n	800588c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005874:	2b04      	cmp	r3, #4
 8005876:	d107      	bne.n	8005888 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005886:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005888:	2301      	movs	r3, #1
 800588a:	e035      	b.n	80058f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800589a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800589c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800589e:	9300      	str	r3, [sp, #0]
 80058a0:	6a3b      	ldr	r3, [r7, #32]
 80058a2:	2200      	movs	r2, #0
 80058a4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80058a8:	68f8      	ldr	r0, [r7, #12]
 80058aa:	f000 f82b 	bl	8005904 <I2C_WaitOnFlagUntilTimeout>
 80058ae:	4603      	mov	r3, r0
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d00d      	beq.n	80058d0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80058c2:	d103      	bne.n	80058cc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80058ca:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80058cc:	2303      	movs	r3, #3
 80058ce:	e013      	b.n	80058f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80058d0:	897b      	ldrh	r3, [r7, #10]
 80058d2:	b2db      	uxtb	r3, r3
 80058d4:	f043 0301 	orr.w	r3, r3, #1
 80058d8:	b2da      	uxtb	r2, r3
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80058e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058e2:	6a3a      	ldr	r2, [r7, #32]
 80058e4:	4906      	ldr	r1, [pc, #24]	@ (8005900 <I2C_RequestMemoryRead+0x1cc>)
 80058e6:	68f8      	ldr	r0, [r7, #12]
 80058e8:	f000 f886 	bl	80059f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80058ec:	4603      	mov	r3, r0
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d001      	beq.n	80058f6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	e000      	b.n	80058f8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80058f6:	2300      	movs	r3, #0
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3718      	adds	r7, #24
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}
 8005900:	00010002 	.word	0x00010002

08005904 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b084      	sub	sp, #16
 8005908:	af00      	add	r7, sp, #0
 800590a:	60f8      	str	r0, [r7, #12]
 800590c:	60b9      	str	r1, [r7, #8]
 800590e:	603b      	str	r3, [r7, #0]
 8005910:	4613      	mov	r3, r2
 8005912:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005914:	e048      	b.n	80059a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800591c:	d044      	beq.n	80059a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800591e:	f7fc fdd7 	bl	80024d0 <HAL_GetTick>
 8005922:	4602      	mov	r2, r0
 8005924:	69bb      	ldr	r3, [r7, #24]
 8005926:	1ad3      	subs	r3, r2, r3
 8005928:	683a      	ldr	r2, [r7, #0]
 800592a:	429a      	cmp	r2, r3
 800592c:	d302      	bcc.n	8005934 <I2C_WaitOnFlagUntilTimeout+0x30>
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d139      	bne.n	80059a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	0c1b      	lsrs	r3, r3, #16
 8005938:	b2db      	uxtb	r3, r3
 800593a:	2b01      	cmp	r3, #1
 800593c:	d10d      	bne.n	800595a <I2C_WaitOnFlagUntilTimeout+0x56>
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	695b      	ldr	r3, [r3, #20]
 8005944:	43da      	mvns	r2, r3
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	4013      	ands	r3, r2
 800594a:	b29b      	uxth	r3, r3
 800594c:	2b00      	cmp	r3, #0
 800594e:	bf0c      	ite	eq
 8005950:	2301      	moveq	r3, #1
 8005952:	2300      	movne	r3, #0
 8005954:	b2db      	uxtb	r3, r3
 8005956:	461a      	mov	r2, r3
 8005958:	e00c      	b.n	8005974 <I2C_WaitOnFlagUntilTimeout+0x70>
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	699b      	ldr	r3, [r3, #24]
 8005960:	43da      	mvns	r2, r3
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	4013      	ands	r3, r2
 8005966:	b29b      	uxth	r3, r3
 8005968:	2b00      	cmp	r3, #0
 800596a:	bf0c      	ite	eq
 800596c:	2301      	moveq	r3, #1
 800596e:	2300      	movne	r3, #0
 8005970:	b2db      	uxtb	r3, r3
 8005972:	461a      	mov	r2, r3
 8005974:	79fb      	ldrb	r3, [r7, #7]
 8005976:	429a      	cmp	r2, r3
 8005978:	d116      	bne.n	80059a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2200      	movs	r2, #0
 800597e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2220      	movs	r2, #32
 8005984:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2200      	movs	r2, #0
 800598c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005994:	f043 0220 	orr.w	r2, r3, #32
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2200      	movs	r2, #0
 80059a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80059a4:	2301      	movs	r3, #1
 80059a6:	e023      	b.n	80059f0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	0c1b      	lsrs	r3, r3, #16
 80059ac:	b2db      	uxtb	r3, r3
 80059ae:	2b01      	cmp	r3, #1
 80059b0:	d10d      	bne.n	80059ce <I2C_WaitOnFlagUntilTimeout+0xca>
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	695b      	ldr	r3, [r3, #20]
 80059b8:	43da      	mvns	r2, r3
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	4013      	ands	r3, r2
 80059be:	b29b      	uxth	r3, r3
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	bf0c      	ite	eq
 80059c4:	2301      	moveq	r3, #1
 80059c6:	2300      	movne	r3, #0
 80059c8:	b2db      	uxtb	r3, r3
 80059ca:	461a      	mov	r2, r3
 80059cc:	e00c      	b.n	80059e8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	699b      	ldr	r3, [r3, #24]
 80059d4:	43da      	mvns	r2, r3
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	4013      	ands	r3, r2
 80059da:	b29b      	uxth	r3, r3
 80059dc:	2b00      	cmp	r3, #0
 80059de:	bf0c      	ite	eq
 80059e0:	2301      	moveq	r3, #1
 80059e2:	2300      	movne	r3, #0
 80059e4:	b2db      	uxtb	r3, r3
 80059e6:	461a      	mov	r2, r3
 80059e8:	79fb      	ldrb	r3, [r7, #7]
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d093      	beq.n	8005916 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80059ee:	2300      	movs	r3, #0
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3710      	adds	r7, #16
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}

080059f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b084      	sub	sp, #16
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	60f8      	str	r0, [r7, #12]
 8005a00:	60b9      	str	r1, [r7, #8]
 8005a02:	607a      	str	r2, [r7, #4]
 8005a04:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005a06:	e071      	b.n	8005aec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	695b      	ldr	r3, [r3, #20]
 8005a0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a16:	d123      	bne.n	8005a60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a26:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005a30:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2200      	movs	r2, #0
 8005a36:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2220      	movs	r2, #32
 8005a3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2200      	movs	r2, #0
 8005a44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a4c:	f043 0204 	orr.w	r2, r3, #4
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2200      	movs	r2, #0
 8005a58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	e067      	b.n	8005b30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a66:	d041      	beq.n	8005aec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a68:	f7fc fd32 	bl	80024d0 <HAL_GetTick>
 8005a6c:	4602      	mov	r2, r0
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	1ad3      	subs	r3, r2, r3
 8005a72:	687a      	ldr	r2, [r7, #4]
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d302      	bcc.n	8005a7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d136      	bne.n	8005aec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	0c1b      	lsrs	r3, r3, #16
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d10c      	bne.n	8005aa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	695b      	ldr	r3, [r3, #20]
 8005a8e:	43da      	mvns	r2, r3
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	4013      	ands	r3, r2
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	bf14      	ite	ne
 8005a9a:	2301      	movne	r3, #1
 8005a9c:	2300      	moveq	r3, #0
 8005a9e:	b2db      	uxtb	r3, r3
 8005aa0:	e00b      	b.n	8005aba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	699b      	ldr	r3, [r3, #24]
 8005aa8:	43da      	mvns	r2, r3
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	4013      	ands	r3, r2
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	bf14      	ite	ne
 8005ab4:	2301      	movne	r3, #1
 8005ab6:	2300      	moveq	r3, #0
 8005ab8:	b2db      	uxtb	r3, r3
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d016      	beq.n	8005aec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2220      	movs	r2, #32
 8005ac8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ad8:	f043 0220 	orr.w	r2, r3, #32
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	e021      	b.n	8005b30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	0c1b      	lsrs	r3, r3, #16
 8005af0:	b2db      	uxtb	r3, r3
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	d10c      	bne.n	8005b10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	695b      	ldr	r3, [r3, #20]
 8005afc:	43da      	mvns	r2, r3
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	4013      	ands	r3, r2
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	bf14      	ite	ne
 8005b08:	2301      	movne	r3, #1
 8005b0a:	2300      	moveq	r3, #0
 8005b0c:	b2db      	uxtb	r3, r3
 8005b0e:	e00b      	b.n	8005b28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	699b      	ldr	r3, [r3, #24]
 8005b16:	43da      	mvns	r2, r3
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	4013      	ands	r3, r2
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	bf14      	ite	ne
 8005b22:	2301      	movne	r3, #1
 8005b24:	2300      	moveq	r3, #0
 8005b26:	b2db      	uxtb	r3, r3
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	f47f af6d 	bne.w	8005a08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005b2e:	2300      	movs	r3, #0
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3710      	adds	r7, #16
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}

08005b38 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b084      	sub	sp, #16
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	60f8      	str	r0, [r7, #12]
 8005b40:	60b9      	str	r1, [r7, #8]
 8005b42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005b44:	e034      	b.n	8005bb0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005b46:	68f8      	ldr	r0, [r7, #12]
 8005b48:	f000 f8e3 	bl	8005d12 <I2C_IsAcknowledgeFailed>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d001      	beq.n	8005b56 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	e034      	b.n	8005bc0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b5c:	d028      	beq.n	8005bb0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b5e:	f7fc fcb7 	bl	80024d0 <HAL_GetTick>
 8005b62:	4602      	mov	r2, r0
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	1ad3      	subs	r3, r2, r3
 8005b68:	68ba      	ldr	r2, [r7, #8]
 8005b6a:	429a      	cmp	r2, r3
 8005b6c:	d302      	bcc.n	8005b74 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d11d      	bne.n	8005bb0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	695b      	ldr	r3, [r3, #20]
 8005b7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b7e:	2b80      	cmp	r3, #128	@ 0x80
 8005b80:	d016      	beq.n	8005bb0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2200      	movs	r2, #0
 8005b86:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2220      	movs	r2, #32
 8005b8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2200      	movs	r2, #0
 8005b94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b9c:	f043 0220 	orr.w	r2, r3, #32
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005bac:	2301      	movs	r3, #1
 8005bae:	e007      	b.n	8005bc0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	695b      	ldr	r3, [r3, #20]
 8005bb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bba:	2b80      	cmp	r3, #128	@ 0x80
 8005bbc:	d1c3      	bne.n	8005b46 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005bbe:	2300      	movs	r3, #0
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	3710      	adds	r7, #16
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}

08005bc8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b084      	sub	sp, #16
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	60f8      	str	r0, [r7, #12]
 8005bd0:	60b9      	str	r1, [r7, #8]
 8005bd2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005bd4:	e034      	b.n	8005c40 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005bd6:	68f8      	ldr	r0, [r7, #12]
 8005bd8:	f000 f89b 	bl	8005d12 <I2C_IsAcknowledgeFailed>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d001      	beq.n	8005be6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	e034      	b.n	8005c50 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bec:	d028      	beq.n	8005c40 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bee:	f7fc fc6f 	bl	80024d0 <HAL_GetTick>
 8005bf2:	4602      	mov	r2, r0
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	1ad3      	subs	r3, r2, r3
 8005bf8:	68ba      	ldr	r2, [r7, #8]
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	d302      	bcc.n	8005c04 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d11d      	bne.n	8005c40 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	695b      	ldr	r3, [r3, #20]
 8005c0a:	f003 0304 	and.w	r3, r3, #4
 8005c0e:	2b04      	cmp	r3, #4
 8005c10:	d016      	beq.n	8005c40 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2200      	movs	r2, #0
 8005c16:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2220      	movs	r2, #32
 8005c1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2200      	movs	r2, #0
 8005c24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c2c:	f043 0220 	orr.w	r2, r3, #32
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2200      	movs	r2, #0
 8005c38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	e007      	b.n	8005c50 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	695b      	ldr	r3, [r3, #20]
 8005c46:	f003 0304 	and.w	r3, r3, #4
 8005c4a:	2b04      	cmp	r3, #4
 8005c4c:	d1c3      	bne.n	8005bd6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005c4e:	2300      	movs	r3, #0
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3710      	adds	r7, #16
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}

08005c58 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b084      	sub	sp, #16
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	60f8      	str	r0, [r7, #12]
 8005c60:	60b9      	str	r1, [r7, #8]
 8005c62:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005c64:	e049      	b.n	8005cfa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	695b      	ldr	r3, [r3, #20]
 8005c6c:	f003 0310 	and.w	r3, r3, #16
 8005c70:	2b10      	cmp	r3, #16
 8005c72:	d119      	bne.n	8005ca8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f06f 0210 	mvn.w	r2, #16
 8005c7c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2200      	movs	r2, #0
 8005c82:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2220      	movs	r2, #32
 8005c88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	e030      	b.n	8005d0a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ca8:	f7fc fc12 	bl	80024d0 <HAL_GetTick>
 8005cac:	4602      	mov	r2, r0
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	1ad3      	subs	r3, r2, r3
 8005cb2:	68ba      	ldr	r2, [r7, #8]
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d302      	bcc.n	8005cbe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d11d      	bne.n	8005cfa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	695b      	ldr	r3, [r3, #20]
 8005cc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cc8:	2b40      	cmp	r3, #64	@ 0x40
 8005cca:	d016      	beq.n	8005cfa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2220      	movs	r2, #32
 8005cd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ce6:	f043 0220 	orr.w	r2, r3, #32
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	e007      	b.n	8005d0a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	695b      	ldr	r3, [r3, #20]
 8005d00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d04:	2b40      	cmp	r3, #64	@ 0x40
 8005d06:	d1ae      	bne.n	8005c66 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005d08:	2300      	movs	r3, #0
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3710      	adds	r7, #16
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}

08005d12 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005d12:	b480      	push	{r7}
 8005d14:	b083      	sub	sp, #12
 8005d16:	af00      	add	r7, sp, #0
 8005d18:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	695b      	ldr	r3, [r3, #20]
 8005d20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d28:	d11b      	bne.n	8005d62 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005d32:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2200      	movs	r2, #0
 8005d38:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2220      	movs	r2, #32
 8005d3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2200      	movs	r2, #0
 8005d46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d4e:	f043 0204 	orr.w	r2, r3, #4
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	e000      	b.n	8005d64 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005d62:	2300      	movs	r3, #0
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	370c      	adds	r7, #12
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr

08005d70 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b086      	sub	sp, #24
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d101      	bne.n	8005d82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	e267      	b.n	8006252 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f003 0301 	and.w	r3, r3, #1
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d075      	beq.n	8005e7a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005d8e:	4b88      	ldr	r3, [pc, #544]	@ (8005fb0 <HAL_RCC_OscConfig+0x240>)
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	f003 030c 	and.w	r3, r3, #12
 8005d96:	2b04      	cmp	r3, #4
 8005d98:	d00c      	beq.n	8005db4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d9a:	4b85      	ldr	r3, [pc, #532]	@ (8005fb0 <HAL_RCC_OscConfig+0x240>)
 8005d9c:	689b      	ldr	r3, [r3, #8]
 8005d9e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005da2:	2b08      	cmp	r3, #8
 8005da4:	d112      	bne.n	8005dcc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005da6:	4b82      	ldr	r3, [pc, #520]	@ (8005fb0 <HAL_RCC_OscConfig+0x240>)
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005dae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005db2:	d10b      	bne.n	8005dcc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005db4:	4b7e      	ldr	r3, [pc, #504]	@ (8005fb0 <HAL_RCC_OscConfig+0x240>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d05b      	beq.n	8005e78 <HAL_RCC_OscConfig+0x108>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d157      	bne.n	8005e78 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	e242      	b.n	8006252 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005dd4:	d106      	bne.n	8005de4 <HAL_RCC_OscConfig+0x74>
 8005dd6:	4b76      	ldr	r3, [pc, #472]	@ (8005fb0 <HAL_RCC_OscConfig+0x240>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a75      	ldr	r2, [pc, #468]	@ (8005fb0 <HAL_RCC_OscConfig+0x240>)
 8005ddc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005de0:	6013      	str	r3, [r2, #0]
 8005de2:	e01d      	b.n	8005e20 <HAL_RCC_OscConfig+0xb0>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005dec:	d10c      	bne.n	8005e08 <HAL_RCC_OscConfig+0x98>
 8005dee:	4b70      	ldr	r3, [pc, #448]	@ (8005fb0 <HAL_RCC_OscConfig+0x240>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a6f      	ldr	r2, [pc, #444]	@ (8005fb0 <HAL_RCC_OscConfig+0x240>)
 8005df4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005df8:	6013      	str	r3, [r2, #0]
 8005dfa:	4b6d      	ldr	r3, [pc, #436]	@ (8005fb0 <HAL_RCC_OscConfig+0x240>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a6c      	ldr	r2, [pc, #432]	@ (8005fb0 <HAL_RCC_OscConfig+0x240>)
 8005e00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e04:	6013      	str	r3, [r2, #0]
 8005e06:	e00b      	b.n	8005e20 <HAL_RCC_OscConfig+0xb0>
 8005e08:	4b69      	ldr	r3, [pc, #420]	@ (8005fb0 <HAL_RCC_OscConfig+0x240>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a68      	ldr	r2, [pc, #416]	@ (8005fb0 <HAL_RCC_OscConfig+0x240>)
 8005e0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e12:	6013      	str	r3, [r2, #0]
 8005e14:	4b66      	ldr	r3, [pc, #408]	@ (8005fb0 <HAL_RCC_OscConfig+0x240>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a65      	ldr	r2, [pc, #404]	@ (8005fb0 <HAL_RCC_OscConfig+0x240>)
 8005e1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005e1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d013      	beq.n	8005e50 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e28:	f7fc fb52 	bl	80024d0 <HAL_GetTick>
 8005e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e2e:	e008      	b.n	8005e42 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e30:	f7fc fb4e 	bl	80024d0 <HAL_GetTick>
 8005e34:	4602      	mov	r2, r0
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	1ad3      	subs	r3, r2, r3
 8005e3a:	2b64      	cmp	r3, #100	@ 0x64
 8005e3c:	d901      	bls.n	8005e42 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005e3e:	2303      	movs	r3, #3
 8005e40:	e207      	b.n	8006252 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e42:	4b5b      	ldr	r3, [pc, #364]	@ (8005fb0 <HAL_RCC_OscConfig+0x240>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d0f0      	beq.n	8005e30 <HAL_RCC_OscConfig+0xc0>
 8005e4e:	e014      	b.n	8005e7a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e50:	f7fc fb3e 	bl	80024d0 <HAL_GetTick>
 8005e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e56:	e008      	b.n	8005e6a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e58:	f7fc fb3a 	bl	80024d0 <HAL_GetTick>
 8005e5c:	4602      	mov	r2, r0
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	1ad3      	subs	r3, r2, r3
 8005e62:	2b64      	cmp	r3, #100	@ 0x64
 8005e64:	d901      	bls.n	8005e6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005e66:	2303      	movs	r3, #3
 8005e68:	e1f3      	b.n	8006252 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e6a:	4b51      	ldr	r3, [pc, #324]	@ (8005fb0 <HAL_RCC_OscConfig+0x240>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d1f0      	bne.n	8005e58 <HAL_RCC_OscConfig+0xe8>
 8005e76:	e000      	b.n	8005e7a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f003 0302 	and.w	r3, r3, #2
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d063      	beq.n	8005f4e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005e86:	4b4a      	ldr	r3, [pc, #296]	@ (8005fb0 <HAL_RCC_OscConfig+0x240>)
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	f003 030c 	and.w	r3, r3, #12
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d00b      	beq.n	8005eaa <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e92:	4b47      	ldr	r3, [pc, #284]	@ (8005fb0 <HAL_RCC_OscConfig+0x240>)
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005e9a:	2b08      	cmp	r3, #8
 8005e9c:	d11c      	bne.n	8005ed8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e9e:	4b44      	ldr	r3, [pc, #272]	@ (8005fb0 <HAL_RCC_OscConfig+0x240>)
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d116      	bne.n	8005ed8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005eaa:	4b41      	ldr	r3, [pc, #260]	@ (8005fb0 <HAL_RCC_OscConfig+0x240>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f003 0302 	and.w	r3, r3, #2
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d005      	beq.n	8005ec2 <HAL_RCC_OscConfig+0x152>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	68db      	ldr	r3, [r3, #12]
 8005eba:	2b01      	cmp	r3, #1
 8005ebc:	d001      	beq.n	8005ec2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	e1c7      	b.n	8006252 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ec2:	4b3b      	ldr	r3, [pc, #236]	@ (8005fb0 <HAL_RCC_OscConfig+0x240>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	691b      	ldr	r3, [r3, #16]
 8005ece:	00db      	lsls	r3, r3, #3
 8005ed0:	4937      	ldr	r1, [pc, #220]	@ (8005fb0 <HAL_RCC_OscConfig+0x240>)
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ed6:	e03a      	b.n	8005f4e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	68db      	ldr	r3, [r3, #12]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d020      	beq.n	8005f22 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005ee0:	4b34      	ldr	r3, [pc, #208]	@ (8005fb4 <HAL_RCC_OscConfig+0x244>)
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ee6:	f7fc faf3 	bl	80024d0 <HAL_GetTick>
 8005eea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005eec:	e008      	b.n	8005f00 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005eee:	f7fc faef 	bl	80024d0 <HAL_GetTick>
 8005ef2:	4602      	mov	r2, r0
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	1ad3      	subs	r3, r2, r3
 8005ef8:	2b02      	cmp	r3, #2
 8005efa:	d901      	bls.n	8005f00 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005efc:	2303      	movs	r3, #3
 8005efe:	e1a8      	b.n	8006252 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f00:	4b2b      	ldr	r3, [pc, #172]	@ (8005fb0 <HAL_RCC_OscConfig+0x240>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f003 0302 	and.w	r3, r3, #2
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d0f0      	beq.n	8005eee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f0c:	4b28      	ldr	r3, [pc, #160]	@ (8005fb0 <HAL_RCC_OscConfig+0x240>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	691b      	ldr	r3, [r3, #16]
 8005f18:	00db      	lsls	r3, r3, #3
 8005f1a:	4925      	ldr	r1, [pc, #148]	@ (8005fb0 <HAL_RCC_OscConfig+0x240>)
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	600b      	str	r3, [r1, #0]
 8005f20:	e015      	b.n	8005f4e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f22:	4b24      	ldr	r3, [pc, #144]	@ (8005fb4 <HAL_RCC_OscConfig+0x244>)
 8005f24:	2200      	movs	r2, #0
 8005f26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f28:	f7fc fad2 	bl	80024d0 <HAL_GetTick>
 8005f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f2e:	e008      	b.n	8005f42 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f30:	f7fc face 	bl	80024d0 <HAL_GetTick>
 8005f34:	4602      	mov	r2, r0
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	1ad3      	subs	r3, r2, r3
 8005f3a:	2b02      	cmp	r3, #2
 8005f3c:	d901      	bls.n	8005f42 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005f3e:	2303      	movs	r3, #3
 8005f40:	e187      	b.n	8006252 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f42:	4b1b      	ldr	r3, [pc, #108]	@ (8005fb0 <HAL_RCC_OscConfig+0x240>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f003 0302 	and.w	r3, r3, #2
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d1f0      	bne.n	8005f30 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f003 0308 	and.w	r3, r3, #8
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d036      	beq.n	8005fc8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	695b      	ldr	r3, [r3, #20]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d016      	beq.n	8005f90 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f62:	4b15      	ldr	r3, [pc, #84]	@ (8005fb8 <HAL_RCC_OscConfig+0x248>)
 8005f64:	2201      	movs	r2, #1
 8005f66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f68:	f7fc fab2 	bl	80024d0 <HAL_GetTick>
 8005f6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f6e:	e008      	b.n	8005f82 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f70:	f7fc faae 	bl	80024d0 <HAL_GetTick>
 8005f74:	4602      	mov	r2, r0
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	1ad3      	subs	r3, r2, r3
 8005f7a:	2b02      	cmp	r3, #2
 8005f7c:	d901      	bls.n	8005f82 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005f7e:	2303      	movs	r3, #3
 8005f80:	e167      	b.n	8006252 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f82:	4b0b      	ldr	r3, [pc, #44]	@ (8005fb0 <HAL_RCC_OscConfig+0x240>)
 8005f84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f86:	f003 0302 	and.w	r3, r3, #2
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d0f0      	beq.n	8005f70 <HAL_RCC_OscConfig+0x200>
 8005f8e:	e01b      	b.n	8005fc8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f90:	4b09      	ldr	r3, [pc, #36]	@ (8005fb8 <HAL_RCC_OscConfig+0x248>)
 8005f92:	2200      	movs	r2, #0
 8005f94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f96:	f7fc fa9b 	bl	80024d0 <HAL_GetTick>
 8005f9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f9c:	e00e      	b.n	8005fbc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f9e:	f7fc fa97 	bl	80024d0 <HAL_GetTick>
 8005fa2:	4602      	mov	r2, r0
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	1ad3      	subs	r3, r2, r3
 8005fa8:	2b02      	cmp	r3, #2
 8005faa:	d907      	bls.n	8005fbc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005fac:	2303      	movs	r3, #3
 8005fae:	e150      	b.n	8006252 <HAL_RCC_OscConfig+0x4e2>
 8005fb0:	40023800 	.word	0x40023800
 8005fb4:	42470000 	.word	0x42470000
 8005fb8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005fbc:	4b88      	ldr	r3, [pc, #544]	@ (80061e0 <HAL_RCC_OscConfig+0x470>)
 8005fbe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005fc0:	f003 0302 	and.w	r3, r3, #2
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d1ea      	bne.n	8005f9e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f003 0304 	and.w	r3, r3, #4
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	f000 8097 	beq.w	8006104 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005fda:	4b81      	ldr	r3, [pc, #516]	@ (80061e0 <HAL_RCC_OscConfig+0x470>)
 8005fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d10f      	bne.n	8006006 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	60bb      	str	r3, [r7, #8]
 8005fea:	4b7d      	ldr	r3, [pc, #500]	@ (80061e0 <HAL_RCC_OscConfig+0x470>)
 8005fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fee:	4a7c      	ldr	r2, [pc, #496]	@ (80061e0 <HAL_RCC_OscConfig+0x470>)
 8005ff0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ff4:	6413      	str	r3, [r2, #64]	@ 0x40
 8005ff6:	4b7a      	ldr	r3, [pc, #488]	@ (80061e0 <HAL_RCC_OscConfig+0x470>)
 8005ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ffa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ffe:	60bb      	str	r3, [r7, #8]
 8006000:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006002:	2301      	movs	r3, #1
 8006004:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006006:	4b77      	ldr	r3, [pc, #476]	@ (80061e4 <HAL_RCC_OscConfig+0x474>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800600e:	2b00      	cmp	r3, #0
 8006010:	d118      	bne.n	8006044 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006012:	4b74      	ldr	r3, [pc, #464]	@ (80061e4 <HAL_RCC_OscConfig+0x474>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a73      	ldr	r2, [pc, #460]	@ (80061e4 <HAL_RCC_OscConfig+0x474>)
 8006018:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800601c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800601e:	f7fc fa57 	bl	80024d0 <HAL_GetTick>
 8006022:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006024:	e008      	b.n	8006038 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006026:	f7fc fa53 	bl	80024d0 <HAL_GetTick>
 800602a:	4602      	mov	r2, r0
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	1ad3      	subs	r3, r2, r3
 8006030:	2b02      	cmp	r3, #2
 8006032:	d901      	bls.n	8006038 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006034:	2303      	movs	r3, #3
 8006036:	e10c      	b.n	8006252 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006038:	4b6a      	ldr	r3, [pc, #424]	@ (80061e4 <HAL_RCC_OscConfig+0x474>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006040:	2b00      	cmp	r3, #0
 8006042:	d0f0      	beq.n	8006026 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	2b01      	cmp	r3, #1
 800604a:	d106      	bne.n	800605a <HAL_RCC_OscConfig+0x2ea>
 800604c:	4b64      	ldr	r3, [pc, #400]	@ (80061e0 <HAL_RCC_OscConfig+0x470>)
 800604e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006050:	4a63      	ldr	r2, [pc, #396]	@ (80061e0 <HAL_RCC_OscConfig+0x470>)
 8006052:	f043 0301 	orr.w	r3, r3, #1
 8006056:	6713      	str	r3, [r2, #112]	@ 0x70
 8006058:	e01c      	b.n	8006094 <HAL_RCC_OscConfig+0x324>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	689b      	ldr	r3, [r3, #8]
 800605e:	2b05      	cmp	r3, #5
 8006060:	d10c      	bne.n	800607c <HAL_RCC_OscConfig+0x30c>
 8006062:	4b5f      	ldr	r3, [pc, #380]	@ (80061e0 <HAL_RCC_OscConfig+0x470>)
 8006064:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006066:	4a5e      	ldr	r2, [pc, #376]	@ (80061e0 <HAL_RCC_OscConfig+0x470>)
 8006068:	f043 0304 	orr.w	r3, r3, #4
 800606c:	6713      	str	r3, [r2, #112]	@ 0x70
 800606e:	4b5c      	ldr	r3, [pc, #368]	@ (80061e0 <HAL_RCC_OscConfig+0x470>)
 8006070:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006072:	4a5b      	ldr	r2, [pc, #364]	@ (80061e0 <HAL_RCC_OscConfig+0x470>)
 8006074:	f043 0301 	orr.w	r3, r3, #1
 8006078:	6713      	str	r3, [r2, #112]	@ 0x70
 800607a:	e00b      	b.n	8006094 <HAL_RCC_OscConfig+0x324>
 800607c:	4b58      	ldr	r3, [pc, #352]	@ (80061e0 <HAL_RCC_OscConfig+0x470>)
 800607e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006080:	4a57      	ldr	r2, [pc, #348]	@ (80061e0 <HAL_RCC_OscConfig+0x470>)
 8006082:	f023 0301 	bic.w	r3, r3, #1
 8006086:	6713      	str	r3, [r2, #112]	@ 0x70
 8006088:	4b55      	ldr	r3, [pc, #340]	@ (80061e0 <HAL_RCC_OscConfig+0x470>)
 800608a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800608c:	4a54      	ldr	r2, [pc, #336]	@ (80061e0 <HAL_RCC_OscConfig+0x470>)
 800608e:	f023 0304 	bic.w	r3, r3, #4
 8006092:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d015      	beq.n	80060c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800609c:	f7fc fa18 	bl	80024d0 <HAL_GetTick>
 80060a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060a2:	e00a      	b.n	80060ba <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060a4:	f7fc fa14 	bl	80024d0 <HAL_GetTick>
 80060a8:	4602      	mov	r2, r0
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	1ad3      	subs	r3, r2, r3
 80060ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d901      	bls.n	80060ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80060b6:	2303      	movs	r3, #3
 80060b8:	e0cb      	b.n	8006252 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060ba:	4b49      	ldr	r3, [pc, #292]	@ (80061e0 <HAL_RCC_OscConfig+0x470>)
 80060bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060be:	f003 0302 	and.w	r3, r3, #2
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d0ee      	beq.n	80060a4 <HAL_RCC_OscConfig+0x334>
 80060c6:	e014      	b.n	80060f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060c8:	f7fc fa02 	bl	80024d0 <HAL_GetTick>
 80060cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80060ce:	e00a      	b.n	80060e6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060d0:	f7fc f9fe 	bl	80024d0 <HAL_GetTick>
 80060d4:	4602      	mov	r2, r0
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	1ad3      	subs	r3, r2, r3
 80060da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060de:	4293      	cmp	r3, r2
 80060e0:	d901      	bls.n	80060e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80060e2:	2303      	movs	r3, #3
 80060e4:	e0b5      	b.n	8006252 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80060e6:	4b3e      	ldr	r3, [pc, #248]	@ (80061e0 <HAL_RCC_OscConfig+0x470>)
 80060e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060ea:	f003 0302 	and.w	r3, r3, #2
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d1ee      	bne.n	80060d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80060f2:	7dfb      	ldrb	r3, [r7, #23]
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d105      	bne.n	8006104 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060f8:	4b39      	ldr	r3, [pc, #228]	@ (80061e0 <HAL_RCC_OscConfig+0x470>)
 80060fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060fc:	4a38      	ldr	r2, [pc, #224]	@ (80061e0 <HAL_RCC_OscConfig+0x470>)
 80060fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006102:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	699b      	ldr	r3, [r3, #24]
 8006108:	2b00      	cmp	r3, #0
 800610a:	f000 80a1 	beq.w	8006250 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800610e:	4b34      	ldr	r3, [pc, #208]	@ (80061e0 <HAL_RCC_OscConfig+0x470>)
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	f003 030c 	and.w	r3, r3, #12
 8006116:	2b08      	cmp	r3, #8
 8006118:	d05c      	beq.n	80061d4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	699b      	ldr	r3, [r3, #24]
 800611e:	2b02      	cmp	r3, #2
 8006120:	d141      	bne.n	80061a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006122:	4b31      	ldr	r3, [pc, #196]	@ (80061e8 <HAL_RCC_OscConfig+0x478>)
 8006124:	2200      	movs	r2, #0
 8006126:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006128:	f7fc f9d2 	bl	80024d0 <HAL_GetTick>
 800612c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800612e:	e008      	b.n	8006142 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006130:	f7fc f9ce 	bl	80024d0 <HAL_GetTick>
 8006134:	4602      	mov	r2, r0
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	1ad3      	subs	r3, r2, r3
 800613a:	2b02      	cmp	r3, #2
 800613c:	d901      	bls.n	8006142 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800613e:	2303      	movs	r3, #3
 8006140:	e087      	b.n	8006252 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006142:	4b27      	ldr	r3, [pc, #156]	@ (80061e0 <HAL_RCC_OscConfig+0x470>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800614a:	2b00      	cmp	r3, #0
 800614c:	d1f0      	bne.n	8006130 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	69da      	ldr	r2, [r3, #28]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6a1b      	ldr	r3, [r3, #32]
 8006156:	431a      	orrs	r2, r3
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800615c:	019b      	lsls	r3, r3, #6
 800615e:	431a      	orrs	r2, r3
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006164:	085b      	lsrs	r3, r3, #1
 8006166:	3b01      	subs	r3, #1
 8006168:	041b      	lsls	r3, r3, #16
 800616a:	431a      	orrs	r2, r3
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006170:	061b      	lsls	r3, r3, #24
 8006172:	491b      	ldr	r1, [pc, #108]	@ (80061e0 <HAL_RCC_OscConfig+0x470>)
 8006174:	4313      	orrs	r3, r2
 8006176:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006178:	4b1b      	ldr	r3, [pc, #108]	@ (80061e8 <HAL_RCC_OscConfig+0x478>)
 800617a:	2201      	movs	r2, #1
 800617c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800617e:	f7fc f9a7 	bl	80024d0 <HAL_GetTick>
 8006182:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006184:	e008      	b.n	8006198 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006186:	f7fc f9a3 	bl	80024d0 <HAL_GetTick>
 800618a:	4602      	mov	r2, r0
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	1ad3      	subs	r3, r2, r3
 8006190:	2b02      	cmp	r3, #2
 8006192:	d901      	bls.n	8006198 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006194:	2303      	movs	r3, #3
 8006196:	e05c      	b.n	8006252 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006198:	4b11      	ldr	r3, [pc, #68]	@ (80061e0 <HAL_RCC_OscConfig+0x470>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d0f0      	beq.n	8006186 <HAL_RCC_OscConfig+0x416>
 80061a4:	e054      	b.n	8006250 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061a6:	4b10      	ldr	r3, [pc, #64]	@ (80061e8 <HAL_RCC_OscConfig+0x478>)
 80061a8:	2200      	movs	r2, #0
 80061aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061ac:	f7fc f990 	bl	80024d0 <HAL_GetTick>
 80061b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061b2:	e008      	b.n	80061c6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061b4:	f7fc f98c 	bl	80024d0 <HAL_GetTick>
 80061b8:	4602      	mov	r2, r0
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	1ad3      	subs	r3, r2, r3
 80061be:	2b02      	cmp	r3, #2
 80061c0:	d901      	bls.n	80061c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80061c2:	2303      	movs	r3, #3
 80061c4:	e045      	b.n	8006252 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061c6:	4b06      	ldr	r3, [pc, #24]	@ (80061e0 <HAL_RCC_OscConfig+0x470>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d1f0      	bne.n	80061b4 <HAL_RCC_OscConfig+0x444>
 80061d2:	e03d      	b.n	8006250 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	699b      	ldr	r3, [r3, #24]
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d107      	bne.n	80061ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80061dc:	2301      	movs	r3, #1
 80061de:	e038      	b.n	8006252 <HAL_RCC_OscConfig+0x4e2>
 80061e0:	40023800 	.word	0x40023800
 80061e4:	40007000 	.word	0x40007000
 80061e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80061ec:	4b1b      	ldr	r3, [pc, #108]	@ (800625c <HAL_RCC_OscConfig+0x4ec>)
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	699b      	ldr	r3, [r3, #24]
 80061f6:	2b01      	cmp	r3, #1
 80061f8:	d028      	beq.n	800624c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006204:	429a      	cmp	r2, r3
 8006206:	d121      	bne.n	800624c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006212:	429a      	cmp	r2, r3
 8006214:	d11a      	bne.n	800624c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006216:	68fa      	ldr	r2, [r7, #12]
 8006218:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800621c:	4013      	ands	r3, r2
 800621e:	687a      	ldr	r2, [r7, #4]
 8006220:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006222:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006224:	4293      	cmp	r3, r2
 8006226:	d111      	bne.n	800624c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006232:	085b      	lsrs	r3, r3, #1
 8006234:	3b01      	subs	r3, #1
 8006236:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006238:	429a      	cmp	r2, r3
 800623a:	d107      	bne.n	800624c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006246:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006248:	429a      	cmp	r2, r3
 800624a:	d001      	beq.n	8006250 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800624c:	2301      	movs	r3, #1
 800624e:	e000      	b.n	8006252 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006250:	2300      	movs	r3, #0
}
 8006252:	4618      	mov	r0, r3
 8006254:	3718      	adds	r7, #24
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}
 800625a:	bf00      	nop
 800625c:	40023800 	.word	0x40023800

08006260 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b084      	sub	sp, #16
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d101      	bne.n	8006274 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006270:	2301      	movs	r3, #1
 8006272:	e0cc      	b.n	800640e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006274:	4b68      	ldr	r3, [pc, #416]	@ (8006418 <HAL_RCC_ClockConfig+0x1b8>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f003 0307 	and.w	r3, r3, #7
 800627c:	683a      	ldr	r2, [r7, #0]
 800627e:	429a      	cmp	r2, r3
 8006280:	d90c      	bls.n	800629c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006282:	4b65      	ldr	r3, [pc, #404]	@ (8006418 <HAL_RCC_ClockConfig+0x1b8>)
 8006284:	683a      	ldr	r2, [r7, #0]
 8006286:	b2d2      	uxtb	r2, r2
 8006288:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800628a:	4b63      	ldr	r3, [pc, #396]	@ (8006418 <HAL_RCC_ClockConfig+0x1b8>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f003 0307 	and.w	r3, r3, #7
 8006292:	683a      	ldr	r2, [r7, #0]
 8006294:	429a      	cmp	r2, r3
 8006296:	d001      	beq.n	800629c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006298:	2301      	movs	r3, #1
 800629a:	e0b8      	b.n	800640e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f003 0302 	and.w	r3, r3, #2
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d020      	beq.n	80062ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f003 0304 	and.w	r3, r3, #4
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d005      	beq.n	80062c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80062b4:	4b59      	ldr	r3, [pc, #356]	@ (800641c <HAL_RCC_ClockConfig+0x1bc>)
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	4a58      	ldr	r2, [pc, #352]	@ (800641c <HAL_RCC_ClockConfig+0x1bc>)
 80062ba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80062be:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f003 0308 	and.w	r3, r3, #8
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d005      	beq.n	80062d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80062cc:	4b53      	ldr	r3, [pc, #332]	@ (800641c <HAL_RCC_ClockConfig+0x1bc>)
 80062ce:	689b      	ldr	r3, [r3, #8]
 80062d0:	4a52      	ldr	r2, [pc, #328]	@ (800641c <HAL_RCC_ClockConfig+0x1bc>)
 80062d2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80062d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80062d8:	4b50      	ldr	r3, [pc, #320]	@ (800641c <HAL_RCC_ClockConfig+0x1bc>)
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	689b      	ldr	r3, [r3, #8]
 80062e4:	494d      	ldr	r1, [pc, #308]	@ (800641c <HAL_RCC_ClockConfig+0x1bc>)
 80062e6:	4313      	orrs	r3, r2
 80062e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f003 0301 	and.w	r3, r3, #1
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d044      	beq.n	8006380 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	2b01      	cmp	r3, #1
 80062fc:	d107      	bne.n	800630e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062fe:	4b47      	ldr	r3, [pc, #284]	@ (800641c <HAL_RCC_ClockConfig+0x1bc>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006306:	2b00      	cmp	r3, #0
 8006308:	d119      	bne.n	800633e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800630a:	2301      	movs	r3, #1
 800630c:	e07f      	b.n	800640e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	2b02      	cmp	r3, #2
 8006314:	d003      	beq.n	800631e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800631a:	2b03      	cmp	r3, #3
 800631c:	d107      	bne.n	800632e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800631e:	4b3f      	ldr	r3, [pc, #252]	@ (800641c <HAL_RCC_ClockConfig+0x1bc>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006326:	2b00      	cmp	r3, #0
 8006328:	d109      	bne.n	800633e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	e06f      	b.n	800640e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800632e:	4b3b      	ldr	r3, [pc, #236]	@ (800641c <HAL_RCC_ClockConfig+0x1bc>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f003 0302 	and.w	r3, r3, #2
 8006336:	2b00      	cmp	r3, #0
 8006338:	d101      	bne.n	800633e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800633a:	2301      	movs	r3, #1
 800633c:	e067      	b.n	800640e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800633e:	4b37      	ldr	r3, [pc, #220]	@ (800641c <HAL_RCC_ClockConfig+0x1bc>)
 8006340:	689b      	ldr	r3, [r3, #8]
 8006342:	f023 0203 	bic.w	r2, r3, #3
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	4934      	ldr	r1, [pc, #208]	@ (800641c <HAL_RCC_ClockConfig+0x1bc>)
 800634c:	4313      	orrs	r3, r2
 800634e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006350:	f7fc f8be 	bl	80024d0 <HAL_GetTick>
 8006354:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006356:	e00a      	b.n	800636e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006358:	f7fc f8ba 	bl	80024d0 <HAL_GetTick>
 800635c:	4602      	mov	r2, r0
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	1ad3      	subs	r3, r2, r3
 8006362:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006366:	4293      	cmp	r3, r2
 8006368:	d901      	bls.n	800636e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800636a:	2303      	movs	r3, #3
 800636c:	e04f      	b.n	800640e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800636e:	4b2b      	ldr	r3, [pc, #172]	@ (800641c <HAL_RCC_ClockConfig+0x1bc>)
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	f003 020c 	and.w	r2, r3, #12
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	009b      	lsls	r3, r3, #2
 800637c:	429a      	cmp	r2, r3
 800637e:	d1eb      	bne.n	8006358 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006380:	4b25      	ldr	r3, [pc, #148]	@ (8006418 <HAL_RCC_ClockConfig+0x1b8>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f003 0307 	and.w	r3, r3, #7
 8006388:	683a      	ldr	r2, [r7, #0]
 800638a:	429a      	cmp	r2, r3
 800638c:	d20c      	bcs.n	80063a8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800638e:	4b22      	ldr	r3, [pc, #136]	@ (8006418 <HAL_RCC_ClockConfig+0x1b8>)
 8006390:	683a      	ldr	r2, [r7, #0]
 8006392:	b2d2      	uxtb	r2, r2
 8006394:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006396:	4b20      	ldr	r3, [pc, #128]	@ (8006418 <HAL_RCC_ClockConfig+0x1b8>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f003 0307 	and.w	r3, r3, #7
 800639e:	683a      	ldr	r2, [r7, #0]
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d001      	beq.n	80063a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80063a4:	2301      	movs	r3, #1
 80063a6:	e032      	b.n	800640e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f003 0304 	and.w	r3, r3, #4
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d008      	beq.n	80063c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80063b4:	4b19      	ldr	r3, [pc, #100]	@ (800641c <HAL_RCC_ClockConfig+0x1bc>)
 80063b6:	689b      	ldr	r3, [r3, #8]
 80063b8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	68db      	ldr	r3, [r3, #12]
 80063c0:	4916      	ldr	r1, [pc, #88]	@ (800641c <HAL_RCC_ClockConfig+0x1bc>)
 80063c2:	4313      	orrs	r3, r2
 80063c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f003 0308 	and.w	r3, r3, #8
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d009      	beq.n	80063e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80063d2:	4b12      	ldr	r3, [pc, #72]	@ (800641c <HAL_RCC_ClockConfig+0x1bc>)
 80063d4:	689b      	ldr	r3, [r3, #8]
 80063d6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	691b      	ldr	r3, [r3, #16]
 80063de:	00db      	lsls	r3, r3, #3
 80063e0:	490e      	ldr	r1, [pc, #56]	@ (800641c <HAL_RCC_ClockConfig+0x1bc>)
 80063e2:	4313      	orrs	r3, r2
 80063e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80063e6:	f000 f821 	bl	800642c <HAL_RCC_GetSysClockFreq>
 80063ea:	4602      	mov	r2, r0
 80063ec:	4b0b      	ldr	r3, [pc, #44]	@ (800641c <HAL_RCC_ClockConfig+0x1bc>)
 80063ee:	689b      	ldr	r3, [r3, #8]
 80063f0:	091b      	lsrs	r3, r3, #4
 80063f2:	f003 030f 	and.w	r3, r3, #15
 80063f6:	490a      	ldr	r1, [pc, #40]	@ (8006420 <HAL_RCC_ClockConfig+0x1c0>)
 80063f8:	5ccb      	ldrb	r3, [r1, r3]
 80063fa:	fa22 f303 	lsr.w	r3, r2, r3
 80063fe:	4a09      	ldr	r2, [pc, #36]	@ (8006424 <HAL_RCC_ClockConfig+0x1c4>)
 8006400:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006402:	4b09      	ldr	r3, [pc, #36]	@ (8006428 <HAL_RCC_ClockConfig+0x1c8>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4618      	mov	r0, r3
 8006408:	f7fc f81e 	bl	8002448 <HAL_InitTick>

  return HAL_OK;
 800640c:	2300      	movs	r3, #0
}
 800640e:	4618      	mov	r0, r3
 8006410:	3710      	adds	r7, #16
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}
 8006416:	bf00      	nop
 8006418:	40023c00 	.word	0x40023c00
 800641c:	40023800 	.word	0x40023800
 8006420:	0800d6b0 	.word	0x0800d6b0
 8006424:	20000000 	.word	0x20000000
 8006428:	20000004 	.word	0x20000004

0800642c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800642c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006430:	b094      	sub	sp, #80	@ 0x50
 8006432:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006434:	2300      	movs	r3, #0
 8006436:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006438:	2300      	movs	r3, #0
 800643a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800643c:	2300      	movs	r3, #0
 800643e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006440:	2300      	movs	r3, #0
 8006442:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006444:	4b79      	ldr	r3, [pc, #484]	@ (800662c <HAL_RCC_GetSysClockFreq+0x200>)
 8006446:	689b      	ldr	r3, [r3, #8]
 8006448:	f003 030c 	and.w	r3, r3, #12
 800644c:	2b08      	cmp	r3, #8
 800644e:	d00d      	beq.n	800646c <HAL_RCC_GetSysClockFreq+0x40>
 8006450:	2b08      	cmp	r3, #8
 8006452:	f200 80e1 	bhi.w	8006618 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006456:	2b00      	cmp	r3, #0
 8006458:	d002      	beq.n	8006460 <HAL_RCC_GetSysClockFreq+0x34>
 800645a:	2b04      	cmp	r3, #4
 800645c:	d003      	beq.n	8006466 <HAL_RCC_GetSysClockFreq+0x3a>
 800645e:	e0db      	b.n	8006618 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006460:	4b73      	ldr	r3, [pc, #460]	@ (8006630 <HAL_RCC_GetSysClockFreq+0x204>)
 8006462:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006464:	e0db      	b.n	800661e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006466:	4b73      	ldr	r3, [pc, #460]	@ (8006634 <HAL_RCC_GetSysClockFreq+0x208>)
 8006468:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800646a:	e0d8      	b.n	800661e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800646c:	4b6f      	ldr	r3, [pc, #444]	@ (800662c <HAL_RCC_GetSysClockFreq+0x200>)
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006474:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006476:	4b6d      	ldr	r3, [pc, #436]	@ (800662c <HAL_RCC_GetSysClockFreq+0x200>)
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800647e:	2b00      	cmp	r3, #0
 8006480:	d063      	beq.n	800654a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006482:	4b6a      	ldr	r3, [pc, #424]	@ (800662c <HAL_RCC_GetSysClockFreq+0x200>)
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	099b      	lsrs	r3, r3, #6
 8006488:	2200      	movs	r2, #0
 800648a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800648c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800648e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006490:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006494:	633b      	str	r3, [r7, #48]	@ 0x30
 8006496:	2300      	movs	r3, #0
 8006498:	637b      	str	r3, [r7, #52]	@ 0x34
 800649a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800649e:	4622      	mov	r2, r4
 80064a0:	462b      	mov	r3, r5
 80064a2:	f04f 0000 	mov.w	r0, #0
 80064a6:	f04f 0100 	mov.w	r1, #0
 80064aa:	0159      	lsls	r1, r3, #5
 80064ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80064b0:	0150      	lsls	r0, r2, #5
 80064b2:	4602      	mov	r2, r0
 80064b4:	460b      	mov	r3, r1
 80064b6:	4621      	mov	r1, r4
 80064b8:	1a51      	subs	r1, r2, r1
 80064ba:	6139      	str	r1, [r7, #16]
 80064bc:	4629      	mov	r1, r5
 80064be:	eb63 0301 	sbc.w	r3, r3, r1
 80064c2:	617b      	str	r3, [r7, #20]
 80064c4:	f04f 0200 	mov.w	r2, #0
 80064c8:	f04f 0300 	mov.w	r3, #0
 80064cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80064d0:	4659      	mov	r1, fp
 80064d2:	018b      	lsls	r3, r1, #6
 80064d4:	4651      	mov	r1, sl
 80064d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80064da:	4651      	mov	r1, sl
 80064dc:	018a      	lsls	r2, r1, #6
 80064de:	4651      	mov	r1, sl
 80064e0:	ebb2 0801 	subs.w	r8, r2, r1
 80064e4:	4659      	mov	r1, fp
 80064e6:	eb63 0901 	sbc.w	r9, r3, r1
 80064ea:	f04f 0200 	mov.w	r2, #0
 80064ee:	f04f 0300 	mov.w	r3, #0
 80064f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80064f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80064fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80064fe:	4690      	mov	r8, r2
 8006500:	4699      	mov	r9, r3
 8006502:	4623      	mov	r3, r4
 8006504:	eb18 0303 	adds.w	r3, r8, r3
 8006508:	60bb      	str	r3, [r7, #8]
 800650a:	462b      	mov	r3, r5
 800650c:	eb49 0303 	adc.w	r3, r9, r3
 8006510:	60fb      	str	r3, [r7, #12]
 8006512:	f04f 0200 	mov.w	r2, #0
 8006516:	f04f 0300 	mov.w	r3, #0
 800651a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800651e:	4629      	mov	r1, r5
 8006520:	024b      	lsls	r3, r1, #9
 8006522:	4621      	mov	r1, r4
 8006524:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006528:	4621      	mov	r1, r4
 800652a:	024a      	lsls	r2, r1, #9
 800652c:	4610      	mov	r0, r2
 800652e:	4619      	mov	r1, r3
 8006530:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006532:	2200      	movs	r2, #0
 8006534:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006536:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006538:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800653c:	f7fa fb84 	bl	8000c48 <__aeabi_uldivmod>
 8006540:	4602      	mov	r2, r0
 8006542:	460b      	mov	r3, r1
 8006544:	4613      	mov	r3, r2
 8006546:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006548:	e058      	b.n	80065fc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800654a:	4b38      	ldr	r3, [pc, #224]	@ (800662c <HAL_RCC_GetSysClockFreq+0x200>)
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	099b      	lsrs	r3, r3, #6
 8006550:	2200      	movs	r2, #0
 8006552:	4618      	mov	r0, r3
 8006554:	4611      	mov	r1, r2
 8006556:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800655a:	623b      	str	r3, [r7, #32]
 800655c:	2300      	movs	r3, #0
 800655e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006560:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006564:	4642      	mov	r2, r8
 8006566:	464b      	mov	r3, r9
 8006568:	f04f 0000 	mov.w	r0, #0
 800656c:	f04f 0100 	mov.w	r1, #0
 8006570:	0159      	lsls	r1, r3, #5
 8006572:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006576:	0150      	lsls	r0, r2, #5
 8006578:	4602      	mov	r2, r0
 800657a:	460b      	mov	r3, r1
 800657c:	4641      	mov	r1, r8
 800657e:	ebb2 0a01 	subs.w	sl, r2, r1
 8006582:	4649      	mov	r1, r9
 8006584:	eb63 0b01 	sbc.w	fp, r3, r1
 8006588:	f04f 0200 	mov.w	r2, #0
 800658c:	f04f 0300 	mov.w	r3, #0
 8006590:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006594:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006598:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800659c:	ebb2 040a 	subs.w	r4, r2, sl
 80065a0:	eb63 050b 	sbc.w	r5, r3, fp
 80065a4:	f04f 0200 	mov.w	r2, #0
 80065a8:	f04f 0300 	mov.w	r3, #0
 80065ac:	00eb      	lsls	r3, r5, #3
 80065ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80065b2:	00e2      	lsls	r2, r4, #3
 80065b4:	4614      	mov	r4, r2
 80065b6:	461d      	mov	r5, r3
 80065b8:	4643      	mov	r3, r8
 80065ba:	18e3      	adds	r3, r4, r3
 80065bc:	603b      	str	r3, [r7, #0]
 80065be:	464b      	mov	r3, r9
 80065c0:	eb45 0303 	adc.w	r3, r5, r3
 80065c4:	607b      	str	r3, [r7, #4]
 80065c6:	f04f 0200 	mov.w	r2, #0
 80065ca:	f04f 0300 	mov.w	r3, #0
 80065ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80065d2:	4629      	mov	r1, r5
 80065d4:	028b      	lsls	r3, r1, #10
 80065d6:	4621      	mov	r1, r4
 80065d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80065dc:	4621      	mov	r1, r4
 80065de:	028a      	lsls	r2, r1, #10
 80065e0:	4610      	mov	r0, r2
 80065e2:	4619      	mov	r1, r3
 80065e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065e6:	2200      	movs	r2, #0
 80065e8:	61bb      	str	r3, [r7, #24]
 80065ea:	61fa      	str	r2, [r7, #28]
 80065ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80065f0:	f7fa fb2a 	bl	8000c48 <__aeabi_uldivmod>
 80065f4:	4602      	mov	r2, r0
 80065f6:	460b      	mov	r3, r1
 80065f8:	4613      	mov	r3, r2
 80065fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80065fc:	4b0b      	ldr	r3, [pc, #44]	@ (800662c <HAL_RCC_GetSysClockFreq+0x200>)
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	0c1b      	lsrs	r3, r3, #16
 8006602:	f003 0303 	and.w	r3, r3, #3
 8006606:	3301      	adds	r3, #1
 8006608:	005b      	lsls	r3, r3, #1
 800660a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800660c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800660e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006610:	fbb2 f3f3 	udiv	r3, r2, r3
 8006614:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006616:	e002      	b.n	800661e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006618:	4b05      	ldr	r3, [pc, #20]	@ (8006630 <HAL_RCC_GetSysClockFreq+0x204>)
 800661a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800661c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800661e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006620:	4618      	mov	r0, r3
 8006622:	3750      	adds	r7, #80	@ 0x50
 8006624:	46bd      	mov	sp, r7
 8006626:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800662a:	bf00      	nop
 800662c:	40023800 	.word	0x40023800
 8006630:	00f42400 	.word	0x00f42400
 8006634:	007a1200 	.word	0x007a1200

08006638 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006638:	b480      	push	{r7}
 800663a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800663c:	4b03      	ldr	r3, [pc, #12]	@ (800664c <HAL_RCC_GetHCLKFreq+0x14>)
 800663e:	681b      	ldr	r3, [r3, #0]
}
 8006640:	4618      	mov	r0, r3
 8006642:	46bd      	mov	sp, r7
 8006644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006648:	4770      	bx	lr
 800664a:	bf00      	nop
 800664c:	20000000 	.word	0x20000000

08006650 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006654:	f7ff fff0 	bl	8006638 <HAL_RCC_GetHCLKFreq>
 8006658:	4602      	mov	r2, r0
 800665a:	4b05      	ldr	r3, [pc, #20]	@ (8006670 <HAL_RCC_GetPCLK1Freq+0x20>)
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	0a9b      	lsrs	r3, r3, #10
 8006660:	f003 0307 	and.w	r3, r3, #7
 8006664:	4903      	ldr	r1, [pc, #12]	@ (8006674 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006666:	5ccb      	ldrb	r3, [r1, r3]
 8006668:	fa22 f303 	lsr.w	r3, r2, r3
}
 800666c:	4618      	mov	r0, r3
 800666e:	bd80      	pop	{r7, pc}
 8006670:	40023800 	.word	0x40023800
 8006674:	0800d6c0 	.word	0x0800d6c0

08006678 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800667c:	f7ff ffdc 	bl	8006638 <HAL_RCC_GetHCLKFreq>
 8006680:	4602      	mov	r2, r0
 8006682:	4b05      	ldr	r3, [pc, #20]	@ (8006698 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006684:	689b      	ldr	r3, [r3, #8]
 8006686:	0b5b      	lsrs	r3, r3, #13
 8006688:	f003 0307 	and.w	r3, r3, #7
 800668c:	4903      	ldr	r1, [pc, #12]	@ (800669c <HAL_RCC_GetPCLK2Freq+0x24>)
 800668e:	5ccb      	ldrb	r3, [r1, r3]
 8006690:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006694:	4618      	mov	r0, r3
 8006696:	bd80      	pop	{r7, pc}
 8006698:	40023800 	.word	0x40023800
 800669c:	0800d6c0 	.word	0x0800d6c0

080066a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b082      	sub	sp, #8
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d101      	bne.n	80066b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80066ae:	2301      	movs	r3, #1
 80066b0:	e042      	b.n	8006738 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80066b8:	b2db      	uxtb	r3, r3
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d106      	bne.n	80066cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2200      	movs	r2, #0
 80066c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f7fb fd18 	bl	80020fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2224      	movs	r2, #36	@ 0x24
 80066d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	68da      	ldr	r2, [r3, #12]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80066e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f000 f973 	bl	80069d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	691a      	ldr	r2, [r3, #16]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80066f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	695a      	ldr	r2, [r3, #20]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006708:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	68da      	ldr	r2, [r3, #12]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006718:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2200      	movs	r2, #0
 800671e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2220      	movs	r2, #32
 8006724:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2220      	movs	r2, #32
 800672c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2200      	movs	r2, #0
 8006734:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006736:	2300      	movs	r3, #0
}
 8006738:	4618      	mov	r0, r3
 800673a:	3708      	adds	r7, #8
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}

08006740 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b08a      	sub	sp, #40	@ 0x28
 8006744:	af02      	add	r7, sp, #8
 8006746:	60f8      	str	r0, [r7, #12]
 8006748:	60b9      	str	r1, [r7, #8]
 800674a:	603b      	str	r3, [r7, #0]
 800674c:	4613      	mov	r3, r2
 800674e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006750:	2300      	movs	r3, #0
 8006752:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800675a:	b2db      	uxtb	r3, r3
 800675c:	2b20      	cmp	r3, #32
 800675e:	d175      	bne.n	800684c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d002      	beq.n	800676c <HAL_UART_Transmit+0x2c>
 8006766:	88fb      	ldrh	r3, [r7, #6]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d101      	bne.n	8006770 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800676c:	2301      	movs	r3, #1
 800676e:	e06e      	b.n	800684e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2200      	movs	r2, #0
 8006774:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2221      	movs	r2, #33	@ 0x21
 800677a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800677e:	f7fb fea7 	bl	80024d0 <HAL_GetTick>
 8006782:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	88fa      	ldrh	r2, [r7, #6]
 8006788:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	88fa      	ldrh	r2, [r7, #6]
 800678e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	689b      	ldr	r3, [r3, #8]
 8006794:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006798:	d108      	bne.n	80067ac <HAL_UART_Transmit+0x6c>
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	691b      	ldr	r3, [r3, #16]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d104      	bne.n	80067ac <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80067a2:	2300      	movs	r3, #0
 80067a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	61bb      	str	r3, [r7, #24]
 80067aa:	e003      	b.n	80067b4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80067b0:	2300      	movs	r3, #0
 80067b2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80067b4:	e02e      	b.n	8006814 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	9300      	str	r3, [sp, #0]
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	2200      	movs	r2, #0
 80067be:	2180      	movs	r1, #128	@ 0x80
 80067c0:	68f8      	ldr	r0, [r7, #12]
 80067c2:	f000 f848 	bl	8006856 <UART_WaitOnFlagUntilTimeout>
 80067c6:	4603      	mov	r3, r0
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d005      	beq.n	80067d8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2220      	movs	r2, #32
 80067d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80067d4:	2303      	movs	r3, #3
 80067d6:	e03a      	b.n	800684e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80067d8:	69fb      	ldr	r3, [r7, #28]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d10b      	bne.n	80067f6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80067de:	69bb      	ldr	r3, [r7, #24]
 80067e0:	881b      	ldrh	r3, [r3, #0]
 80067e2:	461a      	mov	r2, r3
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80067ec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80067ee:	69bb      	ldr	r3, [r7, #24]
 80067f0:	3302      	adds	r3, #2
 80067f2:	61bb      	str	r3, [r7, #24]
 80067f4:	e007      	b.n	8006806 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80067f6:	69fb      	ldr	r3, [r7, #28]
 80067f8:	781a      	ldrb	r2, [r3, #0]
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006800:	69fb      	ldr	r3, [r7, #28]
 8006802:	3301      	adds	r3, #1
 8006804:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800680a:	b29b      	uxth	r3, r3
 800680c:	3b01      	subs	r3, #1
 800680e:	b29a      	uxth	r2, r3
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006818:	b29b      	uxth	r3, r3
 800681a:	2b00      	cmp	r3, #0
 800681c:	d1cb      	bne.n	80067b6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	9300      	str	r3, [sp, #0]
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	2200      	movs	r2, #0
 8006826:	2140      	movs	r1, #64	@ 0x40
 8006828:	68f8      	ldr	r0, [r7, #12]
 800682a:	f000 f814 	bl	8006856 <UART_WaitOnFlagUntilTimeout>
 800682e:	4603      	mov	r3, r0
 8006830:	2b00      	cmp	r3, #0
 8006832:	d005      	beq.n	8006840 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	2220      	movs	r2, #32
 8006838:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800683c:	2303      	movs	r3, #3
 800683e:	e006      	b.n	800684e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	2220      	movs	r2, #32
 8006844:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006848:	2300      	movs	r3, #0
 800684a:	e000      	b.n	800684e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800684c:	2302      	movs	r3, #2
  }
}
 800684e:	4618      	mov	r0, r3
 8006850:	3720      	adds	r7, #32
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}

08006856 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006856:	b580      	push	{r7, lr}
 8006858:	b086      	sub	sp, #24
 800685a:	af00      	add	r7, sp, #0
 800685c:	60f8      	str	r0, [r7, #12]
 800685e:	60b9      	str	r1, [r7, #8]
 8006860:	603b      	str	r3, [r7, #0]
 8006862:	4613      	mov	r3, r2
 8006864:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006866:	e03b      	b.n	80068e0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006868:	6a3b      	ldr	r3, [r7, #32]
 800686a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800686e:	d037      	beq.n	80068e0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006870:	f7fb fe2e 	bl	80024d0 <HAL_GetTick>
 8006874:	4602      	mov	r2, r0
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	1ad3      	subs	r3, r2, r3
 800687a:	6a3a      	ldr	r2, [r7, #32]
 800687c:	429a      	cmp	r2, r3
 800687e:	d302      	bcc.n	8006886 <UART_WaitOnFlagUntilTimeout+0x30>
 8006880:	6a3b      	ldr	r3, [r7, #32]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d101      	bne.n	800688a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006886:	2303      	movs	r3, #3
 8006888:	e03a      	b.n	8006900 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	68db      	ldr	r3, [r3, #12]
 8006890:	f003 0304 	and.w	r3, r3, #4
 8006894:	2b00      	cmp	r3, #0
 8006896:	d023      	beq.n	80068e0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	2b80      	cmp	r3, #128	@ 0x80
 800689c:	d020      	beq.n	80068e0 <UART_WaitOnFlagUntilTimeout+0x8a>
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	2b40      	cmp	r3, #64	@ 0x40
 80068a2:	d01d      	beq.n	80068e0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f003 0308 	and.w	r3, r3, #8
 80068ae:	2b08      	cmp	r3, #8
 80068b0:	d116      	bne.n	80068e0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80068b2:	2300      	movs	r3, #0
 80068b4:	617b      	str	r3, [r7, #20]
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	617b      	str	r3, [r7, #20]
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	617b      	str	r3, [r7, #20]
 80068c6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80068c8:	68f8      	ldr	r0, [r7, #12]
 80068ca:	f000 f81d 	bl	8006908 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2208      	movs	r2, #8
 80068d2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2200      	movs	r2, #0
 80068d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80068dc:	2301      	movs	r3, #1
 80068de:	e00f      	b.n	8006900 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	681a      	ldr	r2, [r3, #0]
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	4013      	ands	r3, r2
 80068ea:	68ba      	ldr	r2, [r7, #8]
 80068ec:	429a      	cmp	r2, r3
 80068ee:	bf0c      	ite	eq
 80068f0:	2301      	moveq	r3, #1
 80068f2:	2300      	movne	r3, #0
 80068f4:	b2db      	uxtb	r3, r3
 80068f6:	461a      	mov	r2, r3
 80068f8:	79fb      	ldrb	r3, [r7, #7]
 80068fa:	429a      	cmp	r2, r3
 80068fc:	d0b4      	beq.n	8006868 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80068fe:	2300      	movs	r3, #0
}
 8006900:	4618      	mov	r0, r3
 8006902:	3718      	adds	r7, #24
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}

08006908 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006908:	b480      	push	{r7}
 800690a:	b095      	sub	sp, #84	@ 0x54
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	330c      	adds	r3, #12
 8006916:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006918:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800691a:	e853 3f00 	ldrex	r3, [r3]
 800691e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006922:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006926:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	330c      	adds	r3, #12
 800692e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006930:	643a      	str	r2, [r7, #64]	@ 0x40
 8006932:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006934:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006936:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006938:	e841 2300 	strex	r3, r2, [r1]
 800693c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800693e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006940:	2b00      	cmp	r3, #0
 8006942:	d1e5      	bne.n	8006910 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	3314      	adds	r3, #20
 800694a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800694c:	6a3b      	ldr	r3, [r7, #32]
 800694e:	e853 3f00 	ldrex	r3, [r3]
 8006952:	61fb      	str	r3, [r7, #28]
   return(result);
 8006954:	69fb      	ldr	r3, [r7, #28]
 8006956:	f023 0301 	bic.w	r3, r3, #1
 800695a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	3314      	adds	r3, #20
 8006962:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006964:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006966:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006968:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800696a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800696c:	e841 2300 	strex	r3, r2, [r1]
 8006970:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006974:	2b00      	cmp	r3, #0
 8006976:	d1e5      	bne.n	8006944 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800697c:	2b01      	cmp	r3, #1
 800697e:	d119      	bne.n	80069b4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	330c      	adds	r3, #12
 8006986:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	e853 3f00 	ldrex	r3, [r3]
 800698e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	f023 0310 	bic.w	r3, r3, #16
 8006996:	647b      	str	r3, [r7, #68]	@ 0x44
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	330c      	adds	r3, #12
 800699e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80069a0:	61ba      	str	r2, [r7, #24]
 80069a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069a4:	6979      	ldr	r1, [r7, #20]
 80069a6:	69ba      	ldr	r2, [r7, #24]
 80069a8:	e841 2300 	strex	r3, r2, [r1]
 80069ac:	613b      	str	r3, [r7, #16]
   return(result);
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d1e5      	bne.n	8006980 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2220      	movs	r2, #32
 80069b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2200      	movs	r2, #0
 80069c0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80069c2:	bf00      	nop
 80069c4:	3754      	adds	r7, #84	@ 0x54
 80069c6:	46bd      	mov	sp, r7
 80069c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069cc:	4770      	bx	lr
	...

080069d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80069d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80069d4:	b0c0      	sub	sp, #256	@ 0x100
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	691b      	ldr	r3, [r3, #16]
 80069e4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80069e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069ec:	68d9      	ldr	r1, [r3, #12]
 80069ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069f2:	681a      	ldr	r2, [r3, #0]
 80069f4:	ea40 0301 	orr.w	r3, r0, r1
 80069f8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80069fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069fe:	689a      	ldr	r2, [r3, #8]
 8006a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a04:	691b      	ldr	r3, [r3, #16]
 8006a06:	431a      	orrs	r2, r3
 8006a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a0c:	695b      	ldr	r3, [r3, #20]
 8006a0e:	431a      	orrs	r2, r3
 8006a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a14:	69db      	ldr	r3, [r3, #28]
 8006a16:	4313      	orrs	r3, r2
 8006a18:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	68db      	ldr	r3, [r3, #12]
 8006a24:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006a28:	f021 010c 	bic.w	r1, r1, #12
 8006a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a30:	681a      	ldr	r2, [r3, #0]
 8006a32:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006a36:	430b      	orrs	r3, r1
 8006a38:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006a3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	695b      	ldr	r3, [r3, #20]
 8006a42:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006a46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a4a:	6999      	ldr	r1, [r3, #24]
 8006a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a50:	681a      	ldr	r2, [r3, #0]
 8006a52:	ea40 0301 	orr.w	r3, r0, r1
 8006a56:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a5c:	681a      	ldr	r2, [r3, #0]
 8006a5e:	4b8f      	ldr	r3, [pc, #572]	@ (8006c9c <UART_SetConfig+0x2cc>)
 8006a60:	429a      	cmp	r2, r3
 8006a62:	d005      	beq.n	8006a70 <UART_SetConfig+0xa0>
 8006a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	4b8d      	ldr	r3, [pc, #564]	@ (8006ca0 <UART_SetConfig+0x2d0>)
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	d104      	bne.n	8006a7a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006a70:	f7ff fe02 	bl	8006678 <HAL_RCC_GetPCLK2Freq>
 8006a74:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006a78:	e003      	b.n	8006a82 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006a7a:	f7ff fde9 	bl	8006650 <HAL_RCC_GetPCLK1Freq>
 8006a7e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a86:	69db      	ldr	r3, [r3, #28]
 8006a88:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a8c:	f040 810c 	bne.w	8006ca8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006a90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a94:	2200      	movs	r2, #0
 8006a96:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006a9a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006a9e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006aa2:	4622      	mov	r2, r4
 8006aa4:	462b      	mov	r3, r5
 8006aa6:	1891      	adds	r1, r2, r2
 8006aa8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006aaa:	415b      	adcs	r3, r3
 8006aac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006aae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006ab2:	4621      	mov	r1, r4
 8006ab4:	eb12 0801 	adds.w	r8, r2, r1
 8006ab8:	4629      	mov	r1, r5
 8006aba:	eb43 0901 	adc.w	r9, r3, r1
 8006abe:	f04f 0200 	mov.w	r2, #0
 8006ac2:	f04f 0300 	mov.w	r3, #0
 8006ac6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006aca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006ace:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006ad2:	4690      	mov	r8, r2
 8006ad4:	4699      	mov	r9, r3
 8006ad6:	4623      	mov	r3, r4
 8006ad8:	eb18 0303 	adds.w	r3, r8, r3
 8006adc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006ae0:	462b      	mov	r3, r5
 8006ae2:	eb49 0303 	adc.w	r3, r9, r3
 8006ae6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006aea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	2200      	movs	r2, #0
 8006af2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006af6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006afa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006afe:	460b      	mov	r3, r1
 8006b00:	18db      	adds	r3, r3, r3
 8006b02:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b04:	4613      	mov	r3, r2
 8006b06:	eb42 0303 	adc.w	r3, r2, r3
 8006b0a:	657b      	str	r3, [r7, #84]	@ 0x54
 8006b0c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006b10:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006b14:	f7fa f898 	bl	8000c48 <__aeabi_uldivmod>
 8006b18:	4602      	mov	r2, r0
 8006b1a:	460b      	mov	r3, r1
 8006b1c:	4b61      	ldr	r3, [pc, #388]	@ (8006ca4 <UART_SetConfig+0x2d4>)
 8006b1e:	fba3 2302 	umull	r2, r3, r3, r2
 8006b22:	095b      	lsrs	r3, r3, #5
 8006b24:	011c      	lsls	r4, r3, #4
 8006b26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006b30:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006b34:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006b38:	4642      	mov	r2, r8
 8006b3a:	464b      	mov	r3, r9
 8006b3c:	1891      	adds	r1, r2, r2
 8006b3e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006b40:	415b      	adcs	r3, r3
 8006b42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b44:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006b48:	4641      	mov	r1, r8
 8006b4a:	eb12 0a01 	adds.w	sl, r2, r1
 8006b4e:	4649      	mov	r1, r9
 8006b50:	eb43 0b01 	adc.w	fp, r3, r1
 8006b54:	f04f 0200 	mov.w	r2, #0
 8006b58:	f04f 0300 	mov.w	r3, #0
 8006b5c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006b60:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006b64:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006b68:	4692      	mov	sl, r2
 8006b6a:	469b      	mov	fp, r3
 8006b6c:	4643      	mov	r3, r8
 8006b6e:	eb1a 0303 	adds.w	r3, sl, r3
 8006b72:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006b76:	464b      	mov	r3, r9
 8006b78:	eb4b 0303 	adc.w	r3, fp, r3
 8006b7c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	2200      	movs	r2, #0
 8006b88:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006b8c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006b90:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006b94:	460b      	mov	r3, r1
 8006b96:	18db      	adds	r3, r3, r3
 8006b98:	643b      	str	r3, [r7, #64]	@ 0x40
 8006b9a:	4613      	mov	r3, r2
 8006b9c:	eb42 0303 	adc.w	r3, r2, r3
 8006ba0:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ba2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006ba6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006baa:	f7fa f84d 	bl	8000c48 <__aeabi_uldivmod>
 8006bae:	4602      	mov	r2, r0
 8006bb0:	460b      	mov	r3, r1
 8006bb2:	4611      	mov	r1, r2
 8006bb4:	4b3b      	ldr	r3, [pc, #236]	@ (8006ca4 <UART_SetConfig+0x2d4>)
 8006bb6:	fba3 2301 	umull	r2, r3, r3, r1
 8006bba:	095b      	lsrs	r3, r3, #5
 8006bbc:	2264      	movs	r2, #100	@ 0x64
 8006bbe:	fb02 f303 	mul.w	r3, r2, r3
 8006bc2:	1acb      	subs	r3, r1, r3
 8006bc4:	00db      	lsls	r3, r3, #3
 8006bc6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006bca:	4b36      	ldr	r3, [pc, #216]	@ (8006ca4 <UART_SetConfig+0x2d4>)
 8006bcc:	fba3 2302 	umull	r2, r3, r3, r2
 8006bd0:	095b      	lsrs	r3, r3, #5
 8006bd2:	005b      	lsls	r3, r3, #1
 8006bd4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006bd8:	441c      	add	r4, r3
 8006bda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006bde:	2200      	movs	r2, #0
 8006be0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006be4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006be8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006bec:	4642      	mov	r2, r8
 8006bee:	464b      	mov	r3, r9
 8006bf0:	1891      	adds	r1, r2, r2
 8006bf2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006bf4:	415b      	adcs	r3, r3
 8006bf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006bf8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006bfc:	4641      	mov	r1, r8
 8006bfe:	1851      	adds	r1, r2, r1
 8006c00:	6339      	str	r1, [r7, #48]	@ 0x30
 8006c02:	4649      	mov	r1, r9
 8006c04:	414b      	adcs	r3, r1
 8006c06:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c08:	f04f 0200 	mov.w	r2, #0
 8006c0c:	f04f 0300 	mov.w	r3, #0
 8006c10:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006c14:	4659      	mov	r1, fp
 8006c16:	00cb      	lsls	r3, r1, #3
 8006c18:	4651      	mov	r1, sl
 8006c1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c1e:	4651      	mov	r1, sl
 8006c20:	00ca      	lsls	r2, r1, #3
 8006c22:	4610      	mov	r0, r2
 8006c24:	4619      	mov	r1, r3
 8006c26:	4603      	mov	r3, r0
 8006c28:	4642      	mov	r2, r8
 8006c2a:	189b      	adds	r3, r3, r2
 8006c2c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006c30:	464b      	mov	r3, r9
 8006c32:	460a      	mov	r2, r1
 8006c34:	eb42 0303 	adc.w	r3, r2, r3
 8006c38:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006c3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	2200      	movs	r2, #0
 8006c44:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006c48:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006c4c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006c50:	460b      	mov	r3, r1
 8006c52:	18db      	adds	r3, r3, r3
 8006c54:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006c56:	4613      	mov	r3, r2
 8006c58:	eb42 0303 	adc.w	r3, r2, r3
 8006c5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c5e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006c62:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006c66:	f7f9 ffef 	bl	8000c48 <__aeabi_uldivmod>
 8006c6a:	4602      	mov	r2, r0
 8006c6c:	460b      	mov	r3, r1
 8006c6e:	4b0d      	ldr	r3, [pc, #52]	@ (8006ca4 <UART_SetConfig+0x2d4>)
 8006c70:	fba3 1302 	umull	r1, r3, r3, r2
 8006c74:	095b      	lsrs	r3, r3, #5
 8006c76:	2164      	movs	r1, #100	@ 0x64
 8006c78:	fb01 f303 	mul.w	r3, r1, r3
 8006c7c:	1ad3      	subs	r3, r2, r3
 8006c7e:	00db      	lsls	r3, r3, #3
 8006c80:	3332      	adds	r3, #50	@ 0x32
 8006c82:	4a08      	ldr	r2, [pc, #32]	@ (8006ca4 <UART_SetConfig+0x2d4>)
 8006c84:	fba2 2303 	umull	r2, r3, r2, r3
 8006c88:	095b      	lsrs	r3, r3, #5
 8006c8a:	f003 0207 	and.w	r2, r3, #7
 8006c8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4422      	add	r2, r4
 8006c96:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006c98:	e106      	b.n	8006ea8 <UART_SetConfig+0x4d8>
 8006c9a:	bf00      	nop
 8006c9c:	40011000 	.word	0x40011000
 8006ca0:	40011400 	.word	0x40011400
 8006ca4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006ca8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006cac:	2200      	movs	r2, #0
 8006cae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006cb2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006cb6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006cba:	4642      	mov	r2, r8
 8006cbc:	464b      	mov	r3, r9
 8006cbe:	1891      	adds	r1, r2, r2
 8006cc0:	6239      	str	r1, [r7, #32]
 8006cc2:	415b      	adcs	r3, r3
 8006cc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8006cc6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006cca:	4641      	mov	r1, r8
 8006ccc:	1854      	adds	r4, r2, r1
 8006cce:	4649      	mov	r1, r9
 8006cd0:	eb43 0501 	adc.w	r5, r3, r1
 8006cd4:	f04f 0200 	mov.w	r2, #0
 8006cd8:	f04f 0300 	mov.w	r3, #0
 8006cdc:	00eb      	lsls	r3, r5, #3
 8006cde:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006ce2:	00e2      	lsls	r2, r4, #3
 8006ce4:	4614      	mov	r4, r2
 8006ce6:	461d      	mov	r5, r3
 8006ce8:	4643      	mov	r3, r8
 8006cea:	18e3      	adds	r3, r4, r3
 8006cec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006cf0:	464b      	mov	r3, r9
 8006cf2:	eb45 0303 	adc.w	r3, r5, r3
 8006cf6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006cfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	2200      	movs	r2, #0
 8006d02:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006d06:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006d0a:	f04f 0200 	mov.w	r2, #0
 8006d0e:	f04f 0300 	mov.w	r3, #0
 8006d12:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006d16:	4629      	mov	r1, r5
 8006d18:	008b      	lsls	r3, r1, #2
 8006d1a:	4621      	mov	r1, r4
 8006d1c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d20:	4621      	mov	r1, r4
 8006d22:	008a      	lsls	r2, r1, #2
 8006d24:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006d28:	f7f9 ff8e 	bl	8000c48 <__aeabi_uldivmod>
 8006d2c:	4602      	mov	r2, r0
 8006d2e:	460b      	mov	r3, r1
 8006d30:	4b60      	ldr	r3, [pc, #384]	@ (8006eb4 <UART_SetConfig+0x4e4>)
 8006d32:	fba3 2302 	umull	r2, r3, r3, r2
 8006d36:	095b      	lsrs	r3, r3, #5
 8006d38:	011c      	lsls	r4, r3, #4
 8006d3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d3e:	2200      	movs	r2, #0
 8006d40:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006d44:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006d48:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006d4c:	4642      	mov	r2, r8
 8006d4e:	464b      	mov	r3, r9
 8006d50:	1891      	adds	r1, r2, r2
 8006d52:	61b9      	str	r1, [r7, #24]
 8006d54:	415b      	adcs	r3, r3
 8006d56:	61fb      	str	r3, [r7, #28]
 8006d58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006d5c:	4641      	mov	r1, r8
 8006d5e:	1851      	adds	r1, r2, r1
 8006d60:	6139      	str	r1, [r7, #16]
 8006d62:	4649      	mov	r1, r9
 8006d64:	414b      	adcs	r3, r1
 8006d66:	617b      	str	r3, [r7, #20]
 8006d68:	f04f 0200 	mov.w	r2, #0
 8006d6c:	f04f 0300 	mov.w	r3, #0
 8006d70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006d74:	4659      	mov	r1, fp
 8006d76:	00cb      	lsls	r3, r1, #3
 8006d78:	4651      	mov	r1, sl
 8006d7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d7e:	4651      	mov	r1, sl
 8006d80:	00ca      	lsls	r2, r1, #3
 8006d82:	4610      	mov	r0, r2
 8006d84:	4619      	mov	r1, r3
 8006d86:	4603      	mov	r3, r0
 8006d88:	4642      	mov	r2, r8
 8006d8a:	189b      	adds	r3, r3, r2
 8006d8c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006d90:	464b      	mov	r3, r9
 8006d92:	460a      	mov	r2, r1
 8006d94:	eb42 0303 	adc.w	r3, r2, r3
 8006d98:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006da0:	685b      	ldr	r3, [r3, #4]
 8006da2:	2200      	movs	r2, #0
 8006da4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006da6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006da8:	f04f 0200 	mov.w	r2, #0
 8006dac:	f04f 0300 	mov.w	r3, #0
 8006db0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006db4:	4649      	mov	r1, r9
 8006db6:	008b      	lsls	r3, r1, #2
 8006db8:	4641      	mov	r1, r8
 8006dba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006dbe:	4641      	mov	r1, r8
 8006dc0:	008a      	lsls	r2, r1, #2
 8006dc2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006dc6:	f7f9 ff3f 	bl	8000c48 <__aeabi_uldivmod>
 8006dca:	4602      	mov	r2, r0
 8006dcc:	460b      	mov	r3, r1
 8006dce:	4611      	mov	r1, r2
 8006dd0:	4b38      	ldr	r3, [pc, #224]	@ (8006eb4 <UART_SetConfig+0x4e4>)
 8006dd2:	fba3 2301 	umull	r2, r3, r3, r1
 8006dd6:	095b      	lsrs	r3, r3, #5
 8006dd8:	2264      	movs	r2, #100	@ 0x64
 8006dda:	fb02 f303 	mul.w	r3, r2, r3
 8006dde:	1acb      	subs	r3, r1, r3
 8006de0:	011b      	lsls	r3, r3, #4
 8006de2:	3332      	adds	r3, #50	@ 0x32
 8006de4:	4a33      	ldr	r2, [pc, #204]	@ (8006eb4 <UART_SetConfig+0x4e4>)
 8006de6:	fba2 2303 	umull	r2, r3, r2, r3
 8006dea:	095b      	lsrs	r3, r3, #5
 8006dec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006df0:	441c      	add	r4, r3
 8006df2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006df6:	2200      	movs	r2, #0
 8006df8:	673b      	str	r3, [r7, #112]	@ 0x70
 8006dfa:	677a      	str	r2, [r7, #116]	@ 0x74
 8006dfc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006e00:	4642      	mov	r2, r8
 8006e02:	464b      	mov	r3, r9
 8006e04:	1891      	adds	r1, r2, r2
 8006e06:	60b9      	str	r1, [r7, #8]
 8006e08:	415b      	adcs	r3, r3
 8006e0a:	60fb      	str	r3, [r7, #12]
 8006e0c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006e10:	4641      	mov	r1, r8
 8006e12:	1851      	adds	r1, r2, r1
 8006e14:	6039      	str	r1, [r7, #0]
 8006e16:	4649      	mov	r1, r9
 8006e18:	414b      	adcs	r3, r1
 8006e1a:	607b      	str	r3, [r7, #4]
 8006e1c:	f04f 0200 	mov.w	r2, #0
 8006e20:	f04f 0300 	mov.w	r3, #0
 8006e24:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006e28:	4659      	mov	r1, fp
 8006e2a:	00cb      	lsls	r3, r1, #3
 8006e2c:	4651      	mov	r1, sl
 8006e2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e32:	4651      	mov	r1, sl
 8006e34:	00ca      	lsls	r2, r1, #3
 8006e36:	4610      	mov	r0, r2
 8006e38:	4619      	mov	r1, r3
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	4642      	mov	r2, r8
 8006e3e:	189b      	adds	r3, r3, r2
 8006e40:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006e42:	464b      	mov	r3, r9
 8006e44:	460a      	mov	r2, r1
 8006e46:	eb42 0303 	adc.w	r3, r2, r3
 8006e4a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e50:	685b      	ldr	r3, [r3, #4]
 8006e52:	2200      	movs	r2, #0
 8006e54:	663b      	str	r3, [r7, #96]	@ 0x60
 8006e56:	667a      	str	r2, [r7, #100]	@ 0x64
 8006e58:	f04f 0200 	mov.w	r2, #0
 8006e5c:	f04f 0300 	mov.w	r3, #0
 8006e60:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006e64:	4649      	mov	r1, r9
 8006e66:	008b      	lsls	r3, r1, #2
 8006e68:	4641      	mov	r1, r8
 8006e6a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e6e:	4641      	mov	r1, r8
 8006e70:	008a      	lsls	r2, r1, #2
 8006e72:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006e76:	f7f9 fee7 	bl	8000c48 <__aeabi_uldivmod>
 8006e7a:	4602      	mov	r2, r0
 8006e7c:	460b      	mov	r3, r1
 8006e7e:	4b0d      	ldr	r3, [pc, #52]	@ (8006eb4 <UART_SetConfig+0x4e4>)
 8006e80:	fba3 1302 	umull	r1, r3, r3, r2
 8006e84:	095b      	lsrs	r3, r3, #5
 8006e86:	2164      	movs	r1, #100	@ 0x64
 8006e88:	fb01 f303 	mul.w	r3, r1, r3
 8006e8c:	1ad3      	subs	r3, r2, r3
 8006e8e:	011b      	lsls	r3, r3, #4
 8006e90:	3332      	adds	r3, #50	@ 0x32
 8006e92:	4a08      	ldr	r2, [pc, #32]	@ (8006eb4 <UART_SetConfig+0x4e4>)
 8006e94:	fba2 2303 	umull	r2, r3, r2, r3
 8006e98:	095b      	lsrs	r3, r3, #5
 8006e9a:	f003 020f 	and.w	r2, r3, #15
 8006e9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4422      	add	r2, r4
 8006ea6:	609a      	str	r2, [r3, #8]
}
 8006ea8:	bf00      	nop
 8006eaa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006eb4:	51eb851f 	.word	0x51eb851f

08006eb8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006eb8:	b084      	sub	sp, #16
 8006eba:	b580      	push	{r7, lr}
 8006ebc:	b084      	sub	sp, #16
 8006ebe:	af00      	add	r7, sp, #0
 8006ec0:	6078      	str	r0, [r7, #4]
 8006ec2:	f107 001c 	add.w	r0, r7, #28
 8006ec6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006eca:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006ece:	2b01      	cmp	r3, #1
 8006ed0:	d123      	bne.n	8006f1a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ed6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	68db      	ldr	r3, [r3, #12]
 8006ee2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006ee6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006eea:	687a      	ldr	r2, [r7, #4]
 8006eec:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	68db      	ldr	r3, [r3, #12]
 8006ef2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006efa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006efe:	2b01      	cmp	r3, #1
 8006f00:	d105      	bne.n	8006f0e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	68db      	ldr	r3, [r3, #12]
 8006f06:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f000 f9dc 	bl	80072cc <USB_CoreReset>
 8006f14:	4603      	mov	r3, r0
 8006f16:	73fb      	strb	r3, [r7, #15]
 8006f18:	e01b      	b.n	8006f52 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	68db      	ldr	r3, [r3, #12]
 8006f1e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f000 f9d0 	bl	80072cc <USB_CoreReset>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006f30:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d106      	bne.n	8006f46 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f3c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	639a      	str	r2, [r3, #56]	@ 0x38
 8006f44:	e005      	b.n	8006f52 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f4a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006f52:	7fbb      	ldrb	r3, [r7, #30]
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	d10b      	bne.n	8006f70 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	689b      	ldr	r3, [r3, #8]
 8006f5c:	f043 0206 	orr.w	r2, r3, #6
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	689b      	ldr	r3, [r3, #8]
 8006f68:	f043 0220 	orr.w	r2, r3, #32
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3710      	adds	r7, #16
 8006f76:	46bd      	mov	sp, r7
 8006f78:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006f7c:	b004      	add	sp, #16
 8006f7e:	4770      	bx	lr

08006f80 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006f80:	b480      	push	{r7}
 8006f82:	b083      	sub	sp, #12
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	689b      	ldr	r3, [r3, #8]
 8006f8c:	f043 0201 	orr.w	r2, r3, #1
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006f94:	2300      	movs	r3, #0
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	370c      	adds	r7, #12
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa0:	4770      	bx	lr

08006fa2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006fa2:	b480      	push	{r7}
 8006fa4:	b083      	sub	sp, #12
 8006fa6:	af00      	add	r7, sp, #0
 8006fa8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	689b      	ldr	r3, [r3, #8]
 8006fae:	f023 0201 	bic.w	r2, r3, #1
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006fb6:	2300      	movs	r3, #0
}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	370c      	adds	r7, #12
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc2:	4770      	bx	lr

08006fc4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b084      	sub	sp, #16
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
 8006fcc:	460b      	mov	r3, r1
 8006fce:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	68db      	ldr	r3, [r3, #12]
 8006fd8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006fe0:	78fb      	ldrb	r3, [r7, #3]
 8006fe2:	2b01      	cmp	r3, #1
 8006fe4:	d115      	bne.n	8007012 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	68db      	ldr	r3, [r3, #12]
 8006fea:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006ff2:	200a      	movs	r0, #10
 8006ff4:	f7fb fa78 	bl	80024e8 <HAL_Delay>
      ms += 10U;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	330a      	adds	r3, #10
 8006ffc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f000 f956 	bl	80072b0 <USB_GetMode>
 8007004:	4603      	mov	r3, r0
 8007006:	2b01      	cmp	r3, #1
 8007008:	d01e      	beq.n	8007048 <USB_SetCurrentMode+0x84>
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	2bc7      	cmp	r3, #199	@ 0xc7
 800700e:	d9f0      	bls.n	8006ff2 <USB_SetCurrentMode+0x2e>
 8007010:	e01a      	b.n	8007048 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007012:	78fb      	ldrb	r3, [r7, #3]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d115      	bne.n	8007044 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	68db      	ldr	r3, [r3, #12]
 800701c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007024:	200a      	movs	r0, #10
 8007026:	f7fb fa5f 	bl	80024e8 <HAL_Delay>
      ms += 10U;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	330a      	adds	r3, #10
 800702e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f000 f93d 	bl	80072b0 <USB_GetMode>
 8007036:	4603      	mov	r3, r0
 8007038:	2b00      	cmp	r3, #0
 800703a:	d005      	beq.n	8007048 <USB_SetCurrentMode+0x84>
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	2bc7      	cmp	r3, #199	@ 0xc7
 8007040:	d9f0      	bls.n	8007024 <USB_SetCurrentMode+0x60>
 8007042:	e001      	b.n	8007048 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007044:	2301      	movs	r3, #1
 8007046:	e005      	b.n	8007054 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	2bc8      	cmp	r3, #200	@ 0xc8
 800704c:	d101      	bne.n	8007052 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800704e:	2301      	movs	r3, #1
 8007050:	e000      	b.n	8007054 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007052:	2300      	movs	r3, #0
}
 8007054:	4618      	mov	r0, r3
 8007056:	3710      	adds	r7, #16
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}

0800705c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800705c:	b480      	push	{r7}
 800705e:	b085      	sub	sp, #20
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
 8007064:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007066:	2300      	movs	r3, #0
 8007068:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	3301      	adds	r3, #1
 800706e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007076:	d901      	bls.n	800707c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007078:	2303      	movs	r3, #3
 800707a:	e01b      	b.n	80070b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	691b      	ldr	r3, [r3, #16]
 8007080:	2b00      	cmp	r3, #0
 8007082:	daf2      	bge.n	800706a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007084:	2300      	movs	r3, #0
 8007086:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	019b      	lsls	r3, r3, #6
 800708c:	f043 0220 	orr.w	r2, r3, #32
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	3301      	adds	r3, #1
 8007098:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80070a0:	d901      	bls.n	80070a6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80070a2:	2303      	movs	r3, #3
 80070a4:	e006      	b.n	80070b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	691b      	ldr	r3, [r3, #16]
 80070aa:	f003 0320 	and.w	r3, r3, #32
 80070ae:	2b20      	cmp	r3, #32
 80070b0:	d0f0      	beq.n	8007094 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80070b2:	2300      	movs	r3, #0
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	3714      	adds	r7, #20
 80070b8:	46bd      	mov	sp, r7
 80070ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070be:	4770      	bx	lr

080070c0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b085      	sub	sp, #20
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80070c8:	2300      	movs	r3, #0
 80070ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	3301      	adds	r3, #1
 80070d0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80070d8:	d901      	bls.n	80070de <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80070da:	2303      	movs	r3, #3
 80070dc:	e018      	b.n	8007110 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	691b      	ldr	r3, [r3, #16]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	daf2      	bge.n	80070cc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80070e6:	2300      	movs	r3, #0
 80070e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2210      	movs	r2, #16
 80070ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	3301      	adds	r3, #1
 80070f4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80070fc:	d901      	bls.n	8007102 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80070fe:	2303      	movs	r3, #3
 8007100:	e006      	b.n	8007110 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	691b      	ldr	r3, [r3, #16]
 8007106:	f003 0310 	and.w	r3, r3, #16
 800710a:	2b10      	cmp	r3, #16
 800710c:	d0f0      	beq.n	80070f0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800710e:	2300      	movs	r3, #0
}
 8007110:	4618      	mov	r0, r3
 8007112:	3714      	adds	r7, #20
 8007114:	46bd      	mov	sp, r7
 8007116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711a:	4770      	bx	lr

0800711c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800711c:	b480      	push	{r7}
 800711e:	b089      	sub	sp, #36	@ 0x24
 8007120:	af00      	add	r7, sp, #0
 8007122:	60f8      	str	r0, [r7, #12]
 8007124:	60b9      	str	r1, [r7, #8]
 8007126:	4611      	mov	r1, r2
 8007128:	461a      	mov	r2, r3
 800712a:	460b      	mov	r3, r1
 800712c:	71fb      	strb	r3, [r7, #7]
 800712e:	4613      	mov	r3, r2
 8007130:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800713a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800713e:	2b00      	cmp	r3, #0
 8007140:	d123      	bne.n	800718a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007142:	88bb      	ldrh	r3, [r7, #4]
 8007144:	3303      	adds	r3, #3
 8007146:	089b      	lsrs	r3, r3, #2
 8007148:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800714a:	2300      	movs	r3, #0
 800714c:	61bb      	str	r3, [r7, #24]
 800714e:	e018      	b.n	8007182 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007150:	79fb      	ldrb	r3, [r7, #7]
 8007152:	031a      	lsls	r2, r3, #12
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	4413      	add	r3, r2
 8007158:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800715c:	461a      	mov	r2, r3
 800715e:	69fb      	ldr	r3, [r7, #28]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007164:	69fb      	ldr	r3, [r7, #28]
 8007166:	3301      	adds	r3, #1
 8007168:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800716a:	69fb      	ldr	r3, [r7, #28]
 800716c:	3301      	adds	r3, #1
 800716e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007170:	69fb      	ldr	r3, [r7, #28]
 8007172:	3301      	adds	r3, #1
 8007174:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007176:	69fb      	ldr	r3, [r7, #28]
 8007178:	3301      	adds	r3, #1
 800717a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800717c:	69bb      	ldr	r3, [r7, #24]
 800717e:	3301      	adds	r3, #1
 8007180:	61bb      	str	r3, [r7, #24]
 8007182:	69ba      	ldr	r2, [r7, #24]
 8007184:	693b      	ldr	r3, [r7, #16]
 8007186:	429a      	cmp	r2, r3
 8007188:	d3e2      	bcc.n	8007150 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800718a:	2300      	movs	r3, #0
}
 800718c:	4618      	mov	r0, r3
 800718e:	3724      	adds	r7, #36	@ 0x24
 8007190:	46bd      	mov	sp, r7
 8007192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007196:	4770      	bx	lr

08007198 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007198:	b480      	push	{r7}
 800719a:	b08b      	sub	sp, #44	@ 0x2c
 800719c:	af00      	add	r7, sp, #0
 800719e:	60f8      	str	r0, [r7, #12]
 80071a0:	60b9      	str	r1, [r7, #8]
 80071a2:	4613      	mov	r3, r2
 80071a4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80071ae:	88fb      	ldrh	r3, [r7, #6]
 80071b0:	089b      	lsrs	r3, r3, #2
 80071b2:	b29b      	uxth	r3, r3
 80071b4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80071b6:	88fb      	ldrh	r3, [r7, #6]
 80071b8:	f003 0303 	and.w	r3, r3, #3
 80071bc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80071be:	2300      	movs	r3, #0
 80071c0:	623b      	str	r3, [r7, #32]
 80071c2:	e014      	b.n	80071ee <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80071c4:	69bb      	ldr	r3, [r7, #24]
 80071c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80071ca:	681a      	ldr	r2, [r3, #0]
 80071cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071ce:	601a      	str	r2, [r3, #0]
    pDest++;
 80071d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071d2:	3301      	adds	r3, #1
 80071d4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80071d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071d8:	3301      	adds	r3, #1
 80071da:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80071dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071de:	3301      	adds	r3, #1
 80071e0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80071e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071e4:	3301      	adds	r3, #1
 80071e6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80071e8:	6a3b      	ldr	r3, [r7, #32]
 80071ea:	3301      	adds	r3, #1
 80071ec:	623b      	str	r3, [r7, #32]
 80071ee:	6a3a      	ldr	r2, [r7, #32]
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	429a      	cmp	r2, r3
 80071f4:	d3e6      	bcc.n	80071c4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80071f6:	8bfb      	ldrh	r3, [r7, #30]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d01e      	beq.n	800723a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80071fc:	2300      	movs	r3, #0
 80071fe:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007200:	69bb      	ldr	r3, [r7, #24]
 8007202:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007206:	461a      	mov	r2, r3
 8007208:	f107 0310 	add.w	r3, r7, #16
 800720c:	6812      	ldr	r2, [r2, #0]
 800720e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007210:	693a      	ldr	r2, [r7, #16]
 8007212:	6a3b      	ldr	r3, [r7, #32]
 8007214:	b2db      	uxtb	r3, r3
 8007216:	00db      	lsls	r3, r3, #3
 8007218:	fa22 f303 	lsr.w	r3, r2, r3
 800721c:	b2da      	uxtb	r2, r3
 800721e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007220:	701a      	strb	r2, [r3, #0]
      i++;
 8007222:	6a3b      	ldr	r3, [r7, #32]
 8007224:	3301      	adds	r3, #1
 8007226:	623b      	str	r3, [r7, #32]
      pDest++;
 8007228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800722a:	3301      	adds	r3, #1
 800722c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800722e:	8bfb      	ldrh	r3, [r7, #30]
 8007230:	3b01      	subs	r3, #1
 8007232:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007234:	8bfb      	ldrh	r3, [r7, #30]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d1ea      	bne.n	8007210 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800723a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800723c:	4618      	mov	r0, r3
 800723e:	372c      	adds	r7, #44	@ 0x2c
 8007240:	46bd      	mov	sp, r7
 8007242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007246:	4770      	bx	lr

08007248 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007248:	b480      	push	{r7}
 800724a:	b085      	sub	sp, #20
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	695b      	ldr	r3, [r3, #20]
 8007254:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	699b      	ldr	r3, [r3, #24]
 800725a:	68fa      	ldr	r2, [r7, #12]
 800725c:	4013      	ands	r3, r2
 800725e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007260:	68fb      	ldr	r3, [r7, #12]
}
 8007262:	4618      	mov	r0, r3
 8007264:	3714      	adds	r7, #20
 8007266:	46bd      	mov	sp, r7
 8007268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726c:	4770      	bx	lr

0800726e <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800726e:	b480      	push	{r7}
 8007270:	b085      	sub	sp, #20
 8007272:	af00      	add	r7, sp, #0
 8007274:	6078      	str	r0, [r7, #4]
 8007276:	460b      	mov	r3, r1
 8007278:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800727e:	78fb      	ldrb	r3, [r7, #3]
 8007280:	015a      	lsls	r2, r3, #5
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	4413      	add	r3, r2
 8007286:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800728a:	689b      	ldr	r3, [r3, #8]
 800728c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800728e:	78fb      	ldrb	r3, [r7, #3]
 8007290:	015a      	lsls	r2, r3, #5
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	4413      	add	r3, r2
 8007296:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800729a:	68db      	ldr	r3, [r3, #12]
 800729c:	68ba      	ldr	r2, [r7, #8]
 800729e:	4013      	ands	r3, r2
 80072a0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80072a2:	68bb      	ldr	r3, [r7, #8]
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3714      	adds	r7, #20
 80072a8:	46bd      	mov	sp, r7
 80072aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ae:	4770      	bx	lr

080072b0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b083      	sub	sp, #12
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	695b      	ldr	r3, [r3, #20]
 80072bc:	f003 0301 	and.w	r3, r3, #1
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	370c      	adds	r7, #12
 80072c4:	46bd      	mov	sp, r7
 80072c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ca:	4770      	bx	lr

080072cc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80072cc:	b480      	push	{r7}
 80072ce:	b085      	sub	sp, #20
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80072d4:	2300      	movs	r3, #0
 80072d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	3301      	adds	r3, #1
 80072dc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80072e4:	d901      	bls.n	80072ea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80072e6:	2303      	movs	r3, #3
 80072e8:	e01b      	b.n	8007322 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	691b      	ldr	r3, [r3, #16]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	daf2      	bge.n	80072d8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80072f2:	2300      	movs	r3, #0
 80072f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	691b      	ldr	r3, [r3, #16]
 80072fa:	f043 0201 	orr.w	r2, r3, #1
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	3301      	adds	r3, #1
 8007306:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800730e:	d901      	bls.n	8007314 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007310:	2303      	movs	r3, #3
 8007312:	e006      	b.n	8007322 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	691b      	ldr	r3, [r3, #16]
 8007318:	f003 0301 	and.w	r3, r3, #1
 800731c:	2b01      	cmp	r3, #1
 800731e:	d0f0      	beq.n	8007302 <USB_CoreReset+0x36>

  return HAL_OK;
 8007320:	2300      	movs	r3, #0
}
 8007322:	4618      	mov	r0, r3
 8007324:	3714      	adds	r7, #20
 8007326:	46bd      	mov	sp, r7
 8007328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732c:	4770      	bx	lr
	...

08007330 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007330:	b084      	sub	sp, #16
 8007332:	b580      	push	{r7, lr}
 8007334:	b086      	sub	sp, #24
 8007336:	af00      	add	r7, sp, #0
 8007338:	6078      	str	r0, [r7, #4]
 800733a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800733e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007342:	2300      	movs	r3, #0
 8007344:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007350:	461a      	mov	r2, r3
 8007352:	2300      	movs	r3, #0
 8007354:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800735a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007366:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007372:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	68db      	ldr	r3, [r3, #12]
 800737e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007382:	2b00      	cmp	r3, #0
 8007384:	d119      	bne.n	80073ba <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007386:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800738a:	2b01      	cmp	r3, #1
 800738c:	d10a      	bne.n	80073a4 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	68fa      	ldr	r2, [r7, #12]
 8007398:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800739c:	f043 0304 	orr.w	r3, r3, #4
 80073a0:	6013      	str	r3, [r2, #0]
 80073a2:	e014      	b.n	80073ce <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	68fa      	ldr	r2, [r7, #12]
 80073ae:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80073b2:	f023 0304 	bic.w	r3, r3, #4
 80073b6:	6013      	str	r3, [r2, #0]
 80073b8:	e009      	b.n	80073ce <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	68fa      	ldr	r2, [r7, #12]
 80073c4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80073c8:	f023 0304 	bic.w	r3, r3, #4
 80073cc:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80073ce:	2110      	movs	r1, #16
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f7ff fe43 	bl	800705c <USB_FlushTxFifo>
 80073d6:	4603      	mov	r3, r0
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d001      	beq.n	80073e0 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 80073dc:	2301      	movs	r3, #1
 80073de:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f7ff fe6d 	bl	80070c0 <USB_FlushRxFifo>
 80073e6:	4603      	mov	r3, r0
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d001      	beq.n	80073f0 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 80073ec:	2301      	movs	r3, #1
 80073ee:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80073f0:	2300      	movs	r3, #0
 80073f2:	613b      	str	r3, [r7, #16]
 80073f4:	e015      	b.n	8007422 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 80073f6:	693b      	ldr	r3, [r7, #16]
 80073f8:	015a      	lsls	r2, r3, #5
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	4413      	add	r3, r2
 80073fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007402:	461a      	mov	r2, r3
 8007404:	f04f 33ff 	mov.w	r3, #4294967295
 8007408:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	015a      	lsls	r2, r3, #5
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	4413      	add	r3, r2
 8007412:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007416:	461a      	mov	r2, r3
 8007418:	2300      	movs	r3, #0
 800741a:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	3301      	adds	r3, #1
 8007420:	613b      	str	r3, [r7, #16]
 8007422:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007426:	461a      	mov	r2, r3
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	4293      	cmp	r3, r2
 800742c:	d3e3      	bcc.n	80073f6 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2200      	movs	r2, #0
 8007432:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f04f 32ff 	mov.w	r2, #4294967295
 800743a:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	4a18      	ldr	r2, [pc, #96]	@ (80074a0 <USB_HostInit+0x170>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d10b      	bne.n	800745c <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800744a:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	4a15      	ldr	r2, [pc, #84]	@ (80074a4 <USB_HostInit+0x174>)
 8007450:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	4a14      	ldr	r2, [pc, #80]	@ (80074a8 <USB_HostInit+0x178>)
 8007456:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800745a:	e009      	b.n	8007470 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2280      	movs	r2, #128	@ 0x80
 8007460:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	4a11      	ldr	r2, [pc, #68]	@ (80074ac <USB_HostInit+0x17c>)
 8007466:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	4a11      	ldr	r2, [pc, #68]	@ (80074b0 <USB_HostInit+0x180>)
 800746c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007470:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007474:	2b00      	cmp	r3, #0
 8007476:	d105      	bne.n	8007484 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	699b      	ldr	r3, [r3, #24]
 800747c:	f043 0210 	orr.w	r2, r3, #16
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	699a      	ldr	r2, [r3, #24]
 8007488:	4b0a      	ldr	r3, [pc, #40]	@ (80074b4 <USB_HostInit+0x184>)
 800748a:	4313      	orrs	r3, r2
 800748c:	687a      	ldr	r2, [r7, #4]
 800748e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8007490:	7dfb      	ldrb	r3, [r7, #23]
}
 8007492:	4618      	mov	r0, r3
 8007494:	3718      	adds	r7, #24
 8007496:	46bd      	mov	sp, r7
 8007498:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800749c:	b004      	add	sp, #16
 800749e:	4770      	bx	lr
 80074a0:	40040000 	.word	0x40040000
 80074a4:	01000200 	.word	0x01000200
 80074a8:	00e00300 	.word	0x00e00300
 80074ac:	00600080 	.word	0x00600080
 80074b0:	004000e0 	.word	0x004000e0
 80074b4:	a3200008 	.word	0xa3200008

080074b8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b085      	sub	sp, #20
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
 80074c0:	460b      	mov	r3, r1
 80074c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	68fa      	ldr	r2, [r7, #12]
 80074d2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80074d6:	f023 0303 	bic.w	r3, r3, #3
 80074da:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80074e2:	681a      	ldr	r2, [r3, #0]
 80074e4:	78fb      	ldrb	r3, [r7, #3]
 80074e6:	f003 0303 	and.w	r3, r3, #3
 80074ea:	68f9      	ldr	r1, [r7, #12]
 80074ec:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80074f0:	4313      	orrs	r3, r2
 80074f2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80074f4:	78fb      	ldrb	r3, [r7, #3]
 80074f6:	2b01      	cmp	r3, #1
 80074f8:	d107      	bne.n	800750a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007500:	461a      	mov	r2, r3
 8007502:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8007506:	6053      	str	r3, [r2, #4]
 8007508:	e00c      	b.n	8007524 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800750a:	78fb      	ldrb	r3, [r7, #3]
 800750c:	2b02      	cmp	r3, #2
 800750e:	d107      	bne.n	8007520 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007516:	461a      	mov	r2, r3
 8007518:	f241 7370 	movw	r3, #6000	@ 0x1770
 800751c:	6053      	str	r3, [r2, #4]
 800751e:	e001      	b.n	8007524 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8007520:	2301      	movs	r3, #1
 8007522:	e000      	b.n	8007526 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8007524:	2300      	movs	r3, #0
}
 8007526:	4618      	mov	r0, r3
 8007528:	3714      	adds	r7, #20
 800752a:	46bd      	mov	sp, r7
 800752c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007530:	4770      	bx	lr

08007532 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8007532:	b580      	push	{r7, lr}
 8007534:	b084      	sub	sp, #16
 8007536:	af00      	add	r7, sp, #0
 8007538:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800753e:	2300      	movs	r3, #0
 8007540:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8007552:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	68fa      	ldr	r2, [r7, #12]
 8007558:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800755c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007560:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007562:	2064      	movs	r0, #100	@ 0x64
 8007564:	f7fa ffc0 	bl	80024e8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	68fa      	ldr	r2, [r7, #12]
 800756c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007570:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007574:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8007576:	200a      	movs	r0, #10
 8007578:	f7fa ffb6 	bl	80024e8 <HAL_Delay>

  return HAL_OK;
 800757c:	2300      	movs	r3, #0
}
 800757e:	4618      	mov	r0, r3
 8007580:	3710      	adds	r7, #16
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}

08007586 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007586:	b480      	push	{r7}
 8007588:	b085      	sub	sp, #20
 800758a:	af00      	add	r7, sp, #0
 800758c:	6078      	str	r0, [r7, #4]
 800758e:	460b      	mov	r3, r1
 8007590:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007596:	2300      	movs	r3, #0
 8007598:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80075aa:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d109      	bne.n	80075ca <USB_DriveVbus+0x44>
 80075b6:	78fb      	ldrb	r3, [r7, #3]
 80075b8:	2b01      	cmp	r3, #1
 80075ba:	d106      	bne.n	80075ca <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	68fa      	ldr	r2, [r7, #12]
 80075c0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80075c4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80075c8:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80075d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075d4:	d109      	bne.n	80075ea <USB_DriveVbus+0x64>
 80075d6:	78fb      	ldrb	r3, [r7, #3]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d106      	bne.n	80075ea <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	68fa      	ldr	r2, [r7, #12]
 80075e0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80075e4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80075e8:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80075ea:	2300      	movs	r3, #0
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	3714      	adds	r7, #20
 80075f0:	46bd      	mov	sp, r7
 80075f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f6:	4770      	bx	lr

080075f8 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b085      	sub	sp, #20
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007604:	2300      	movs	r3, #0
 8007606:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	0c5b      	lsrs	r3, r3, #17
 8007616:	f003 0303 	and.w	r3, r3, #3
}
 800761a:	4618      	mov	r0, r3
 800761c:	3714      	adds	r7, #20
 800761e:	46bd      	mov	sp, r7
 8007620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007624:	4770      	bx	lr

08007626 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8007626:	b480      	push	{r7}
 8007628:	b085      	sub	sp, #20
 800762a:	af00      	add	r7, sp, #0
 800762c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007638:	689b      	ldr	r3, [r3, #8]
 800763a:	b29b      	uxth	r3, r3
}
 800763c:	4618      	mov	r0, r3
 800763e:	3714      	adds	r7, #20
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr

08007648 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b088      	sub	sp, #32
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
 8007650:	4608      	mov	r0, r1
 8007652:	4611      	mov	r1, r2
 8007654:	461a      	mov	r2, r3
 8007656:	4603      	mov	r3, r0
 8007658:	70fb      	strb	r3, [r7, #3]
 800765a:	460b      	mov	r3, r1
 800765c:	70bb      	strb	r3, [r7, #2]
 800765e:	4613      	mov	r3, r2
 8007660:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8007662:	2300      	movs	r3, #0
 8007664:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800766a:	78fb      	ldrb	r3, [r7, #3]
 800766c:	015a      	lsls	r2, r3, #5
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	4413      	add	r3, r2
 8007672:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007676:	461a      	mov	r2, r3
 8007678:	f04f 33ff 	mov.w	r3, #4294967295
 800767c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800767e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007682:	2b03      	cmp	r3, #3
 8007684:	d87c      	bhi.n	8007780 <USB_HC_Init+0x138>
 8007686:	a201      	add	r2, pc, #4	@ (adr r2, 800768c <USB_HC_Init+0x44>)
 8007688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800768c:	0800769d 	.word	0x0800769d
 8007690:	08007743 	.word	0x08007743
 8007694:	0800769d 	.word	0x0800769d
 8007698:	08007705 	.word	0x08007705
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800769c:	78fb      	ldrb	r3, [r7, #3]
 800769e:	015a      	lsls	r2, r3, #5
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	4413      	add	r3, r2
 80076a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80076a8:	461a      	mov	r2, r3
 80076aa:	f240 439d 	movw	r3, #1181	@ 0x49d
 80076ae:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80076b0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	da10      	bge.n	80076da <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80076b8:	78fb      	ldrb	r3, [r7, #3]
 80076ba:	015a      	lsls	r2, r3, #5
 80076bc:	693b      	ldr	r3, [r7, #16]
 80076be:	4413      	add	r3, r2
 80076c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80076c4:	68db      	ldr	r3, [r3, #12]
 80076c6:	78fa      	ldrb	r2, [r7, #3]
 80076c8:	0151      	lsls	r1, r2, #5
 80076ca:	693a      	ldr	r2, [r7, #16]
 80076cc:	440a      	add	r2, r1
 80076ce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80076d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80076d6:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 80076d8:	e055      	b.n	8007786 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	4a6f      	ldr	r2, [pc, #444]	@ (800789c <USB_HC_Init+0x254>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d151      	bne.n	8007786 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80076e2:	78fb      	ldrb	r3, [r7, #3]
 80076e4:	015a      	lsls	r2, r3, #5
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	4413      	add	r3, r2
 80076ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80076ee:	68db      	ldr	r3, [r3, #12]
 80076f0:	78fa      	ldrb	r2, [r7, #3]
 80076f2:	0151      	lsls	r1, r2, #5
 80076f4:	693a      	ldr	r2, [r7, #16]
 80076f6:	440a      	add	r2, r1
 80076f8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80076fc:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007700:	60d3      	str	r3, [r2, #12]
      break;
 8007702:	e040      	b.n	8007786 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007704:	78fb      	ldrb	r3, [r7, #3]
 8007706:	015a      	lsls	r2, r3, #5
 8007708:	693b      	ldr	r3, [r7, #16]
 800770a:	4413      	add	r3, r2
 800770c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007710:	461a      	mov	r2, r3
 8007712:	f240 639d 	movw	r3, #1693	@ 0x69d
 8007716:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007718:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800771c:	2b00      	cmp	r3, #0
 800771e:	da34      	bge.n	800778a <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007720:	78fb      	ldrb	r3, [r7, #3]
 8007722:	015a      	lsls	r2, r3, #5
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	4413      	add	r3, r2
 8007728:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800772c:	68db      	ldr	r3, [r3, #12]
 800772e:	78fa      	ldrb	r2, [r7, #3]
 8007730:	0151      	lsls	r1, r2, #5
 8007732:	693a      	ldr	r2, [r7, #16]
 8007734:	440a      	add	r2, r1
 8007736:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800773a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800773e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007740:	e023      	b.n	800778a <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007742:	78fb      	ldrb	r3, [r7, #3]
 8007744:	015a      	lsls	r2, r3, #5
 8007746:	693b      	ldr	r3, [r7, #16]
 8007748:	4413      	add	r3, r2
 800774a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800774e:	461a      	mov	r2, r3
 8007750:	f240 2325 	movw	r3, #549	@ 0x225
 8007754:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007756:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800775a:	2b00      	cmp	r3, #0
 800775c:	da17      	bge.n	800778e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800775e:	78fb      	ldrb	r3, [r7, #3]
 8007760:	015a      	lsls	r2, r3, #5
 8007762:	693b      	ldr	r3, [r7, #16]
 8007764:	4413      	add	r3, r2
 8007766:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800776a:	68db      	ldr	r3, [r3, #12]
 800776c:	78fa      	ldrb	r2, [r7, #3]
 800776e:	0151      	lsls	r1, r2, #5
 8007770:	693a      	ldr	r2, [r7, #16]
 8007772:	440a      	add	r2, r1
 8007774:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007778:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 800777c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800777e:	e006      	b.n	800778e <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8007780:	2301      	movs	r3, #1
 8007782:	77fb      	strb	r3, [r7, #31]
      break;
 8007784:	e004      	b.n	8007790 <USB_HC_Init+0x148>
      break;
 8007786:	bf00      	nop
 8007788:	e002      	b.n	8007790 <USB_HC_Init+0x148>
      break;
 800778a:	bf00      	nop
 800778c:	e000      	b.n	8007790 <USB_HC_Init+0x148>
      break;
 800778e:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8007790:	78fb      	ldrb	r3, [r7, #3]
 8007792:	015a      	lsls	r2, r3, #5
 8007794:	693b      	ldr	r3, [r7, #16]
 8007796:	4413      	add	r3, r2
 8007798:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800779c:	461a      	mov	r2, r3
 800779e:	2300      	movs	r3, #0
 80077a0:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80077a2:	78fb      	ldrb	r3, [r7, #3]
 80077a4:	015a      	lsls	r2, r3, #5
 80077a6:	693b      	ldr	r3, [r7, #16]
 80077a8:	4413      	add	r3, r2
 80077aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077ae:	68db      	ldr	r3, [r3, #12]
 80077b0:	78fa      	ldrb	r2, [r7, #3]
 80077b2:	0151      	lsls	r1, r2, #5
 80077b4:	693a      	ldr	r2, [r7, #16]
 80077b6:	440a      	add	r2, r1
 80077b8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80077bc:	f043 0302 	orr.w	r3, r3, #2
 80077c0:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80077c2:	693b      	ldr	r3, [r7, #16]
 80077c4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80077c8:	699a      	ldr	r2, [r3, #24]
 80077ca:	78fb      	ldrb	r3, [r7, #3]
 80077cc:	f003 030f 	and.w	r3, r3, #15
 80077d0:	2101      	movs	r1, #1
 80077d2:	fa01 f303 	lsl.w	r3, r1, r3
 80077d6:	6939      	ldr	r1, [r7, #16]
 80077d8:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80077dc:	4313      	orrs	r3, r2
 80077de:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	699b      	ldr	r3, [r3, #24]
 80077e4:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80077ec:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	da03      	bge.n	80077fc <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80077f4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80077f8:	61bb      	str	r3, [r7, #24]
 80077fa:	e001      	b.n	8007800 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 80077fc:	2300      	movs	r3, #0
 80077fe:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f7ff fef9 	bl	80075f8 <USB_GetHostSpeed>
 8007806:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8007808:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800780c:	2b02      	cmp	r3, #2
 800780e:	d106      	bne.n	800781e <USB_HC_Init+0x1d6>
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	2b02      	cmp	r3, #2
 8007814:	d003      	beq.n	800781e <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007816:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800781a:	617b      	str	r3, [r7, #20]
 800781c:	e001      	b.n	8007822 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800781e:	2300      	movs	r3, #0
 8007820:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007822:	787b      	ldrb	r3, [r7, #1]
 8007824:	059b      	lsls	r3, r3, #22
 8007826:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800782a:	78bb      	ldrb	r3, [r7, #2]
 800782c:	02db      	lsls	r3, r3, #11
 800782e:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007832:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007834:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007838:	049b      	lsls	r3, r3, #18
 800783a:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800783e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8007840:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8007842:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007846:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8007848:	69bb      	ldr	r3, [r7, #24]
 800784a:	431a      	orrs	r2, r3
 800784c:	697b      	ldr	r3, [r7, #20]
 800784e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007850:	78fa      	ldrb	r2, [r7, #3]
 8007852:	0151      	lsls	r1, r2, #5
 8007854:	693a      	ldr	r2, [r7, #16]
 8007856:	440a      	add	r2, r1
 8007858:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800785c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007860:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8007862:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007866:	2b03      	cmp	r3, #3
 8007868:	d003      	beq.n	8007872 <USB_HC_Init+0x22a>
 800786a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800786e:	2b01      	cmp	r3, #1
 8007870:	d10f      	bne.n	8007892 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8007872:	78fb      	ldrb	r3, [r7, #3]
 8007874:	015a      	lsls	r2, r3, #5
 8007876:	693b      	ldr	r3, [r7, #16]
 8007878:	4413      	add	r3, r2
 800787a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	78fa      	ldrb	r2, [r7, #3]
 8007882:	0151      	lsls	r1, r2, #5
 8007884:	693a      	ldr	r2, [r7, #16]
 8007886:	440a      	add	r2, r1
 8007888:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800788c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007890:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007892:	7ffb      	ldrb	r3, [r7, #31]
}
 8007894:	4618      	mov	r0, r3
 8007896:	3720      	adds	r7, #32
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}
 800789c:	40040000 	.word	0x40040000

080078a0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b08c      	sub	sp, #48	@ 0x30
 80078a4:	af02      	add	r7, sp, #8
 80078a6:	60f8      	str	r0, [r7, #12]
 80078a8:	60b9      	str	r1, [r7, #8]
 80078aa:	4613      	mov	r3, r2
 80078ac:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	785b      	ldrb	r3, [r3, #1]
 80078b6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 80078b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80078bc:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	4a5d      	ldr	r2, [pc, #372]	@ (8007a38 <USB_HC_StartXfer+0x198>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d12f      	bne.n	8007926 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 80078c6:	79fb      	ldrb	r3, [r7, #7]
 80078c8:	2b01      	cmp	r3, #1
 80078ca:	d11c      	bne.n	8007906 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	7c9b      	ldrb	r3, [r3, #18]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d003      	beq.n	80078dc <USB_HC_StartXfer+0x3c>
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	7c9b      	ldrb	r3, [r3, #18]
 80078d8:	2b02      	cmp	r3, #2
 80078da:	d124      	bne.n	8007926 <USB_HC_StartXfer+0x86>
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	799b      	ldrb	r3, [r3, #6]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d120      	bne.n	8007926 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80078e4:	69fb      	ldr	r3, [r7, #28]
 80078e6:	015a      	lsls	r2, r3, #5
 80078e8:	6a3b      	ldr	r3, [r7, #32]
 80078ea:	4413      	add	r3, r2
 80078ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078f0:	68db      	ldr	r3, [r3, #12]
 80078f2:	69fa      	ldr	r2, [r7, #28]
 80078f4:	0151      	lsls	r1, r2, #5
 80078f6:	6a3a      	ldr	r2, [r7, #32]
 80078f8:	440a      	add	r2, r1
 80078fa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80078fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007902:	60d3      	str	r3, [r2, #12]
 8007904:	e00f      	b.n	8007926 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	791b      	ldrb	r3, [r3, #4]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d10b      	bne.n	8007926 <USB_HC_StartXfer+0x86>
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	795b      	ldrb	r3, [r3, #5]
 8007912:	2b01      	cmp	r3, #1
 8007914:	d107      	bne.n	8007926 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	785b      	ldrb	r3, [r3, #1]
 800791a:	4619      	mov	r1, r3
 800791c:	68f8      	ldr	r0, [r7, #12]
 800791e:	f000 fb6b 	bl	8007ff8 <USB_DoPing>
        return HAL_OK;
 8007922:	2300      	movs	r3, #0
 8007924:	e232      	b.n	8007d8c <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	799b      	ldrb	r3, [r3, #6]
 800792a:	2b01      	cmp	r3, #1
 800792c:	d158      	bne.n	80079e0 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800792e:	2301      	movs	r3, #1
 8007930:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	78db      	ldrb	r3, [r3, #3]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d007      	beq.n	800794a <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800793a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800793c:	68ba      	ldr	r2, [r7, #8]
 800793e:	8a92      	ldrh	r2, [r2, #20]
 8007940:	fb03 f202 	mul.w	r2, r3, r2
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	61da      	str	r2, [r3, #28]
 8007948:	e07c      	b.n	8007a44 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	7c9b      	ldrb	r3, [r3, #18]
 800794e:	2b01      	cmp	r3, #1
 8007950:	d130      	bne.n	80079b4 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	6a1b      	ldr	r3, [r3, #32]
 8007956:	2bbc      	cmp	r3, #188	@ 0xbc
 8007958:	d918      	bls.n	800798c <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	8a9b      	ldrh	r3, [r3, #20]
 800795e:	461a      	mov	r2, r3
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	69da      	ldr	r2, [r3, #28]
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	68db      	ldr	r3, [r3, #12]
 8007970:	2b01      	cmp	r3, #1
 8007972:	d003      	beq.n	800797c <USB_HC_StartXfer+0xdc>
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	68db      	ldr	r3, [r3, #12]
 8007978:	2b02      	cmp	r3, #2
 800797a:	d103      	bne.n	8007984 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	2202      	movs	r2, #2
 8007980:	60da      	str	r2, [r3, #12]
 8007982:	e05f      	b.n	8007a44 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	2201      	movs	r2, #1
 8007988:	60da      	str	r2, [r3, #12]
 800798a:	e05b      	b.n	8007a44 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	6a1a      	ldr	r2, [r3, #32]
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	68db      	ldr	r3, [r3, #12]
 8007998:	2b01      	cmp	r3, #1
 800799a:	d007      	beq.n	80079ac <USB_HC_StartXfer+0x10c>
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	68db      	ldr	r3, [r3, #12]
 80079a0:	2b02      	cmp	r3, #2
 80079a2:	d003      	beq.n	80079ac <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	2204      	movs	r2, #4
 80079a8:	60da      	str	r2, [r3, #12]
 80079aa:	e04b      	b.n	8007a44 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	2203      	movs	r2, #3
 80079b0:	60da      	str	r2, [r3, #12]
 80079b2:	e047      	b.n	8007a44 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 80079b4:	79fb      	ldrb	r3, [r7, #7]
 80079b6:	2b01      	cmp	r3, #1
 80079b8:	d10d      	bne.n	80079d6 <USB_HC_StartXfer+0x136>
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	6a1b      	ldr	r3, [r3, #32]
 80079be:	68ba      	ldr	r2, [r7, #8]
 80079c0:	8a92      	ldrh	r2, [r2, #20]
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d907      	bls.n	80079d6 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80079c6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80079c8:	68ba      	ldr	r2, [r7, #8]
 80079ca:	8a92      	ldrh	r2, [r2, #20]
 80079cc:	fb03 f202 	mul.w	r2, r3, r2
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	61da      	str	r2, [r3, #28]
 80079d4:	e036      	b.n	8007a44 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	6a1a      	ldr	r2, [r3, #32]
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	61da      	str	r2, [r3, #28]
 80079de:	e031      	b.n	8007a44 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	6a1b      	ldr	r3, [r3, #32]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d018      	beq.n	8007a1a <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	6a1b      	ldr	r3, [r3, #32]
 80079ec:	68ba      	ldr	r2, [r7, #8]
 80079ee:	8a92      	ldrh	r2, [r2, #20]
 80079f0:	4413      	add	r3, r2
 80079f2:	3b01      	subs	r3, #1
 80079f4:	68ba      	ldr	r2, [r7, #8]
 80079f6:	8a92      	ldrh	r2, [r2, #20]
 80079f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80079fc:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 80079fe:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8007a00:	8b7b      	ldrh	r3, [r7, #26]
 8007a02:	429a      	cmp	r2, r3
 8007a04:	d90b      	bls.n	8007a1e <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8007a06:	8b7b      	ldrh	r3, [r7, #26]
 8007a08:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007a0a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007a0c:	68ba      	ldr	r2, [r7, #8]
 8007a0e:	8a92      	ldrh	r2, [r2, #20]
 8007a10:	fb03 f202 	mul.w	r2, r3, r2
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	61da      	str	r2, [r3, #28]
 8007a18:	e001      	b.n	8007a1e <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	78db      	ldrb	r3, [r3, #3]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d00a      	beq.n	8007a3c <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007a26:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007a28:	68ba      	ldr	r2, [r7, #8]
 8007a2a:	8a92      	ldrh	r2, [r2, #20]
 8007a2c:	fb03 f202 	mul.w	r2, r3, r2
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	61da      	str	r2, [r3, #28]
 8007a34:	e006      	b.n	8007a44 <USB_HC_StartXfer+0x1a4>
 8007a36:	bf00      	nop
 8007a38:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	6a1a      	ldr	r2, [r3, #32]
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	69db      	ldr	r3, [r3, #28]
 8007a48:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007a4c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007a4e:	04d9      	lsls	r1, r3, #19
 8007a50:	4ba3      	ldr	r3, [pc, #652]	@ (8007ce0 <USB_HC_StartXfer+0x440>)
 8007a52:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007a54:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	7d9b      	ldrb	r3, [r3, #22]
 8007a5a:	075b      	lsls	r3, r3, #29
 8007a5c:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007a60:	69f9      	ldr	r1, [r7, #28]
 8007a62:	0148      	lsls	r0, r1, #5
 8007a64:	6a39      	ldr	r1, [r7, #32]
 8007a66:	4401      	add	r1, r0
 8007a68:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007a6c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007a6e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007a70:	79fb      	ldrb	r3, [r7, #7]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d009      	beq.n	8007a8a <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	6999      	ldr	r1, [r3, #24]
 8007a7a:	69fb      	ldr	r3, [r7, #28]
 8007a7c:	015a      	lsls	r2, r3, #5
 8007a7e:	6a3b      	ldr	r3, [r7, #32]
 8007a80:	4413      	add	r3, r2
 8007a82:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a86:	460a      	mov	r2, r1
 8007a88:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007a8a:	6a3b      	ldr	r3, [r7, #32]
 8007a8c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007a90:	689b      	ldr	r3, [r3, #8]
 8007a92:	f003 0301 	and.w	r3, r3, #1
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	bf0c      	ite	eq
 8007a9a:	2301      	moveq	r3, #1
 8007a9c:	2300      	movne	r3, #0
 8007a9e:	b2db      	uxtb	r3, r3
 8007aa0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007aa2:	69fb      	ldr	r3, [r7, #28]
 8007aa4:	015a      	lsls	r2, r3, #5
 8007aa6:	6a3b      	ldr	r3, [r7, #32]
 8007aa8:	4413      	add	r3, r2
 8007aaa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	69fa      	ldr	r2, [r7, #28]
 8007ab2:	0151      	lsls	r1, r2, #5
 8007ab4:	6a3a      	ldr	r2, [r7, #32]
 8007ab6:	440a      	add	r2, r1
 8007ab8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007abc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007ac0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007ac2:	69fb      	ldr	r3, [r7, #28]
 8007ac4:	015a      	lsls	r2, r3, #5
 8007ac6:	6a3b      	ldr	r3, [r7, #32]
 8007ac8:	4413      	add	r3, r2
 8007aca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ace:	681a      	ldr	r2, [r3, #0]
 8007ad0:	7e7b      	ldrb	r3, [r7, #25]
 8007ad2:	075b      	lsls	r3, r3, #29
 8007ad4:	69f9      	ldr	r1, [r7, #28]
 8007ad6:	0148      	lsls	r0, r1, #5
 8007ad8:	6a39      	ldr	r1, [r7, #32]
 8007ada:	4401      	add	r1, r0
 8007adc:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8007ae0:	4313      	orrs	r3, r2
 8007ae2:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	799b      	ldrb	r3, [r3, #6]
 8007ae8:	2b01      	cmp	r3, #1
 8007aea:	f040 80c3 	bne.w	8007c74 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	7c5b      	ldrb	r3, [r3, #17]
 8007af2:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8007af4:	68ba      	ldr	r2, [r7, #8]
 8007af6:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007af8:	4313      	orrs	r3, r2
 8007afa:	69fa      	ldr	r2, [r7, #28]
 8007afc:	0151      	lsls	r1, r2, #5
 8007afe:	6a3a      	ldr	r2, [r7, #32]
 8007b00:	440a      	add	r2, r1
 8007b02:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8007b06:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007b0a:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8007b0c:	69fb      	ldr	r3, [r7, #28]
 8007b0e:	015a      	lsls	r2, r3, #5
 8007b10:	6a3b      	ldr	r3, [r7, #32]
 8007b12:	4413      	add	r3, r2
 8007b14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b18:	68db      	ldr	r3, [r3, #12]
 8007b1a:	69fa      	ldr	r2, [r7, #28]
 8007b1c:	0151      	lsls	r1, r2, #5
 8007b1e:	6a3a      	ldr	r2, [r7, #32]
 8007b20:	440a      	add	r2, r1
 8007b22:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007b26:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007b2a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	79db      	ldrb	r3, [r3, #7]
 8007b30:	2b01      	cmp	r3, #1
 8007b32:	d123      	bne.n	8007b7c <USB_HC_StartXfer+0x2dc>
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	78db      	ldrb	r3, [r3, #3]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d11f      	bne.n	8007b7c <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8007b3c:	69fb      	ldr	r3, [r7, #28]
 8007b3e:	015a      	lsls	r2, r3, #5
 8007b40:	6a3b      	ldr	r3, [r7, #32]
 8007b42:	4413      	add	r3, r2
 8007b44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b48:	685b      	ldr	r3, [r3, #4]
 8007b4a:	69fa      	ldr	r2, [r7, #28]
 8007b4c:	0151      	lsls	r1, r2, #5
 8007b4e:	6a3a      	ldr	r2, [r7, #32]
 8007b50:	440a      	add	r2, r1
 8007b52:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007b56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007b5a:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8007b5c:	69fb      	ldr	r3, [r7, #28]
 8007b5e:	015a      	lsls	r2, r3, #5
 8007b60:	6a3b      	ldr	r3, [r7, #32]
 8007b62:	4413      	add	r3, r2
 8007b64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b68:	68db      	ldr	r3, [r3, #12]
 8007b6a:	69fa      	ldr	r2, [r7, #28]
 8007b6c:	0151      	lsls	r1, r2, #5
 8007b6e:	6a3a      	ldr	r2, [r7, #32]
 8007b70:	440a      	add	r2, r1
 8007b72:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007b76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b7a:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	7c9b      	ldrb	r3, [r3, #18]
 8007b80:	2b01      	cmp	r3, #1
 8007b82:	d003      	beq.n	8007b8c <USB_HC_StartXfer+0x2ec>
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	7c9b      	ldrb	r3, [r3, #18]
 8007b88:	2b03      	cmp	r3, #3
 8007b8a:	d117      	bne.n	8007bbc <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8007b90:	2b01      	cmp	r3, #1
 8007b92:	d113      	bne.n	8007bbc <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	78db      	ldrb	r3, [r3, #3]
 8007b98:	2b01      	cmp	r3, #1
 8007b9a:	d10f      	bne.n	8007bbc <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8007b9c:	69fb      	ldr	r3, [r7, #28]
 8007b9e:	015a      	lsls	r2, r3, #5
 8007ba0:	6a3b      	ldr	r3, [r7, #32]
 8007ba2:	4413      	add	r3, r2
 8007ba4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ba8:	685b      	ldr	r3, [r3, #4]
 8007baa:	69fa      	ldr	r2, [r7, #28]
 8007bac:	0151      	lsls	r1, r2, #5
 8007bae:	6a3a      	ldr	r2, [r7, #32]
 8007bb0:	440a      	add	r2, r1
 8007bb2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007bb6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007bba:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	7c9b      	ldrb	r3, [r3, #18]
 8007bc0:	2b01      	cmp	r3, #1
 8007bc2:	d162      	bne.n	8007c8a <USB_HC_StartXfer+0x3ea>
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	78db      	ldrb	r3, [r3, #3]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d15e      	bne.n	8007c8a <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	68db      	ldr	r3, [r3, #12]
 8007bd0:	3b01      	subs	r3, #1
 8007bd2:	2b03      	cmp	r3, #3
 8007bd4:	d858      	bhi.n	8007c88 <USB_HC_StartXfer+0x3e8>
 8007bd6:	a201      	add	r2, pc, #4	@ (adr r2, 8007bdc <USB_HC_StartXfer+0x33c>)
 8007bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bdc:	08007bed 	.word	0x08007bed
 8007be0:	08007c0f 	.word	0x08007c0f
 8007be4:	08007c31 	.word	0x08007c31
 8007be8:	08007c53 	.word	0x08007c53
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8007bec:	69fb      	ldr	r3, [r7, #28]
 8007bee:	015a      	lsls	r2, r3, #5
 8007bf0:	6a3b      	ldr	r3, [r7, #32]
 8007bf2:	4413      	add	r3, r2
 8007bf4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007bf8:	685b      	ldr	r3, [r3, #4]
 8007bfa:	69fa      	ldr	r2, [r7, #28]
 8007bfc:	0151      	lsls	r1, r2, #5
 8007bfe:	6a3a      	ldr	r2, [r7, #32]
 8007c00:	440a      	add	r2, r1
 8007c02:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c0a:	6053      	str	r3, [r2, #4]
          break;
 8007c0c:	e03d      	b.n	8007c8a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8007c0e:	69fb      	ldr	r3, [r7, #28]
 8007c10:	015a      	lsls	r2, r3, #5
 8007c12:	6a3b      	ldr	r3, [r7, #32]
 8007c14:	4413      	add	r3, r2
 8007c16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c1a:	685b      	ldr	r3, [r3, #4]
 8007c1c:	69fa      	ldr	r2, [r7, #28]
 8007c1e:	0151      	lsls	r1, r2, #5
 8007c20:	6a3a      	ldr	r2, [r7, #32]
 8007c22:	440a      	add	r2, r1
 8007c24:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c28:	f043 030e 	orr.w	r3, r3, #14
 8007c2c:	6053      	str	r3, [r2, #4]
          break;
 8007c2e:	e02c      	b.n	8007c8a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8007c30:	69fb      	ldr	r3, [r7, #28]
 8007c32:	015a      	lsls	r2, r3, #5
 8007c34:	6a3b      	ldr	r3, [r7, #32]
 8007c36:	4413      	add	r3, r2
 8007c38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c3c:	685b      	ldr	r3, [r3, #4]
 8007c3e:	69fa      	ldr	r2, [r7, #28]
 8007c40:	0151      	lsls	r1, r2, #5
 8007c42:	6a3a      	ldr	r2, [r7, #32]
 8007c44:	440a      	add	r2, r1
 8007c46:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c4a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007c4e:	6053      	str	r3, [r2, #4]
          break;
 8007c50:	e01b      	b.n	8007c8a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8007c52:	69fb      	ldr	r3, [r7, #28]
 8007c54:	015a      	lsls	r2, r3, #5
 8007c56:	6a3b      	ldr	r3, [r7, #32]
 8007c58:	4413      	add	r3, r2
 8007c5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c5e:	685b      	ldr	r3, [r3, #4]
 8007c60:	69fa      	ldr	r2, [r7, #28]
 8007c62:	0151      	lsls	r1, r2, #5
 8007c64:	6a3a      	ldr	r2, [r7, #32]
 8007c66:	440a      	add	r2, r1
 8007c68:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c6c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007c70:	6053      	str	r3, [r2, #4]
          break;
 8007c72:	e00a      	b.n	8007c8a <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8007c74:	69fb      	ldr	r3, [r7, #28]
 8007c76:	015a      	lsls	r2, r3, #5
 8007c78:	6a3b      	ldr	r3, [r7, #32]
 8007c7a:	4413      	add	r3, r2
 8007c7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c80:	461a      	mov	r2, r3
 8007c82:	2300      	movs	r3, #0
 8007c84:	6053      	str	r3, [r2, #4]
 8007c86:	e000      	b.n	8007c8a <USB_HC_StartXfer+0x3ea>
          break;
 8007c88:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007c8a:	69fb      	ldr	r3, [r7, #28]
 8007c8c:	015a      	lsls	r2, r3, #5
 8007c8e:	6a3b      	ldr	r3, [r7, #32]
 8007c90:	4413      	add	r3, r2
 8007c92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007c9a:	693b      	ldr	r3, [r7, #16]
 8007c9c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007ca0:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	78db      	ldrb	r3, [r3, #3]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d004      	beq.n	8007cb4 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007caa:	693b      	ldr	r3, [r7, #16]
 8007cac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007cb0:	613b      	str	r3, [r7, #16]
 8007cb2:	e003      	b.n	8007cbc <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007cb4:	693b      	ldr	r3, [r7, #16]
 8007cb6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007cba:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007cbc:	693b      	ldr	r3, [r7, #16]
 8007cbe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007cc2:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007cc4:	69fb      	ldr	r3, [r7, #28]
 8007cc6:	015a      	lsls	r2, r3, #5
 8007cc8:	6a3b      	ldr	r3, [r7, #32]
 8007cca:	4413      	add	r3, r2
 8007ccc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007cd0:	461a      	mov	r2, r3
 8007cd2:	693b      	ldr	r3, [r7, #16]
 8007cd4:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007cd6:	79fb      	ldrb	r3, [r7, #7]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d003      	beq.n	8007ce4 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8007cdc:	2300      	movs	r3, #0
 8007cde:	e055      	b.n	8007d8c <USB_HC_StartXfer+0x4ec>
 8007ce0:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	78db      	ldrb	r3, [r3, #3]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d14e      	bne.n	8007d8a <USB_HC_StartXfer+0x4ea>
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	6a1b      	ldr	r3, [r3, #32]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d04a      	beq.n	8007d8a <USB_HC_StartXfer+0x4ea>
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	79db      	ldrb	r3, [r3, #7]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d146      	bne.n	8007d8a <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	7c9b      	ldrb	r3, [r3, #18]
 8007d00:	2b03      	cmp	r3, #3
 8007d02:	d831      	bhi.n	8007d68 <USB_HC_StartXfer+0x4c8>
 8007d04:	a201      	add	r2, pc, #4	@ (adr r2, 8007d0c <USB_HC_StartXfer+0x46c>)
 8007d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d0a:	bf00      	nop
 8007d0c:	08007d1d 	.word	0x08007d1d
 8007d10:	08007d41 	.word	0x08007d41
 8007d14:	08007d1d 	.word	0x08007d1d
 8007d18:	08007d41 	.word	0x08007d41
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	6a1b      	ldr	r3, [r3, #32]
 8007d20:	3303      	adds	r3, #3
 8007d22:	089b      	lsrs	r3, r3, #2
 8007d24:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007d26:	8afa      	ldrh	r2, [r7, #22]
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d2c:	b29b      	uxth	r3, r3
 8007d2e:	429a      	cmp	r2, r3
 8007d30:	d91c      	bls.n	8007d6c <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	699b      	ldr	r3, [r3, #24]
 8007d36:	f043 0220 	orr.w	r2, r3, #32
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	619a      	str	r2, [r3, #24]
        }
        break;
 8007d3e:	e015      	b.n	8007d6c <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	6a1b      	ldr	r3, [r3, #32]
 8007d44:	3303      	adds	r3, #3
 8007d46:	089b      	lsrs	r3, r3, #2
 8007d48:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007d4a:	8afa      	ldrh	r2, [r7, #22]
 8007d4c:	6a3b      	ldr	r3, [r7, #32]
 8007d4e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007d52:	691b      	ldr	r3, [r3, #16]
 8007d54:	b29b      	uxth	r3, r3
 8007d56:	429a      	cmp	r2, r3
 8007d58:	d90a      	bls.n	8007d70 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	699b      	ldr	r3, [r3, #24]
 8007d5e:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	619a      	str	r2, [r3, #24]
        }
        break;
 8007d66:	e003      	b.n	8007d70 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8007d68:	bf00      	nop
 8007d6a:	e002      	b.n	8007d72 <USB_HC_StartXfer+0x4d2>
        break;
 8007d6c:	bf00      	nop
 8007d6e:	e000      	b.n	8007d72 <USB_HC_StartXfer+0x4d2>
        break;
 8007d70:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	6999      	ldr	r1, [r3, #24]
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	785a      	ldrb	r2, [r3, #1]
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	6a1b      	ldr	r3, [r3, #32]
 8007d7e:	b29b      	uxth	r3, r3
 8007d80:	2000      	movs	r0, #0
 8007d82:	9000      	str	r0, [sp, #0]
 8007d84:	68f8      	ldr	r0, [r7, #12]
 8007d86:	f7ff f9c9 	bl	800711c <USB_WritePacket>
  }

  return HAL_OK;
 8007d8a:	2300      	movs	r3, #0
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	3728      	adds	r7, #40	@ 0x28
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}

08007d94 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007d94:	b480      	push	{r7}
 8007d96:	b085      	sub	sp, #20
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007da6:	695b      	ldr	r3, [r3, #20]
 8007da8:	b29b      	uxth	r3, r3
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	3714      	adds	r7, #20
 8007dae:	46bd      	mov	sp, r7
 8007db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db4:	4770      	bx	lr

08007db6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007db6:	b480      	push	{r7}
 8007db8:	b089      	sub	sp, #36	@ 0x24
 8007dba:	af00      	add	r7, sp, #0
 8007dbc:	6078      	str	r0, [r7, #4]
 8007dbe:	460b      	mov	r3, r1
 8007dc0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8007dc6:	78fb      	ldrb	r3, [r7, #3]
 8007dc8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007dce:	69bb      	ldr	r3, [r7, #24]
 8007dd0:	015a      	lsls	r2, r3, #5
 8007dd2:	69fb      	ldr	r3, [r7, #28]
 8007dd4:	4413      	add	r3, r2
 8007dd6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	0c9b      	lsrs	r3, r3, #18
 8007dde:	f003 0303 	and.w	r3, r3, #3
 8007de2:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007de4:	69bb      	ldr	r3, [r7, #24]
 8007de6:	015a      	lsls	r2, r3, #5
 8007de8:	69fb      	ldr	r3, [r7, #28]
 8007dea:	4413      	add	r3, r2
 8007dec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	0fdb      	lsrs	r3, r3, #31
 8007df4:	f003 0301 	and.w	r3, r3, #1
 8007df8:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8007dfa:	69bb      	ldr	r3, [r7, #24]
 8007dfc:	015a      	lsls	r2, r3, #5
 8007dfe:	69fb      	ldr	r3, [r7, #28]
 8007e00:	4413      	add	r3, r2
 8007e02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e06:	685b      	ldr	r3, [r3, #4]
 8007e08:	0fdb      	lsrs	r3, r3, #31
 8007e0a:	f003 0301 	and.w	r3, r3, #1
 8007e0e:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	689b      	ldr	r3, [r3, #8]
 8007e14:	f003 0320 	and.w	r3, r3, #32
 8007e18:	2b20      	cmp	r3, #32
 8007e1a:	d10d      	bne.n	8007e38 <USB_HC_Halt+0x82>
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d10a      	bne.n	8007e38 <USB_HC_Halt+0x82>
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d005      	beq.n	8007e34 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8007e28:	697b      	ldr	r3, [r7, #20]
 8007e2a:	2b01      	cmp	r3, #1
 8007e2c:	d002      	beq.n	8007e34 <USB_HC_Halt+0x7e>
 8007e2e:	697b      	ldr	r3, [r7, #20]
 8007e30:	2b03      	cmp	r3, #3
 8007e32:	d101      	bne.n	8007e38 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8007e34:	2300      	movs	r3, #0
 8007e36:	e0d8      	b.n	8007fea <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007e38:	697b      	ldr	r3, [r7, #20]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d002      	beq.n	8007e44 <USB_HC_Halt+0x8e>
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	2b02      	cmp	r3, #2
 8007e42:	d173      	bne.n	8007f2c <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007e44:	69bb      	ldr	r3, [r7, #24]
 8007e46:	015a      	lsls	r2, r3, #5
 8007e48:	69fb      	ldr	r3, [r7, #28]
 8007e4a:	4413      	add	r3, r2
 8007e4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	69ba      	ldr	r2, [r7, #24]
 8007e54:	0151      	lsls	r1, r2, #5
 8007e56:	69fa      	ldr	r2, [r7, #28]
 8007e58:	440a      	add	r2, r1
 8007e5a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007e5e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007e62:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	689b      	ldr	r3, [r3, #8]
 8007e68:	f003 0320 	and.w	r3, r3, #32
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d14a      	bne.n	8007f06 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e74:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d133      	bne.n	8007ee4 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007e7c:	69bb      	ldr	r3, [r7, #24]
 8007e7e:	015a      	lsls	r2, r3, #5
 8007e80:	69fb      	ldr	r3, [r7, #28]
 8007e82:	4413      	add	r3, r2
 8007e84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	69ba      	ldr	r2, [r7, #24]
 8007e8c:	0151      	lsls	r1, r2, #5
 8007e8e:	69fa      	ldr	r2, [r7, #28]
 8007e90:	440a      	add	r2, r1
 8007e92:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007e96:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007e9a:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007e9c:	69bb      	ldr	r3, [r7, #24]
 8007e9e:	015a      	lsls	r2, r3, #5
 8007ea0:	69fb      	ldr	r3, [r7, #28]
 8007ea2:	4413      	add	r3, r2
 8007ea4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	69ba      	ldr	r2, [r7, #24]
 8007eac:	0151      	lsls	r1, r2, #5
 8007eae:	69fa      	ldr	r2, [r7, #28]
 8007eb0:	440a      	add	r2, r1
 8007eb2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007eb6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007eba:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	3301      	adds	r3, #1
 8007ec0:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007ec8:	d82e      	bhi.n	8007f28 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007eca:	69bb      	ldr	r3, [r7, #24]
 8007ecc:	015a      	lsls	r2, r3, #5
 8007ece:	69fb      	ldr	r3, [r7, #28]
 8007ed0:	4413      	add	r3, r2
 8007ed2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007edc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007ee0:	d0ec      	beq.n	8007ebc <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007ee2:	e081      	b.n	8007fe8 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007ee4:	69bb      	ldr	r3, [r7, #24]
 8007ee6:	015a      	lsls	r2, r3, #5
 8007ee8:	69fb      	ldr	r3, [r7, #28]
 8007eea:	4413      	add	r3, r2
 8007eec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	69ba      	ldr	r2, [r7, #24]
 8007ef4:	0151      	lsls	r1, r2, #5
 8007ef6:	69fa      	ldr	r2, [r7, #28]
 8007ef8:	440a      	add	r2, r1
 8007efa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007efe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007f02:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007f04:	e070      	b.n	8007fe8 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007f06:	69bb      	ldr	r3, [r7, #24]
 8007f08:	015a      	lsls	r2, r3, #5
 8007f0a:	69fb      	ldr	r3, [r7, #28]
 8007f0c:	4413      	add	r3, r2
 8007f0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	69ba      	ldr	r2, [r7, #24]
 8007f16:	0151      	lsls	r1, r2, #5
 8007f18:	69fa      	ldr	r2, [r7, #28]
 8007f1a:	440a      	add	r2, r1
 8007f1c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007f20:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007f24:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007f26:	e05f      	b.n	8007fe8 <USB_HC_Halt+0x232>
            break;
 8007f28:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007f2a:	e05d      	b.n	8007fe8 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007f2c:	69bb      	ldr	r3, [r7, #24]
 8007f2e:	015a      	lsls	r2, r3, #5
 8007f30:	69fb      	ldr	r3, [r7, #28]
 8007f32:	4413      	add	r3, r2
 8007f34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	69ba      	ldr	r2, [r7, #24]
 8007f3c:	0151      	lsls	r1, r2, #5
 8007f3e:	69fa      	ldr	r2, [r7, #28]
 8007f40:	440a      	add	r2, r1
 8007f42:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007f46:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007f4a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007f4c:	69fb      	ldr	r3, [r7, #28]
 8007f4e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007f52:	691b      	ldr	r3, [r3, #16]
 8007f54:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d133      	bne.n	8007fc4 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007f5c:	69bb      	ldr	r3, [r7, #24]
 8007f5e:	015a      	lsls	r2, r3, #5
 8007f60:	69fb      	ldr	r3, [r7, #28]
 8007f62:	4413      	add	r3, r2
 8007f64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	69ba      	ldr	r2, [r7, #24]
 8007f6c:	0151      	lsls	r1, r2, #5
 8007f6e:	69fa      	ldr	r2, [r7, #28]
 8007f70:	440a      	add	r2, r1
 8007f72:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007f76:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007f7a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007f7c:	69bb      	ldr	r3, [r7, #24]
 8007f7e:	015a      	lsls	r2, r3, #5
 8007f80:	69fb      	ldr	r3, [r7, #28]
 8007f82:	4413      	add	r3, r2
 8007f84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	69ba      	ldr	r2, [r7, #24]
 8007f8c:	0151      	lsls	r1, r2, #5
 8007f8e:	69fa      	ldr	r2, [r7, #28]
 8007f90:	440a      	add	r2, r1
 8007f92:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007f96:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007f9a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	3301      	adds	r3, #1
 8007fa0:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007fa8:	d81d      	bhi.n	8007fe6 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007faa:	69bb      	ldr	r3, [r7, #24]
 8007fac:	015a      	lsls	r2, r3, #5
 8007fae:	69fb      	ldr	r3, [r7, #28]
 8007fb0:	4413      	add	r3, r2
 8007fb2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007fbc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007fc0:	d0ec      	beq.n	8007f9c <USB_HC_Halt+0x1e6>
 8007fc2:	e011      	b.n	8007fe8 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007fc4:	69bb      	ldr	r3, [r7, #24]
 8007fc6:	015a      	lsls	r2, r3, #5
 8007fc8:	69fb      	ldr	r3, [r7, #28]
 8007fca:	4413      	add	r3, r2
 8007fcc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	69ba      	ldr	r2, [r7, #24]
 8007fd4:	0151      	lsls	r1, r2, #5
 8007fd6:	69fa      	ldr	r2, [r7, #28]
 8007fd8:	440a      	add	r2, r1
 8007fda:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007fde:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007fe2:	6013      	str	r3, [r2, #0]
 8007fe4:	e000      	b.n	8007fe8 <USB_HC_Halt+0x232>
          break;
 8007fe6:	bf00      	nop
    }
  }

  return HAL_OK;
 8007fe8:	2300      	movs	r3, #0
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	3724      	adds	r7, #36	@ 0x24
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff4:	4770      	bx	lr
	...

08007ff8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b087      	sub	sp, #28
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
 8008000:	460b      	mov	r3, r1
 8008002:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008008:	78fb      	ldrb	r3, [r7, #3]
 800800a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800800c:	2301      	movs	r3, #1
 800800e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	04da      	lsls	r2, r3, #19
 8008014:	4b15      	ldr	r3, [pc, #84]	@ (800806c <USB_DoPing+0x74>)
 8008016:	4013      	ands	r3, r2
 8008018:	693a      	ldr	r2, [r7, #16]
 800801a:	0151      	lsls	r1, r2, #5
 800801c:	697a      	ldr	r2, [r7, #20]
 800801e:	440a      	add	r2, r1
 8008020:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008024:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008028:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800802a:	693b      	ldr	r3, [r7, #16]
 800802c:	015a      	lsls	r2, r3, #5
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	4413      	add	r3, r2
 8008032:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008040:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008048:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800804a:	693b      	ldr	r3, [r7, #16]
 800804c:	015a      	lsls	r2, r3, #5
 800804e:	697b      	ldr	r3, [r7, #20]
 8008050:	4413      	add	r3, r2
 8008052:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008056:	461a      	mov	r2, r3
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800805c:	2300      	movs	r3, #0
}
 800805e:	4618      	mov	r0, r3
 8008060:	371c      	adds	r7, #28
 8008062:	46bd      	mov	sp, r7
 8008064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008068:	4770      	bx	lr
 800806a:	bf00      	nop
 800806c:	1ff80000 	.word	0x1ff80000

08008070 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b088      	sub	sp, #32
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8008078:	2300      	movs	r3, #0
 800807a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8008080:	2300      	movs	r3, #0
 8008082:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f7fe ff8c 	bl	8006fa2 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800808a:	2110      	movs	r1, #16
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f7fe ffe5 	bl	800705c <USB_FlushTxFifo>
 8008092:	4603      	mov	r3, r0
 8008094:	2b00      	cmp	r3, #0
 8008096:	d001      	beq.n	800809c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8008098:	2301      	movs	r3, #1
 800809a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	f7ff f80f 	bl	80070c0 <USB_FlushRxFifo>
 80080a2:	4603      	mov	r3, r0
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d001      	beq.n	80080ac <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80080a8:	2301      	movs	r3, #1
 80080aa:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80080ac:	2300      	movs	r3, #0
 80080ae:	61bb      	str	r3, [r7, #24]
 80080b0:	e01f      	b.n	80080f2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80080b2:	69bb      	ldr	r3, [r7, #24]
 80080b4:	015a      	lsls	r2, r3, #5
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	4413      	add	r3, r2
 80080ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80080c2:	693b      	ldr	r3, [r7, #16]
 80080c4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80080c8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80080ca:	693b      	ldr	r3, [r7, #16]
 80080cc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80080d0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80080d2:	693b      	ldr	r3, [r7, #16]
 80080d4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80080d8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80080da:	69bb      	ldr	r3, [r7, #24]
 80080dc:	015a      	lsls	r2, r3, #5
 80080de:	697b      	ldr	r3, [r7, #20]
 80080e0:	4413      	add	r3, r2
 80080e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080e6:	461a      	mov	r2, r3
 80080e8:	693b      	ldr	r3, [r7, #16]
 80080ea:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80080ec:	69bb      	ldr	r3, [r7, #24]
 80080ee:	3301      	adds	r3, #1
 80080f0:	61bb      	str	r3, [r7, #24]
 80080f2:	69bb      	ldr	r3, [r7, #24]
 80080f4:	2b0f      	cmp	r3, #15
 80080f6:	d9dc      	bls.n	80080b2 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80080f8:	2300      	movs	r3, #0
 80080fa:	61bb      	str	r3, [r7, #24]
 80080fc:	e034      	b.n	8008168 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80080fe:	69bb      	ldr	r3, [r7, #24]
 8008100:	015a      	lsls	r2, r3, #5
 8008102:	697b      	ldr	r3, [r7, #20]
 8008104:	4413      	add	r3, r2
 8008106:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800810e:	693b      	ldr	r3, [r7, #16]
 8008110:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008114:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8008116:	693b      	ldr	r3, [r7, #16]
 8008118:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800811c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800811e:	693b      	ldr	r3, [r7, #16]
 8008120:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008124:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008126:	69bb      	ldr	r3, [r7, #24]
 8008128:	015a      	lsls	r2, r3, #5
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	4413      	add	r3, r2
 800812e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008132:	461a      	mov	r2, r3
 8008134:	693b      	ldr	r3, [r7, #16]
 8008136:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	3301      	adds	r3, #1
 800813c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008144:	d80c      	bhi.n	8008160 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008146:	69bb      	ldr	r3, [r7, #24]
 8008148:	015a      	lsls	r2, r3, #5
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	4413      	add	r3, r2
 800814e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008158:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800815c:	d0ec      	beq.n	8008138 <USB_StopHost+0xc8>
 800815e:	e000      	b.n	8008162 <USB_StopHost+0xf2>
        break;
 8008160:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008162:	69bb      	ldr	r3, [r7, #24]
 8008164:	3301      	adds	r3, #1
 8008166:	61bb      	str	r3, [r7, #24]
 8008168:	69bb      	ldr	r3, [r7, #24]
 800816a:	2b0f      	cmp	r3, #15
 800816c:	d9c7      	bls.n	80080fe <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008174:	461a      	mov	r2, r3
 8008176:	f04f 33ff 	mov.w	r3, #4294967295
 800817a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f04f 32ff 	mov.w	r2, #4294967295
 8008182:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f7fe fefb 	bl	8006f80 <USB_EnableGlobalInt>

  return ret;
 800818a:	7ffb      	ldrb	r3, [r7, #31]
}
 800818c:	4618      	mov	r0, r3
 800818e:	3720      	adds	r7, #32
 8008190:	46bd      	mov	sp, r7
 8008192:	bd80      	pop	{r7, pc}

08008194 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008194:	b590      	push	{r4, r7, lr}
 8008196:	b089      	sub	sp, #36	@ 0x24
 8008198:	af04      	add	r7, sp, #16
 800819a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800819c:	2301      	movs	r3, #1
 800819e:	2202      	movs	r2, #2
 80081a0:	2102      	movs	r1, #2
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f000 fc85 	bl	8008ab2 <USBH_FindInterface>
 80081a8:	4603      	mov	r3, r0
 80081aa:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80081ac:	7bfb      	ldrb	r3, [r7, #15]
 80081ae:	2bff      	cmp	r3, #255	@ 0xff
 80081b0:	d002      	beq.n	80081b8 <USBH_CDC_InterfaceInit+0x24>
 80081b2:	7bfb      	ldrb	r3, [r7, #15]
 80081b4:	2b01      	cmp	r3, #1
 80081b6:	d901      	bls.n	80081bc <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80081b8:	2302      	movs	r3, #2
 80081ba:	e13d      	b.n	8008438 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80081bc:	7bfb      	ldrb	r3, [r7, #15]
 80081be:	4619      	mov	r1, r3
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f000 fc5a 	bl	8008a7a <USBH_SelectInterface>
 80081c6:	4603      	mov	r3, r0
 80081c8:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80081ca:	7bbb      	ldrb	r3, [r7, #14]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d001      	beq.n	80081d4 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80081d0:	2302      	movs	r3, #2
 80081d2:	e131      	b.n	8008438 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 80081da:	2050      	movs	r0, #80	@ 0x50
 80081dc:	f002 fb64 	bl	800a8a8 <malloc>
 80081e0:	4603      	mov	r3, r0
 80081e2:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80081ea:	69db      	ldr	r3, [r3, #28]
 80081ec:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d101      	bne.n	80081f8 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80081f4:	2302      	movs	r3, #2
 80081f6:	e11f      	b.n	8008438 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80081f8:	2250      	movs	r2, #80	@ 0x50
 80081fa:	2100      	movs	r1, #0
 80081fc:	68b8      	ldr	r0, [r7, #8]
 80081fe:	f003 fa93 	bl	800b728 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008202:	7bfb      	ldrb	r3, [r7, #15]
 8008204:	687a      	ldr	r2, [r7, #4]
 8008206:	211a      	movs	r1, #26
 8008208:	fb01 f303 	mul.w	r3, r1, r3
 800820c:	4413      	add	r3, r2
 800820e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008212:	781b      	ldrb	r3, [r3, #0]
 8008214:	b25b      	sxtb	r3, r3
 8008216:	2b00      	cmp	r3, #0
 8008218:	da15      	bge.n	8008246 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800821a:	7bfb      	ldrb	r3, [r7, #15]
 800821c:	687a      	ldr	r2, [r7, #4]
 800821e:	211a      	movs	r1, #26
 8008220:	fb01 f303 	mul.w	r3, r1, r3
 8008224:	4413      	add	r3, r2
 8008226:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800822a:	781a      	ldrb	r2, [r3, #0]
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008230:	7bfb      	ldrb	r3, [r7, #15]
 8008232:	687a      	ldr	r2, [r7, #4]
 8008234:	211a      	movs	r1, #26
 8008236:	fb01 f303 	mul.w	r3, r1, r3
 800823a:	4413      	add	r3, r2
 800823c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008240:	881a      	ldrh	r2, [r3, #0]
 8008242:	68bb      	ldr	r3, [r7, #8]
 8008244:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8008246:	68bb      	ldr	r3, [r7, #8]
 8008248:	785b      	ldrb	r3, [r3, #1]
 800824a:	4619      	mov	r1, r3
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f001 ffbe 	bl	800a1ce <USBH_AllocPipe>
 8008252:	4603      	mov	r3, r0
 8008254:	461a      	mov	r2, r3
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	7819      	ldrb	r1, [r3, #0]
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	7858      	ldrb	r0, [r3, #1]
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800826e:	68ba      	ldr	r2, [r7, #8]
 8008270:	8952      	ldrh	r2, [r2, #10]
 8008272:	9202      	str	r2, [sp, #8]
 8008274:	2203      	movs	r2, #3
 8008276:	9201      	str	r2, [sp, #4]
 8008278:	9300      	str	r3, [sp, #0]
 800827a:	4623      	mov	r3, r4
 800827c:	4602      	mov	r2, r0
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f001 ff76 	bl	800a170 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	781b      	ldrb	r3, [r3, #0]
 8008288:	2200      	movs	r2, #0
 800828a:	4619      	mov	r1, r3
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	f002 fa85 	bl	800a79c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8008292:	2300      	movs	r3, #0
 8008294:	2200      	movs	r2, #0
 8008296:	210a      	movs	r1, #10
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f000 fc0a 	bl	8008ab2 <USBH_FindInterface>
 800829e:	4603      	mov	r3, r0
 80082a0:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80082a2:	7bfb      	ldrb	r3, [r7, #15]
 80082a4:	2bff      	cmp	r3, #255	@ 0xff
 80082a6:	d002      	beq.n	80082ae <USBH_CDC_InterfaceInit+0x11a>
 80082a8:	7bfb      	ldrb	r3, [r7, #15]
 80082aa:	2b01      	cmp	r3, #1
 80082ac:	d901      	bls.n	80082b2 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80082ae:	2302      	movs	r3, #2
 80082b0:	e0c2      	b.n	8008438 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80082b2:	7bfb      	ldrb	r3, [r7, #15]
 80082b4:	687a      	ldr	r2, [r7, #4]
 80082b6:	211a      	movs	r1, #26
 80082b8:	fb01 f303 	mul.w	r3, r1, r3
 80082bc:	4413      	add	r3, r2
 80082be:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80082c2:	781b      	ldrb	r3, [r3, #0]
 80082c4:	b25b      	sxtb	r3, r3
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	da16      	bge.n	80082f8 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80082ca:	7bfb      	ldrb	r3, [r7, #15]
 80082cc:	687a      	ldr	r2, [r7, #4]
 80082ce:	211a      	movs	r1, #26
 80082d0:	fb01 f303 	mul.w	r3, r1, r3
 80082d4:	4413      	add	r3, r2
 80082d6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80082da:	781a      	ldrb	r2, [r3, #0]
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80082e0:	7bfb      	ldrb	r3, [r7, #15]
 80082e2:	687a      	ldr	r2, [r7, #4]
 80082e4:	211a      	movs	r1, #26
 80082e6:	fb01 f303 	mul.w	r3, r1, r3
 80082ea:	4413      	add	r3, r2
 80082ec:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80082f0:	881a      	ldrh	r2, [r3, #0]
 80082f2:	68bb      	ldr	r3, [r7, #8]
 80082f4:	835a      	strh	r2, [r3, #26]
 80082f6:	e015      	b.n	8008324 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80082f8:	7bfb      	ldrb	r3, [r7, #15]
 80082fa:	687a      	ldr	r2, [r7, #4]
 80082fc:	211a      	movs	r1, #26
 80082fe:	fb01 f303 	mul.w	r3, r1, r3
 8008302:	4413      	add	r3, r2
 8008304:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008308:	781a      	ldrb	r2, [r3, #0]
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800830e:	7bfb      	ldrb	r3, [r7, #15]
 8008310:	687a      	ldr	r2, [r7, #4]
 8008312:	211a      	movs	r1, #26
 8008314:	fb01 f303 	mul.w	r3, r1, r3
 8008318:	4413      	add	r3, r2
 800831a:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800831e:	881a      	ldrh	r2, [r3, #0]
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8008324:	7bfb      	ldrb	r3, [r7, #15]
 8008326:	687a      	ldr	r2, [r7, #4]
 8008328:	211a      	movs	r1, #26
 800832a:	fb01 f303 	mul.w	r3, r1, r3
 800832e:	4413      	add	r3, r2
 8008330:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8008334:	781b      	ldrb	r3, [r3, #0]
 8008336:	b25b      	sxtb	r3, r3
 8008338:	2b00      	cmp	r3, #0
 800833a:	da16      	bge.n	800836a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800833c:	7bfb      	ldrb	r3, [r7, #15]
 800833e:	687a      	ldr	r2, [r7, #4]
 8008340:	211a      	movs	r1, #26
 8008342:	fb01 f303 	mul.w	r3, r1, r3
 8008346:	4413      	add	r3, r2
 8008348:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800834c:	781a      	ldrb	r2, [r3, #0]
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008352:	7bfb      	ldrb	r3, [r7, #15]
 8008354:	687a      	ldr	r2, [r7, #4]
 8008356:	211a      	movs	r1, #26
 8008358:	fb01 f303 	mul.w	r3, r1, r3
 800835c:	4413      	add	r3, r2
 800835e:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8008362:	881a      	ldrh	r2, [r3, #0]
 8008364:	68bb      	ldr	r3, [r7, #8]
 8008366:	835a      	strh	r2, [r3, #26]
 8008368:	e015      	b.n	8008396 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800836a:	7bfb      	ldrb	r3, [r7, #15]
 800836c:	687a      	ldr	r2, [r7, #4]
 800836e:	211a      	movs	r1, #26
 8008370:	fb01 f303 	mul.w	r3, r1, r3
 8008374:	4413      	add	r3, r2
 8008376:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800837a:	781a      	ldrb	r2, [r3, #0]
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008380:	7bfb      	ldrb	r3, [r7, #15]
 8008382:	687a      	ldr	r2, [r7, #4]
 8008384:	211a      	movs	r1, #26
 8008386:	fb01 f303 	mul.w	r3, r1, r3
 800838a:	4413      	add	r3, r2
 800838c:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8008390:	881a      	ldrh	r2, [r3, #0]
 8008392:	68bb      	ldr	r3, [r7, #8]
 8008394:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	7b9b      	ldrb	r3, [r3, #14]
 800839a:	4619      	mov	r1, r3
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f001 ff16 	bl	800a1ce <USBH_AllocPipe>
 80083a2:	4603      	mov	r3, r0
 80083a4:	461a      	mov	r2, r3
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	7bdb      	ldrb	r3, [r3, #15]
 80083ae:	4619      	mov	r1, r3
 80083b0:	6878      	ldr	r0, [r7, #4]
 80083b2:	f001 ff0c 	bl	800a1ce <USBH_AllocPipe>
 80083b6:	4603      	mov	r3, r0
 80083b8:	461a      	mov	r2, r3
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	7b59      	ldrb	r1, [r3, #13]
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	7b98      	ldrb	r0, [r3, #14]
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80083d2:	68ba      	ldr	r2, [r7, #8]
 80083d4:	8b12      	ldrh	r2, [r2, #24]
 80083d6:	9202      	str	r2, [sp, #8]
 80083d8:	2202      	movs	r2, #2
 80083da:	9201      	str	r2, [sp, #4]
 80083dc:	9300      	str	r3, [sp, #0]
 80083de:	4623      	mov	r3, r4
 80083e0:	4602      	mov	r2, r0
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f001 fec4 	bl	800a170 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	7b19      	ldrb	r1, [r3, #12]
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	7bd8      	ldrb	r0, [r3, #15]
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80083fc:	68ba      	ldr	r2, [r7, #8]
 80083fe:	8b52      	ldrh	r2, [r2, #26]
 8008400:	9202      	str	r2, [sp, #8]
 8008402:	2202      	movs	r2, #2
 8008404:	9201      	str	r2, [sp, #4]
 8008406:	9300      	str	r3, [sp, #0]
 8008408:	4623      	mov	r3, r4
 800840a:	4602      	mov	r2, r0
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	f001 feaf 	bl	800a170 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	2200      	movs	r2, #0
 8008416:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	7b5b      	ldrb	r3, [r3, #13]
 800841e:	2200      	movs	r2, #0
 8008420:	4619      	mov	r1, r3
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f002 f9ba 	bl	800a79c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	7b1b      	ldrb	r3, [r3, #12]
 800842c:	2200      	movs	r2, #0
 800842e:	4619      	mov	r1, r3
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f002 f9b3 	bl	800a79c <USBH_LL_SetToggle>

  return USBH_OK;
 8008436:	2300      	movs	r3, #0
}
 8008438:	4618      	mov	r0, r3
 800843a:	3714      	adds	r7, #20
 800843c:	46bd      	mov	sp, r7
 800843e:	bd90      	pop	{r4, r7, pc}

08008440 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b084      	sub	sp, #16
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800844e:	69db      	ldr	r3, [r3, #28]
 8008450:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	781b      	ldrb	r3, [r3, #0]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d00e      	beq.n	8008478 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	781b      	ldrb	r3, [r3, #0]
 800845e:	4619      	mov	r1, r3
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f001 fea4 	bl	800a1ae <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	781b      	ldrb	r3, [r3, #0]
 800846a:	4619      	mov	r1, r3
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	f001 fecf 	bl	800a210 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	2200      	movs	r2, #0
 8008476:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	7b1b      	ldrb	r3, [r3, #12]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d00e      	beq.n	800849e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	7b1b      	ldrb	r3, [r3, #12]
 8008484:	4619      	mov	r1, r3
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f001 fe91 	bl	800a1ae <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	7b1b      	ldrb	r3, [r3, #12]
 8008490:	4619      	mov	r1, r3
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	f001 febc 	bl	800a210 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	2200      	movs	r2, #0
 800849c:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	7b5b      	ldrb	r3, [r3, #13]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d00e      	beq.n	80084c4 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	7b5b      	ldrb	r3, [r3, #13]
 80084aa:	4619      	mov	r1, r3
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f001 fe7e 	bl	800a1ae <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	7b5b      	ldrb	r3, [r3, #13]
 80084b6:	4619      	mov	r1, r3
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f001 fea9 	bl	800a210 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	2200      	movs	r2, #0
 80084c2:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80084ca:	69db      	ldr	r3, [r3, #28]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d00b      	beq.n	80084e8 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80084d6:	69db      	ldr	r3, [r3, #28]
 80084d8:	4618      	mov	r0, r3
 80084da:	f002 f9ed 	bl	800a8b8 <free>
    phost->pActiveClass->pData = 0U;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80084e4:	2200      	movs	r2, #0
 80084e6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80084e8:	2300      	movs	r3, #0
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	3710      	adds	r7, #16
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}

080084f2 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80084f2:	b580      	push	{r7, lr}
 80084f4:	b084      	sub	sp, #16
 80084f6:	af00      	add	r7, sp, #0
 80084f8:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008500:	69db      	ldr	r3, [r3, #28]
 8008502:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	3340      	adds	r3, #64	@ 0x40
 8008508:	4619      	mov	r1, r3
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	f000 f8b1 	bl	8008672 <GetLineCoding>
 8008510:	4603      	mov	r3, r0
 8008512:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8008514:	7afb      	ldrb	r3, [r7, #11]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d105      	bne.n	8008526 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008520:	2102      	movs	r1, #2
 8008522:	6878      	ldr	r0, [r7, #4]
 8008524:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8008526:	7afb      	ldrb	r3, [r7, #11]
}
 8008528:	4618      	mov	r0, r3
 800852a:	3710      	adds	r7, #16
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}

08008530 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b084      	sub	sp, #16
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008538:	2301      	movs	r3, #1
 800853a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800853c:	2300      	movs	r3, #0
 800853e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008546:	69db      	ldr	r3, [r3, #28]
 8008548:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8008550:	2b04      	cmp	r3, #4
 8008552:	d877      	bhi.n	8008644 <USBH_CDC_Process+0x114>
 8008554:	a201      	add	r2, pc, #4	@ (adr r2, 800855c <USBH_CDC_Process+0x2c>)
 8008556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800855a:	bf00      	nop
 800855c:	08008571 	.word	0x08008571
 8008560:	08008577 	.word	0x08008577
 8008564:	080085a7 	.word	0x080085a7
 8008568:	0800861b 	.word	0x0800861b
 800856c:	08008629 	.word	0x08008629
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8008570:	2300      	movs	r3, #0
 8008572:	73fb      	strb	r3, [r7, #15]
      break;
 8008574:	e06d      	b.n	8008652 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800857a:	4619      	mov	r1, r3
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	f000 f897 	bl	80086b0 <SetLineCoding>
 8008582:	4603      	mov	r3, r0
 8008584:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008586:	7bbb      	ldrb	r3, [r7, #14]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d104      	bne.n	8008596 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	2202      	movs	r2, #2
 8008590:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008594:	e058      	b.n	8008648 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8008596:	7bbb      	ldrb	r3, [r7, #14]
 8008598:	2b01      	cmp	r3, #1
 800859a:	d055      	beq.n	8008648 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	2204      	movs	r2, #4
 80085a0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80085a4:	e050      	b.n	8008648 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	3340      	adds	r3, #64	@ 0x40
 80085aa:	4619      	mov	r1, r3
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	f000 f860 	bl	8008672 <GetLineCoding>
 80085b2:	4603      	mov	r3, r0
 80085b4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80085b6:	7bbb      	ldrb	r3, [r7, #14]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d126      	bne.n	800860a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	2200      	movs	r2, #0
 80085c0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80085ce:	791b      	ldrb	r3, [r3, #4]
 80085d0:	429a      	cmp	r2, r3
 80085d2:	d13b      	bne.n	800864c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80085de:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80085e0:	429a      	cmp	r2, r3
 80085e2:	d133      	bne.n	800864c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80085ee:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80085f0:	429a      	cmp	r2, r3
 80085f2:	d12b      	bne.n	800864c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80085fc:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80085fe:	429a      	cmp	r2, r3
 8008600:	d124      	bne.n	800864c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f000 f958 	bl	80088b8 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008608:	e020      	b.n	800864c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800860a:	7bbb      	ldrb	r3, [r7, #14]
 800860c:	2b01      	cmp	r3, #1
 800860e:	d01d      	beq.n	800864c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	2204      	movs	r2, #4
 8008614:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8008618:	e018      	b.n	800864c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	f000 f867 	bl	80086ee <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f000 f8da 	bl	80087da <CDC_ProcessReception>
      break;
 8008626:	e014      	b.n	8008652 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8008628:	2100      	movs	r1, #0
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f001 f81a 	bl	8009664 <USBH_ClrFeature>
 8008630:	4603      	mov	r3, r0
 8008632:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008634:	7bbb      	ldrb	r3, [r7, #14]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d10a      	bne.n	8008650 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800863a:	68bb      	ldr	r3, [r7, #8]
 800863c:	2200      	movs	r2, #0
 800863e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8008642:	e005      	b.n	8008650 <USBH_CDC_Process+0x120>

    default:
      break;
 8008644:	bf00      	nop
 8008646:	e004      	b.n	8008652 <USBH_CDC_Process+0x122>
      break;
 8008648:	bf00      	nop
 800864a:	e002      	b.n	8008652 <USBH_CDC_Process+0x122>
      break;
 800864c:	bf00      	nop
 800864e:	e000      	b.n	8008652 <USBH_CDC_Process+0x122>
      break;
 8008650:	bf00      	nop

  }

  return status;
 8008652:	7bfb      	ldrb	r3, [r7, #15]
}
 8008654:	4618      	mov	r0, r3
 8008656:	3710      	adds	r7, #16
 8008658:	46bd      	mov	sp, r7
 800865a:	bd80      	pop	{r7, pc}

0800865c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800865c:	b480      	push	{r7}
 800865e:	b083      	sub	sp, #12
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8008664:	2300      	movs	r3, #0
}
 8008666:	4618      	mov	r0, r3
 8008668:	370c      	adds	r7, #12
 800866a:	46bd      	mov	sp, r7
 800866c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008670:	4770      	bx	lr

08008672 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8008672:	b580      	push	{r7, lr}
 8008674:	b082      	sub	sp, #8
 8008676:	af00      	add	r7, sp, #0
 8008678:	6078      	str	r0, [r7, #4]
 800867a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	22a1      	movs	r2, #161	@ 0xa1
 8008680:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2221      	movs	r2, #33	@ 0x21
 8008686:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2200      	movs	r2, #0
 800868c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2200      	movs	r2, #0
 8008692:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2207      	movs	r2, #7
 8008698:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	2207      	movs	r2, #7
 800869e:	4619      	mov	r1, r3
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f001 fb14 	bl	8009cce <USBH_CtlReq>
 80086a6:	4603      	mov	r3, r0
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	3708      	adds	r7, #8
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd80      	pop	{r7, pc}

080086b0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b082      	sub	sp, #8
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
 80086b8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2221      	movs	r2, #33	@ 0x21
 80086be:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2220      	movs	r2, #32
 80086c4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2200      	movs	r2, #0
 80086ca:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2200      	movs	r2, #0
 80086d0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2207      	movs	r2, #7
 80086d6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	2207      	movs	r2, #7
 80086dc:	4619      	mov	r1, r3
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f001 faf5 	bl	8009cce <USBH_CtlReq>
 80086e4:	4603      	mov	r3, r0
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	3708      	adds	r7, #8
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}

080086ee <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80086ee:	b580      	push	{r7, lr}
 80086f0:	b086      	sub	sp, #24
 80086f2:	af02      	add	r7, sp, #8
 80086f4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80086fc:	69db      	ldr	r3, [r3, #28]
 80086fe:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008700:	2300      	movs	r3, #0
 8008702:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800870a:	2b01      	cmp	r3, #1
 800870c:	d002      	beq.n	8008714 <CDC_ProcessTransmission+0x26>
 800870e:	2b02      	cmp	r3, #2
 8008710:	d023      	beq.n	800875a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8008712:	e05e      	b.n	80087d2 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008718:	68fa      	ldr	r2, [r7, #12]
 800871a:	8b12      	ldrh	r2, [r2, #24]
 800871c:	4293      	cmp	r3, r2
 800871e:	d90b      	bls.n	8008738 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	69d9      	ldr	r1, [r3, #28]
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	8b1a      	ldrh	r2, [r3, #24]
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	7b5b      	ldrb	r3, [r3, #13]
 800872c:	2001      	movs	r0, #1
 800872e:	9000      	str	r0, [sp, #0]
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f001 fcda 	bl	800a0ea <USBH_BulkSendData>
 8008736:	e00b      	b.n	8008750 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8008740:	b29a      	uxth	r2, r3
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	7b5b      	ldrb	r3, [r3, #13]
 8008746:	2001      	movs	r0, #1
 8008748:	9000      	str	r0, [sp, #0]
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f001 fccd 	bl	800a0ea <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	2202      	movs	r2, #2
 8008754:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008758:	e03b      	b.n	80087d2 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	7b5b      	ldrb	r3, [r3, #13]
 800875e:	4619      	mov	r1, r3
 8008760:	6878      	ldr	r0, [r7, #4]
 8008762:	f001 fff1 	bl	800a748 <USBH_LL_GetURBState>
 8008766:	4603      	mov	r3, r0
 8008768:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800876a:	7afb      	ldrb	r3, [r7, #11]
 800876c:	2b01      	cmp	r3, #1
 800876e:	d128      	bne.n	80087c2 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008774:	68fa      	ldr	r2, [r7, #12]
 8008776:	8b12      	ldrh	r2, [r2, #24]
 8008778:	4293      	cmp	r3, r2
 800877a:	d90e      	bls.n	800879a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008780:	68fa      	ldr	r2, [r7, #12]
 8008782:	8b12      	ldrh	r2, [r2, #24]
 8008784:	1a9a      	subs	r2, r3, r2
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	69db      	ldr	r3, [r3, #28]
 800878e:	68fa      	ldr	r2, [r7, #12]
 8008790:	8b12      	ldrh	r2, [r2, #24]
 8008792:	441a      	add	r2, r3
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	61da      	str	r2, [r3, #28]
 8008798:	e002      	b.n	80087a0 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	2200      	movs	r2, #0
 800879e:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d004      	beq.n	80087b2 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	2201      	movs	r2, #1
 80087ac:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80087b0:	e00e      	b.n	80087d0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	2200      	movs	r2, #0
 80087b6:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f000 f868 	bl	8008890 <USBH_CDC_TransmitCallback>
      break;
 80087c0:	e006      	b.n	80087d0 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80087c2:	7afb      	ldrb	r3, [r7, #11]
 80087c4:	2b02      	cmp	r3, #2
 80087c6:	d103      	bne.n	80087d0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	2201      	movs	r2, #1
 80087cc:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80087d0:	bf00      	nop
  }
}
 80087d2:	bf00      	nop
 80087d4:	3710      	adds	r7, #16
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}

080087da <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80087da:	b580      	push	{r7, lr}
 80087dc:	b086      	sub	sp, #24
 80087de:	af00      	add	r7, sp, #0
 80087e0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80087e8:	69db      	ldr	r3, [r3, #28]
 80087ea:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80087ec:	2300      	movs	r3, #0
 80087ee:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80087f0:	697b      	ldr	r3, [r7, #20]
 80087f2:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 80087f6:	2b03      	cmp	r3, #3
 80087f8:	d002      	beq.n	8008800 <CDC_ProcessReception+0x26>
 80087fa:	2b04      	cmp	r3, #4
 80087fc:	d00e      	beq.n	800881c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80087fe:	e043      	b.n	8008888 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8008800:	697b      	ldr	r3, [r7, #20]
 8008802:	6a19      	ldr	r1, [r3, #32]
 8008804:	697b      	ldr	r3, [r7, #20]
 8008806:	8b5a      	ldrh	r2, [r3, #26]
 8008808:	697b      	ldr	r3, [r7, #20]
 800880a:	7b1b      	ldrb	r3, [r3, #12]
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	f001 fc91 	bl	800a134 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8008812:	697b      	ldr	r3, [r7, #20]
 8008814:	2204      	movs	r2, #4
 8008816:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800881a:	e035      	b.n	8008888 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800881c:	697b      	ldr	r3, [r7, #20]
 800881e:	7b1b      	ldrb	r3, [r3, #12]
 8008820:	4619      	mov	r1, r3
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f001 ff90 	bl	800a748 <USBH_LL_GetURBState>
 8008828:	4603      	mov	r3, r0
 800882a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800882c:	7cfb      	ldrb	r3, [r7, #19]
 800882e:	2b01      	cmp	r3, #1
 8008830:	d129      	bne.n	8008886 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8008832:	697b      	ldr	r3, [r7, #20]
 8008834:	7b1b      	ldrb	r3, [r3, #12]
 8008836:	4619      	mov	r1, r3
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f001 fef3 	bl	800a624 <USBH_LL_GetLastXferSize>
 800883e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8008840:	697b      	ldr	r3, [r7, #20]
 8008842:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008844:	68fa      	ldr	r2, [r7, #12]
 8008846:	429a      	cmp	r2, r3
 8008848:	d016      	beq.n	8008878 <CDC_ProcessReception+0x9e>
 800884a:	697b      	ldr	r3, [r7, #20]
 800884c:	8b5b      	ldrh	r3, [r3, #26]
 800884e:	461a      	mov	r2, r3
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	4293      	cmp	r3, r2
 8008854:	d110      	bne.n	8008878 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8008856:	697b      	ldr	r3, [r7, #20]
 8008858:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	1ad2      	subs	r2, r2, r3
 800885e:	697b      	ldr	r3, [r7, #20]
 8008860:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8008862:	697b      	ldr	r3, [r7, #20]
 8008864:	6a1a      	ldr	r2, [r3, #32]
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	441a      	add	r2, r3
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800886e:	697b      	ldr	r3, [r7, #20]
 8008870:	2203      	movs	r2, #3
 8008872:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8008876:	e006      	b.n	8008886 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8008878:	697b      	ldr	r3, [r7, #20]
 800887a:	2200      	movs	r2, #0
 800887c:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8008880:	6878      	ldr	r0, [r7, #4]
 8008882:	f000 f80f 	bl	80088a4 <USBH_CDC_ReceiveCallback>
      break;
 8008886:	bf00      	nop
  }
}
 8008888:	bf00      	nop
 800888a:	3718      	adds	r7, #24
 800888c:	46bd      	mov	sp, r7
 800888e:	bd80      	pop	{r7, pc}

08008890 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8008890:	b480      	push	{r7}
 8008892:	b083      	sub	sp, #12
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008898:	bf00      	nop
 800889a:	370c      	adds	r7, #12
 800889c:	46bd      	mov	sp, r7
 800889e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a2:	4770      	bx	lr

080088a4 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80088a4:	b480      	push	{r7}
 80088a6:	b083      	sub	sp, #12
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80088ac:	bf00      	nop
 80088ae:	370c      	adds	r7, #12
 80088b0:	46bd      	mov	sp, r7
 80088b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b6:	4770      	bx	lr

080088b8 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80088b8:	b480      	push	{r7}
 80088ba:	b083      	sub	sp, #12
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80088c0:	bf00      	nop
 80088c2:	370c      	adds	r7, #12
 80088c4:	46bd      	mov	sp, r7
 80088c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ca:	4770      	bx	lr

080088cc <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b084      	sub	sp, #16
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	60f8      	str	r0, [r7, #12]
 80088d4:	60b9      	str	r1, [r7, #8]
 80088d6:	4613      	mov	r3, r2
 80088d8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d101      	bne.n	80088e4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80088e0:	2302      	movs	r3, #2
 80088e2:	e029      	b.n	8008938 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	79fa      	ldrb	r2, [r7, #7]
 80088e8:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	2200      	movs	r2, #0
 80088f0:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	2200      	movs	r2, #0
 80088f8:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80088fc:	68f8      	ldr	r0, [r7, #12]
 80088fe:	f000 f81f 	bl	8008940 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	2200      	movs	r2, #0
 8008906:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	2200      	movs	r2, #0
 800890e:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	2200      	movs	r2, #0
 8008916:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	2200      	movs	r2, #0
 800891e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8008922:	68bb      	ldr	r3, [r7, #8]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d003      	beq.n	8008930 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	68ba      	ldr	r2, [r7, #8]
 800892c:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8008930:	68f8      	ldr	r0, [r7, #12]
 8008932:	f001 fdc3 	bl	800a4bc <USBH_LL_Init>

  return USBH_OK;
 8008936:	2300      	movs	r3, #0
}
 8008938:	4618      	mov	r0, r3
 800893a:	3710      	adds	r7, #16
 800893c:	46bd      	mov	sp, r7
 800893e:	bd80      	pop	{r7, pc}

08008940 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b084      	sub	sp, #16
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8008948:	2300      	movs	r3, #0
 800894a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800894c:	2300      	movs	r3, #0
 800894e:	60fb      	str	r3, [r7, #12]
 8008950:	e009      	b.n	8008966 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8008952:	687a      	ldr	r2, [r7, #4]
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	33e0      	adds	r3, #224	@ 0xe0
 8008958:	009b      	lsls	r3, r3, #2
 800895a:	4413      	add	r3, r2
 800895c:	2200      	movs	r2, #0
 800895e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	3301      	adds	r3, #1
 8008964:	60fb      	str	r3, [r7, #12]
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	2b0f      	cmp	r3, #15
 800896a:	d9f2      	bls.n	8008952 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800896c:	2300      	movs	r3, #0
 800896e:	60fb      	str	r3, [r7, #12]
 8008970:	e009      	b.n	8008986 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8008972:	687a      	ldr	r2, [r7, #4]
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	4413      	add	r3, r2
 8008978:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800897c:	2200      	movs	r2, #0
 800897e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	3301      	adds	r3, #1
 8008984:	60fb      	str	r3, [r7, #12]
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800898c:	d3f1      	bcc.n	8008972 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2200      	movs	r2, #0
 8008992:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2200      	movs	r2, #0
 8008998:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2201      	movs	r2, #1
 800899e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2200      	movs	r2, #0
 80089a4:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2201      	movs	r2, #1
 80089ac:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2240      	movs	r2, #64	@ 0x40
 80089b2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2200      	movs	r2, #0
 80089b8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2200      	movs	r2, #0
 80089be:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2201      	movs	r2, #1
 80089c6:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2200      	movs	r2, #0
 80089ce:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2200      	movs	r2, #0
 80089d6:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	331c      	adds	r3, #28
 80089de:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80089e2:	2100      	movs	r1, #0
 80089e4:	4618      	mov	r0, r3
 80089e6:	f002 fe9f 	bl	800b728 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80089f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80089f4:	2100      	movs	r1, #0
 80089f6:	4618      	mov	r0, r3
 80089f8:	f002 fe96 	bl	800b728 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8008a02:	2212      	movs	r2, #18
 8008a04:	2100      	movs	r1, #0
 8008a06:	4618      	mov	r0, r3
 8008a08:	f002 fe8e 	bl	800b728 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008a12:	223e      	movs	r2, #62	@ 0x3e
 8008a14:	2100      	movs	r1, #0
 8008a16:	4618      	mov	r0, r3
 8008a18:	f002 fe86 	bl	800b728 <memset>

  return USBH_OK;
 8008a1c:	2300      	movs	r3, #0
}
 8008a1e:	4618      	mov	r0, r3
 8008a20:	3710      	adds	r7, #16
 8008a22:	46bd      	mov	sp, r7
 8008a24:	bd80      	pop	{r7, pc}

08008a26 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008a26:	b480      	push	{r7}
 8008a28:	b085      	sub	sp, #20
 8008a2a:	af00      	add	r7, sp, #0
 8008a2c:	6078      	str	r0, [r7, #4]
 8008a2e:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8008a30:	2300      	movs	r3, #0
 8008a32:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d016      	beq.n	8008a68 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d10e      	bne.n	8008a62 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008a4a:	1c59      	adds	r1, r3, #1
 8008a4c:	687a      	ldr	r2, [r7, #4]
 8008a4e:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8008a52:	687a      	ldr	r2, [r7, #4]
 8008a54:	33de      	adds	r3, #222	@ 0xde
 8008a56:	6839      	ldr	r1, [r7, #0]
 8008a58:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	73fb      	strb	r3, [r7, #15]
 8008a60:	e004      	b.n	8008a6c <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008a62:	2302      	movs	r3, #2
 8008a64:	73fb      	strb	r3, [r7, #15]
 8008a66:	e001      	b.n	8008a6c <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8008a68:	2302      	movs	r3, #2
 8008a6a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	3714      	adds	r7, #20
 8008a72:	46bd      	mov	sp, r7
 8008a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a78:	4770      	bx	lr

08008a7a <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8008a7a:	b480      	push	{r7}
 8008a7c:	b085      	sub	sp, #20
 8008a7e:	af00      	add	r7, sp, #0
 8008a80:	6078      	str	r0, [r7, #4]
 8008a82:	460b      	mov	r3, r1
 8008a84:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8008a86:	2300      	movs	r3, #0
 8008a88:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8008a90:	78fa      	ldrb	r2, [r7, #3]
 8008a92:	429a      	cmp	r2, r3
 8008a94:	d204      	bcs.n	8008aa0 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	78fa      	ldrb	r2, [r7, #3]
 8008a9a:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8008a9e:	e001      	b.n	8008aa4 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8008aa0:	2302      	movs	r3, #2
 8008aa2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	3714      	adds	r7, #20
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab0:	4770      	bx	lr

08008ab2 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008ab2:	b480      	push	{r7}
 8008ab4:	b087      	sub	sp, #28
 8008ab6:	af00      	add	r7, sp, #0
 8008ab8:	6078      	str	r0, [r7, #4]
 8008aba:	4608      	mov	r0, r1
 8008abc:	4611      	mov	r1, r2
 8008abe:	461a      	mov	r2, r3
 8008ac0:	4603      	mov	r3, r0
 8008ac2:	70fb      	strb	r3, [r7, #3]
 8008ac4:	460b      	mov	r3, r1
 8008ac6:	70bb      	strb	r3, [r7, #2]
 8008ac8:	4613      	mov	r3, r2
 8008aca:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008acc:	2300      	movs	r3, #0
 8008ace:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008ada:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008adc:	e025      	b.n	8008b2a <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008ade:	7dfb      	ldrb	r3, [r7, #23]
 8008ae0:	221a      	movs	r2, #26
 8008ae2:	fb02 f303 	mul.w	r3, r2, r3
 8008ae6:	3308      	adds	r3, #8
 8008ae8:	68fa      	ldr	r2, [r7, #12]
 8008aea:	4413      	add	r3, r2
 8008aec:	3302      	adds	r3, #2
 8008aee:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008af0:	693b      	ldr	r3, [r7, #16]
 8008af2:	795b      	ldrb	r3, [r3, #5]
 8008af4:	78fa      	ldrb	r2, [r7, #3]
 8008af6:	429a      	cmp	r2, r3
 8008af8:	d002      	beq.n	8008b00 <USBH_FindInterface+0x4e>
 8008afa:	78fb      	ldrb	r3, [r7, #3]
 8008afc:	2bff      	cmp	r3, #255	@ 0xff
 8008afe:	d111      	bne.n	8008b24 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008b00:	693b      	ldr	r3, [r7, #16]
 8008b02:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008b04:	78ba      	ldrb	r2, [r7, #2]
 8008b06:	429a      	cmp	r2, r3
 8008b08:	d002      	beq.n	8008b10 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008b0a:	78bb      	ldrb	r3, [r7, #2]
 8008b0c:	2bff      	cmp	r3, #255	@ 0xff
 8008b0e:	d109      	bne.n	8008b24 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008b10:	693b      	ldr	r3, [r7, #16]
 8008b12:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008b14:	787a      	ldrb	r2, [r7, #1]
 8008b16:	429a      	cmp	r2, r3
 8008b18:	d002      	beq.n	8008b20 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008b1a:	787b      	ldrb	r3, [r7, #1]
 8008b1c:	2bff      	cmp	r3, #255	@ 0xff
 8008b1e:	d101      	bne.n	8008b24 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008b20:	7dfb      	ldrb	r3, [r7, #23]
 8008b22:	e006      	b.n	8008b32 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008b24:	7dfb      	ldrb	r3, [r7, #23]
 8008b26:	3301      	adds	r3, #1
 8008b28:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008b2a:	7dfb      	ldrb	r3, [r7, #23]
 8008b2c:	2b01      	cmp	r3, #1
 8008b2e:	d9d6      	bls.n	8008ade <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008b30:	23ff      	movs	r3, #255	@ 0xff
}
 8008b32:	4618      	mov	r0, r3
 8008b34:	371c      	adds	r7, #28
 8008b36:	46bd      	mov	sp, r7
 8008b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3c:	4770      	bx	lr

08008b3e <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8008b3e:	b580      	push	{r7, lr}
 8008b40:	b082      	sub	sp, #8
 8008b42:	af00      	add	r7, sp, #0
 8008b44:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8008b46:	6878      	ldr	r0, [r7, #4]
 8008b48:	f001 fcf4 	bl	800a534 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8008b4c:	2101      	movs	r1, #1
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f001 fe0d 	bl	800a76e <USBH_LL_DriverVBUS>

  return USBH_OK;
 8008b54:	2300      	movs	r3, #0
}
 8008b56:	4618      	mov	r0, r3
 8008b58:	3708      	adds	r7, #8
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bd80      	pop	{r7, pc}
	...

08008b60 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b088      	sub	sp, #32
 8008b64:	af04      	add	r7, sp, #16
 8008b66:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008b68:	2302      	movs	r3, #2
 8008b6a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8008b76:	b2db      	uxtb	r3, r3
 8008b78:	2b01      	cmp	r3, #1
 8008b7a:	d102      	bne.n	8008b82 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2203      	movs	r2, #3
 8008b80:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	781b      	ldrb	r3, [r3, #0]
 8008b86:	b2db      	uxtb	r3, r3
 8008b88:	2b0b      	cmp	r3, #11
 8008b8a:	f200 81bb 	bhi.w	8008f04 <USBH_Process+0x3a4>
 8008b8e:	a201      	add	r2, pc, #4	@ (adr r2, 8008b94 <USBH_Process+0x34>)
 8008b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b94:	08008bc5 	.word	0x08008bc5
 8008b98:	08008bf7 	.word	0x08008bf7
 8008b9c:	08008c5f 	.word	0x08008c5f
 8008ba0:	08008e9f 	.word	0x08008e9f
 8008ba4:	08008f05 	.word	0x08008f05
 8008ba8:	08008cff 	.word	0x08008cff
 8008bac:	08008e45 	.word	0x08008e45
 8008bb0:	08008d35 	.word	0x08008d35
 8008bb4:	08008d55 	.word	0x08008d55
 8008bb8:	08008d73 	.word	0x08008d73
 8008bbc:	08008db7 	.word	0x08008db7
 8008bc0:	08008e87 	.word	0x08008e87
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8008bca:	b2db      	uxtb	r3, r3
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	f000 819b 	beq.w	8008f08 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2201      	movs	r2, #1
 8008bd6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008bd8:	20c8      	movs	r0, #200	@ 0xc8
 8008bda:	f001 fe12 	bl	800a802 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f001 fd05 	bl	800a5ee <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2200      	movs	r2, #0
 8008be8:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2200      	movs	r2, #0
 8008bf0:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008bf4:	e188      	b.n	8008f08 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8008bfc:	2b01      	cmp	r3, #1
 8008bfe:	d107      	bne.n	8008c10 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2200      	movs	r2, #0
 8008c04:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2202      	movs	r2, #2
 8008c0c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008c0e:	e18a      	b.n	8008f26 <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8008c16:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008c1a:	d914      	bls.n	8008c46 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8008c22:	3301      	adds	r3, #1
 8008c24:	b2da      	uxtb	r2, r3
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8008c32:	2b03      	cmp	r3, #3
 8008c34:	d903      	bls.n	8008c3e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	220d      	movs	r2, #13
 8008c3a:	701a      	strb	r2, [r3, #0]
      break;
 8008c3c:	e173      	b.n	8008f26 <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2200      	movs	r2, #0
 8008c42:	701a      	strb	r2, [r3, #0]
      break;
 8008c44:	e16f      	b.n	8008f26 <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8008c4c:	f103 020a 	add.w	r2, r3, #10
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8008c56:	200a      	movs	r0, #10
 8008c58:	f001 fdd3 	bl	800a802 <USBH_Delay>
      break;
 8008c5c:	e163      	b.n	8008f26 <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d005      	beq.n	8008c74 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008c6e:	2104      	movs	r1, #4
 8008c70:	6878      	ldr	r0, [r7, #4]
 8008c72:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008c74:	2064      	movs	r0, #100	@ 0x64
 8008c76:	f001 fdc4 	bl	800a802 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f001 fc90 	bl	800a5a0 <USBH_LL_GetSpeed>
 8008c80:	4603      	mov	r3, r0
 8008c82:	461a      	mov	r2, r3
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2205      	movs	r2, #5
 8008c8e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008c90:	2100      	movs	r1, #0
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f001 fa9b 	bl	800a1ce <USBH_AllocPipe>
 8008c98:	4603      	mov	r3, r0
 8008c9a:	461a      	mov	r2, r3
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008ca0:	2180      	movs	r1, #128	@ 0x80
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f001 fa93 	bl	800a1ce <USBH_AllocPipe>
 8008ca8:	4603      	mov	r3, r0
 8008caa:	461a      	mov	r2, r3
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	7919      	ldrb	r1, [r3, #4]
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008cc0:	687a      	ldr	r2, [r7, #4]
 8008cc2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008cc4:	9202      	str	r2, [sp, #8]
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	9201      	str	r2, [sp, #4]
 8008cca:	9300      	str	r3, [sp, #0]
 8008ccc:	4603      	mov	r3, r0
 8008cce:	2280      	movs	r2, #128	@ 0x80
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f001 fa4d 	bl	800a170 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	7959      	ldrb	r1, [r3, #5]
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008ce6:	687a      	ldr	r2, [r7, #4]
 8008ce8:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008cea:	9202      	str	r2, [sp, #8]
 8008cec:	2200      	movs	r2, #0
 8008cee:	9201      	str	r2, [sp, #4]
 8008cf0:	9300      	str	r3, [sp, #0]
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f001 fa3a 	bl	800a170 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008cfc:	e113      	b.n	8008f26 <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8008cfe:	6878      	ldr	r0, [r7, #4]
 8008d00:	f000 f916 	bl	8008f30 <USBH_HandleEnum>
 8008d04:	4603      	mov	r3, r0
 8008d06:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008d08:	7bbb      	ldrb	r3, [r7, #14]
 8008d0a:	b2db      	uxtb	r3, r3
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	f040 80fd 	bne.w	8008f0c <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2200      	movs	r2, #0
 8008d16:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8008d20:	2b01      	cmp	r3, #1
 8008d22:	d103      	bne.n	8008d2c <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2208      	movs	r2, #8
 8008d28:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008d2a:	e0ef      	b.n	8008f0c <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2207      	movs	r2, #7
 8008d30:	701a      	strb	r2, [r3, #0]
      break;
 8008d32:	e0eb      	b.n	8008f0c <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	f000 80e8 	beq.w	8008f10 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008d46:	2101      	movs	r1, #1
 8008d48:	6878      	ldr	r0, [r7, #4]
 8008d4a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2208      	movs	r2, #8
 8008d50:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8008d52:	e0dd      	b.n	8008f10 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8008d5a:	4619      	mov	r1, r3
 8008d5c:	6878      	ldr	r0, [r7, #4]
 8008d5e:	f000 fc3a 	bl	80095d6 <USBH_SetCfg>
 8008d62:	4603      	mov	r3, r0
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	f040 80d5 	bne.w	8008f14 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2209      	movs	r2, #9
 8008d6e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008d70:	e0d0      	b.n	8008f14 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8008d78:	f003 0320 	and.w	r3, r3, #32
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d016      	beq.n	8008dae <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8008d80:	2101      	movs	r1, #1
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f000 fc4a 	bl	800961c <USBH_SetFeature>
 8008d88:	4603      	mov	r3, r0
 8008d8a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008d8c:	7bbb      	ldrb	r3, [r7, #14]
 8008d8e:	b2db      	uxtb	r3, r3
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d103      	bne.n	8008d9c <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	220a      	movs	r2, #10
 8008d98:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008d9a:	e0bd      	b.n	8008f18 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8008d9c:	7bbb      	ldrb	r3, [r7, #14]
 8008d9e:	b2db      	uxtb	r3, r3
 8008da0:	2b03      	cmp	r3, #3
 8008da2:	f040 80b9 	bne.w	8008f18 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	220a      	movs	r2, #10
 8008daa:	701a      	strb	r2, [r3, #0]
      break;
 8008dac:	e0b4      	b.n	8008f18 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	220a      	movs	r2, #10
 8008db2:	701a      	strb	r2, [r3, #0]
      break;
 8008db4:	e0b0      	b.n	8008f18 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	f000 80ad 	beq.w	8008f1c <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008dca:	2300      	movs	r3, #0
 8008dcc:	73fb      	strb	r3, [r7, #15]
 8008dce:	e016      	b.n	8008dfe <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8008dd0:	7bfa      	ldrb	r2, [r7, #15]
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	32de      	adds	r2, #222	@ 0xde
 8008dd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dda:	791a      	ldrb	r2, [r3, #4]
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8008de2:	429a      	cmp	r2, r3
 8008de4:	d108      	bne.n	8008df8 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008de6:	7bfa      	ldrb	r2, [r7, #15]
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	32de      	adds	r2, #222	@ 0xde
 8008dec:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8008df6:	e005      	b.n	8008e04 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008df8:	7bfb      	ldrb	r3, [r7, #15]
 8008dfa:	3301      	adds	r3, #1
 8008dfc:	73fb      	strb	r3, [r7, #15]
 8008dfe:	7bfb      	ldrb	r3, [r7, #15]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d0e5      	beq.n	8008dd0 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d016      	beq.n	8008e3c <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008e14:	689b      	ldr	r3, [r3, #8]
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	4798      	blx	r3
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d109      	bne.n	8008e34 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2206      	movs	r2, #6
 8008e24:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008e2c:	2103      	movs	r1, #3
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008e32:	e073      	b.n	8008f1c <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	220d      	movs	r2, #13
 8008e38:	701a      	strb	r2, [r3, #0]
      break;
 8008e3a:	e06f      	b.n	8008f1c <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	220d      	movs	r2, #13
 8008e40:	701a      	strb	r2, [r3, #0]
      break;
 8008e42:	e06b      	b.n	8008f1c <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d017      	beq.n	8008e7e <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008e54:	691b      	ldr	r3, [r3, #16]
 8008e56:	6878      	ldr	r0, [r7, #4]
 8008e58:	4798      	blx	r3
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008e5e:	7bbb      	ldrb	r3, [r7, #14]
 8008e60:	b2db      	uxtb	r3, r3
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d103      	bne.n	8008e6e <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	220b      	movs	r2, #11
 8008e6a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008e6c:	e058      	b.n	8008f20 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 8008e6e:	7bbb      	ldrb	r3, [r7, #14]
 8008e70:	b2db      	uxtb	r3, r3
 8008e72:	2b02      	cmp	r3, #2
 8008e74:	d154      	bne.n	8008f20 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	220d      	movs	r2, #13
 8008e7a:	701a      	strb	r2, [r3, #0]
      break;
 8008e7c:	e050      	b.n	8008f20 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	220d      	movs	r2, #13
 8008e82:	701a      	strb	r2, [r3, #0]
      break;
 8008e84:	e04c      	b.n	8008f20 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d049      	beq.n	8008f24 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008e96:	695b      	ldr	r3, [r3, #20]
 8008e98:	6878      	ldr	r0, [r7, #4]
 8008e9a:	4798      	blx	r3
      }
      break;
 8008e9c:	e042      	b.n	8008f24 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	f7ff fd4a 	bl	8008940 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d009      	beq.n	8008eca <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008ebc:	68db      	ldr	r3, [r3, #12]
 8008ebe:	6878      	ldr	r0, [r7, #4]
 8008ec0:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d005      	beq.n	8008ee0 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008eda:	2105      	movs	r1, #5
 8008edc:	6878      	ldr	r0, [r7, #4]
 8008ede:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8008ee6:	b2db      	uxtb	r3, r3
 8008ee8:	2b01      	cmp	r3, #1
 8008eea:	d107      	bne.n	8008efc <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2200      	movs	r2, #0
 8008ef0:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8008ef4:	6878      	ldr	r0, [r7, #4]
 8008ef6:	f7ff fe22 	bl	8008b3e <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008efa:	e014      	b.n	8008f26 <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f001 fb19 	bl	800a534 <USBH_LL_Start>
      break;
 8008f02:	e010      	b.n	8008f26 <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8008f04:	bf00      	nop
 8008f06:	e00e      	b.n	8008f26 <USBH_Process+0x3c6>
      break;
 8008f08:	bf00      	nop
 8008f0a:	e00c      	b.n	8008f26 <USBH_Process+0x3c6>
      break;
 8008f0c:	bf00      	nop
 8008f0e:	e00a      	b.n	8008f26 <USBH_Process+0x3c6>
    break;
 8008f10:	bf00      	nop
 8008f12:	e008      	b.n	8008f26 <USBH_Process+0x3c6>
      break;
 8008f14:	bf00      	nop
 8008f16:	e006      	b.n	8008f26 <USBH_Process+0x3c6>
      break;
 8008f18:	bf00      	nop
 8008f1a:	e004      	b.n	8008f26 <USBH_Process+0x3c6>
      break;
 8008f1c:	bf00      	nop
 8008f1e:	e002      	b.n	8008f26 <USBH_Process+0x3c6>
      break;
 8008f20:	bf00      	nop
 8008f22:	e000      	b.n	8008f26 <USBH_Process+0x3c6>
      break;
 8008f24:	bf00      	nop
  }
  return USBH_OK;
 8008f26:	2300      	movs	r3, #0
}
 8008f28:	4618      	mov	r0, r3
 8008f2a:	3710      	adds	r7, #16
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	bd80      	pop	{r7, pc}

08008f30 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b088      	sub	sp, #32
 8008f34:	af04      	add	r7, sp, #16
 8008f36:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008f38:	2301      	movs	r3, #1
 8008f3a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008f3c:	2301      	movs	r3, #1
 8008f3e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	785b      	ldrb	r3, [r3, #1]
 8008f44:	2b07      	cmp	r3, #7
 8008f46:	f200 81bd 	bhi.w	80092c4 <USBH_HandleEnum+0x394>
 8008f4a:	a201      	add	r2, pc, #4	@ (adr r2, 8008f50 <USBH_HandleEnum+0x20>)
 8008f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f50:	08008f71 	.word	0x08008f71
 8008f54:	0800902b 	.word	0x0800902b
 8008f58:	08009095 	.word	0x08009095
 8008f5c:	0800911f 	.word	0x0800911f
 8008f60:	08009189 	.word	0x08009189
 8008f64:	080091f9 	.word	0x080091f9
 8008f68:	0800923f 	.word	0x0800923f
 8008f6c:	08009285 	.word	0x08009285
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008f70:	2108      	movs	r1, #8
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f000 fa4c 	bl	8009410 <USBH_Get_DevDesc>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008f7c:	7bbb      	ldrb	r3, [r7, #14]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d12e      	bne.n	8008fe0 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2201      	movs	r2, #1
 8008f90:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	7919      	ldrb	r1, [r3, #4]
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008fa2:	687a      	ldr	r2, [r7, #4]
 8008fa4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008fa6:	9202      	str	r2, [sp, #8]
 8008fa8:	2200      	movs	r2, #0
 8008faa:	9201      	str	r2, [sp, #4]
 8008fac:	9300      	str	r3, [sp, #0]
 8008fae:	4603      	mov	r3, r0
 8008fb0:	2280      	movs	r2, #128	@ 0x80
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	f001 f8dc 	bl	800a170 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	7959      	ldrb	r1, [r3, #5]
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008fc8:	687a      	ldr	r2, [r7, #4]
 8008fca:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008fcc:	9202      	str	r2, [sp, #8]
 8008fce:	2200      	movs	r2, #0
 8008fd0:	9201      	str	r2, [sp, #4]
 8008fd2:	9300      	str	r3, [sp, #0]
 8008fd4:	4603      	mov	r3, r0
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	f001 f8c9 	bl	800a170 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008fde:	e173      	b.n	80092c8 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008fe0:	7bbb      	ldrb	r3, [r7, #14]
 8008fe2:	2b03      	cmp	r3, #3
 8008fe4:	f040 8170 	bne.w	80092c8 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008fee:	3301      	adds	r3, #1
 8008ff0:	b2da      	uxtb	r2, r3
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008ffe:	2b03      	cmp	r3, #3
 8009000:	d903      	bls.n	800900a <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	220d      	movs	r2, #13
 8009006:	701a      	strb	r2, [r3, #0]
      break;
 8009008:	e15e      	b.n	80092c8 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	795b      	ldrb	r3, [r3, #5]
 800900e:	4619      	mov	r1, r3
 8009010:	6878      	ldr	r0, [r7, #4]
 8009012:	f001 f8fd 	bl	800a210 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	791b      	ldrb	r3, [r3, #4]
 800901a:	4619      	mov	r1, r3
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	f001 f8f7 	bl	800a210 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2200      	movs	r2, #0
 8009026:	701a      	strb	r2, [r3, #0]
      break;
 8009028:	e14e      	b.n	80092c8 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800902a:	2112      	movs	r1, #18
 800902c:	6878      	ldr	r0, [r7, #4]
 800902e:	f000 f9ef 	bl	8009410 <USBH_Get_DevDesc>
 8009032:	4603      	mov	r3, r0
 8009034:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009036:	7bbb      	ldrb	r3, [r7, #14]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d103      	bne.n	8009044 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2202      	movs	r2, #2
 8009040:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009042:	e143      	b.n	80092cc <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009044:	7bbb      	ldrb	r3, [r7, #14]
 8009046:	2b03      	cmp	r3, #3
 8009048:	f040 8140 	bne.w	80092cc <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009052:	3301      	adds	r3, #1
 8009054:	b2da      	uxtb	r2, r3
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009062:	2b03      	cmp	r3, #3
 8009064:	d903      	bls.n	800906e <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	220d      	movs	r2, #13
 800906a:	701a      	strb	r2, [r3, #0]
      break;
 800906c:	e12e      	b.n	80092cc <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	795b      	ldrb	r3, [r3, #5]
 8009072:	4619      	mov	r1, r3
 8009074:	6878      	ldr	r0, [r7, #4]
 8009076:	f001 f8cb 	bl	800a210 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	791b      	ldrb	r3, [r3, #4]
 800907e:	4619      	mov	r1, r3
 8009080:	6878      	ldr	r0, [r7, #4]
 8009082:	f001 f8c5 	bl	800a210 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	2200      	movs	r2, #0
 800908a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2200      	movs	r2, #0
 8009090:	701a      	strb	r2, [r3, #0]
      break;
 8009092:	e11b      	b.n	80092cc <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8009094:	2101      	movs	r1, #1
 8009096:	6878      	ldr	r0, [r7, #4]
 8009098:	f000 fa79 	bl	800958e <USBH_SetAddress>
 800909c:	4603      	mov	r3, r0
 800909e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80090a0:	7bbb      	ldrb	r3, [r7, #14]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d130      	bne.n	8009108 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 80090a6:	2002      	movs	r0, #2
 80090a8:	f001 fbab 	bl	800a802 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2201      	movs	r2, #1
 80090b0:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2203      	movs	r2, #3
 80090b8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	7919      	ldrb	r1, [r3, #4]
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80090ca:	687a      	ldr	r2, [r7, #4]
 80090cc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80090ce:	9202      	str	r2, [sp, #8]
 80090d0:	2200      	movs	r2, #0
 80090d2:	9201      	str	r2, [sp, #4]
 80090d4:	9300      	str	r3, [sp, #0]
 80090d6:	4603      	mov	r3, r0
 80090d8:	2280      	movs	r2, #128	@ 0x80
 80090da:	6878      	ldr	r0, [r7, #4]
 80090dc:	f001 f848 	bl	800a170 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	7959      	ldrb	r1, [r3, #5]
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80090f0:	687a      	ldr	r2, [r7, #4]
 80090f2:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80090f4:	9202      	str	r2, [sp, #8]
 80090f6:	2200      	movs	r2, #0
 80090f8:	9201      	str	r2, [sp, #4]
 80090fa:	9300      	str	r3, [sp, #0]
 80090fc:	4603      	mov	r3, r0
 80090fe:	2200      	movs	r2, #0
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	f001 f835 	bl	800a170 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009106:	e0e3      	b.n	80092d0 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009108:	7bbb      	ldrb	r3, [r7, #14]
 800910a:	2b03      	cmp	r3, #3
 800910c:	f040 80e0 	bne.w	80092d0 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	220d      	movs	r2, #13
 8009114:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2200      	movs	r2, #0
 800911a:	705a      	strb	r2, [r3, #1]
      break;
 800911c:	e0d8      	b.n	80092d0 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800911e:	2109      	movs	r1, #9
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	f000 f9a1 	bl	8009468 <USBH_Get_CfgDesc>
 8009126:	4603      	mov	r3, r0
 8009128:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800912a:	7bbb      	ldrb	r3, [r7, #14]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d103      	bne.n	8009138 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2204      	movs	r2, #4
 8009134:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009136:	e0cd      	b.n	80092d4 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009138:	7bbb      	ldrb	r3, [r7, #14]
 800913a:	2b03      	cmp	r3, #3
 800913c:	f040 80ca 	bne.w	80092d4 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009146:	3301      	adds	r3, #1
 8009148:	b2da      	uxtb	r2, r3
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009156:	2b03      	cmp	r3, #3
 8009158:	d903      	bls.n	8009162 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	220d      	movs	r2, #13
 800915e:	701a      	strb	r2, [r3, #0]
      break;
 8009160:	e0b8      	b.n	80092d4 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	795b      	ldrb	r3, [r3, #5]
 8009166:	4619      	mov	r1, r3
 8009168:	6878      	ldr	r0, [r7, #4]
 800916a:	f001 f851 	bl	800a210 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	791b      	ldrb	r3, [r3, #4]
 8009172:	4619      	mov	r1, r3
 8009174:	6878      	ldr	r0, [r7, #4]
 8009176:	f001 f84b 	bl	800a210 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2200      	movs	r2, #0
 800917e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2200      	movs	r2, #0
 8009184:	701a      	strb	r2, [r3, #0]
      break;
 8009186:	e0a5      	b.n	80092d4 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800918e:	4619      	mov	r1, r3
 8009190:	6878      	ldr	r0, [r7, #4]
 8009192:	f000 f969 	bl	8009468 <USBH_Get_CfgDesc>
 8009196:	4603      	mov	r3, r0
 8009198:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800919a:	7bbb      	ldrb	r3, [r7, #14]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d103      	bne.n	80091a8 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2205      	movs	r2, #5
 80091a4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80091a6:	e097      	b.n	80092d8 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80091a8:	7bbb      	ldrb	r3, [r7, #14]
 80091aa:	2b03      	cmp	r3, #3
 80091ac:	f040 8094 	bne.w	80092d8 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80091b6:	3301      	adds	r3, #1
 80091b8:	b2da      	uxtb	r2, r3
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80091c6:	2b03      	cmp	r3, #3
 80091c8:	d903      	bls.n	80091d2 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	220d      	movs	r2, #13
 80091ce:	701a      	strb	r2, [r3, #0]
      break;
 80091d0:	e082      	b.n	80092d8 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	795b      	ldrb	r3, [r3, #5]
 80091d6:	4619      	mov	r1, r3
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	f001 f819 	bl	800a210 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	791b      	ldrb	r3, [r3, #4]
 80091e2:	4619      	mov	r1, r3
 80091e4:	6878      	ldr	r0, [r7, #4]
 80091e6:	f001 f813 	bl	800a210 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2200      	movs	r2, #0
 80091ee:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2200      	movs	r2, #0
 80091f4:	701a      	strb	r2, [r3, #0]
      break;
 80091f6:	e06f      	b.n	80092d8 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d019      	beq.n	8009236 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800920e:	23ff      	movs	r3, #255	@ 0xff
 8009210:	6878      	ldr	r0, [r7, #4]
 8009212:	f000 f953 	bl	80094bc <USBH_Get_StringDesc>
 8009216:	4603      	mov	r3, r0
 8009218:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800921a:	7bbb      	ldrb	r3, [r7, #14]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d103      	bne.n	8009228 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2206      	movs	r2, #6
 8009224:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009226:	e059      	b.n	80092dc <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009228:	7bbb      	ldrb	r3, [r7, #14]
 800922a:	2b03      	cmp	r3, #3
 800922c:	d156      	bne.n	80092dc <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2206      	movs	r2, #6
 8009232:	705a      	strb	r2, [r3, #1]
      break;
 8009234:	e052      	b.n	80092dc <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	2206      	movs	r2, #6
 800923a:	705a      	strb	r2, [r3, #1]
      break;
 800923c:	e04e      	b.n	80092dc <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8009244:	2b00      	cmp	r3, #0
 8009246:	d019      	beq.n	800927c <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009254:	23ff      	movs	r3, #255	@ 0xff
 8009256:	6878      	ldr	r0, [r7, #4]
 8009258:	f000 f930 	bl	80094bc <USBH_Get_StringDesc>
 800925c:	4603      	mov	r3, r0
 800925e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009260:	7bbb      	ldrb	r3, [r7, #14]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d103      	bne.n	800926e <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2207      	movs	r2, #7
 800926a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800926c:	e038      	b.n	80092e0 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800926e:	7bbb      	ldrb	r3, [r7, #14]
 8009270:	2b03      	cmp	r3, #3
 8009272:	d135      	bne.n	80092e0 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2207      	movs	r2, #7
 8009278:	705a      	strb	r2, [r3, #1]
      break;
 800927a:	e031      	b.n	80092e0 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2207      	movs	r2, #7
 8009280:	705a      	strb	r2, [r3, #1]
      break;
 8009282:	e02d      	b.n	80092e0 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800928a:	2b00      	cmp	r3, #0
 800928c:	d017      	beq.n	80092be <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800929a:	23ff      	movs	r3, #255	@ 0xff
 800929c:	6878      	ldr	r0, [r7, #4]
 800929e:	f000 f90d 	bl	80094bc <USBH_Get_StringDesc>
 80092a2:	4603      	mov	r3, r0
 80092a4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80092a6:	7bbb      	ldrb	r3, [r7, #14]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d102      	bne.n	80092b2 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80092ac:	2300      	movs	r3, #0
 80092ae:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80092b0:	e018      	b.n	80092e4 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80092b2:	7bbb      	ldrb	r3, [r7, #14]
 80092b4:	2b03      	cmp	r3, #3
 80092b6:	d115      	bne.n	80092e4 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 80092b8:	2300      	movs	r3, #0
 80092ba:	73fb      	strb	r3, [r7, #15]
      break;
 80092bc:	e012      	b.n	80092e4 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 80092be:	2300      	movs	r3, #0
 80092c0:	73fb      	strb	r3, [r7, #15]
      break;
 80092c2:	e00f      	b.n	80092e4 <USBH_HandleEnum+0x3b4>

    default:
      break;
 80092c4:	bf00      	nop
 80092c6:	e00e      	b.n	80092e6 <USBH_HandleEnum+0x3b6>
      break;
 80092c8:	bf00      	nop
 80092ca:	e00c      	b.n	80092e6 <USBH_HandleEnum+0x3b6>
      break;
 80092cc:	bf00      	nop
 80092ce:	e00a      	b.n	80092e6 <USBH_HandleEnum+0x3b6>
      break;
 80092d0:	bf00      	nop
 80092d2:	e008      	b.n	80092e6 <USBH_HandleEnum+0x3b6>
      break;
 80092d4:	bf00      	nop
 80092d6:	e006      	b.n	80092e6 <USBH_HandleEnum+0x3b6>
      break;
 80092d8:	bf00      	nop
 80092da:	e004      	b.n	80092e6 <USBH_HandleEnum+0x3b6>
      break;
 80092dc:	bf00      	nop
 80092de:	e002      	b.n	80092e6 <USBH_HandleEnum+0x3b6>
      break;
 80092e0:	bf00      	nop
 80092e2:	e000      	b.n	80092e6 <USBH_HandleEnum+0x3b6>
      break;
 80092e4:	bf00      	nop
  }
  return Status;
 80092e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80092e8:	4618      	mov	r0, r3
 80092ea:	3710      	adds	r7, #16
 80092ec:	46bd      	mov	sp, r7
 80092ee:	bd80      	pop	{r7, pc}

080092f0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80092f0:	b480      	push	{r7}
 80092f2:	b083      	sub	sp, #12
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
 80092f8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	683a      	ldr	r2, [r7, #0]
 80092fe:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8009302:	bf00      	nop
 8009304:	370c      	adds	r7, #12
 8009306:	46bd      	mov	sp, r7
 8009308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930c:	4770      	bx	lr

0800930e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800930e:	b580      	push	{r7, lr}
 8009310:	b082      	sub	sp, #8
 8009312:	af00      	add	r7, sp, #0
 8009314:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800931c:	1c5a      	adds	r2, r3, #1
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8009324:	6878      	ldr	r0, [r7, #4]
 8009326:	f000 f804 	bl	8009332 <USBH_HandleSof>
}
 800932a:	bf00      	nop
 800932c:	3708      	adds	r7, #8
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}

08009332 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009332:	b580      	push	{r7, lr}
 8009334:	b082      	sub	sp, #8
 8009336:	af00      	add	r7, sp, #0
 8009338:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	781b      	ldrb	r3, [r3, #0]
 800933e:	b2db      	uxtb	r3, r3
 8009340:	2b0b      	cmp	r3, #11
 8009342:	d10a      	bne.n	800935a <USBH_HandleSof+0x28>
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800934a:	2b00      	cmp	r3, #0
 800934c:	d005      	beq.n	800935a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009354:	699b      	ldr	r3, [r3, #24]
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	4798      	blx	r3
  }
}
 800935a:	bf00      	nop
 800935c:	3708      	adds	r7, #8
 800935e:	46bd      	mov	sp, r7
 8009360:	bd80      	pop	{r7, pc}

08009362 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009362:	b480      	push	{r7}
 8009364:	b083      	sub	sp, #12
 8009366:	af00      	add	r7, sp, #0
 8009368:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2201      	movs	r2, #1
 800936e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8009372:	bf00      	nop
}
 8009374:	370c      	adds	r7, #12
 8009376:	46bd      	mov	sp, r7
 8009378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937c:	4770      	bx	lr

0800937e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800937e:	b480      	push	{r7}
 8009380:	b083      	sub	sp, #12
 8009382:	af00      	add	r7, sp, #0
 8009384:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2200      	movs	r2, #0
 800938a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800938e:	bf00      	nop
}
 8009390:	370c      	adds	r7, #12
 8009392:	46bd      	mov	sp, r7
 8009394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009398:	4770      	bx	lr

0800939a <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800939a:	b480      	push	{r7}
 800939c:	b083      	sub	sp, #12
 800939e:	af00      	add	r7, sp, #0
 80093a0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2201      	movs	r2, #1
 80093a6:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2200      	movs	r2, #0
 80093ae:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2200      	movs	r2, #0
 80093b6:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80093ba:	2300      	movs	r3, #0
}
 80093bc:	4618      	mov	r0, r3
 80093be:	370c      	adds	r7, #12
 80093c0:	46bd      	mov	sp, r7
 80093c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c6:	4770      	bx	lr

080093c8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b082      	sub	sp, #8
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2201      	movs	r2, #1
 80093d4:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2200      	movs	r2, #0
 80093dc:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2200      	movs	r2, #0
 80093e4:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	f001 f8be 	bl	800a56a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	791b      	ldrb	r3, [r3, #4]
 80093f2:	4619      	mov	r1, r3
 80093f4:	6878      	ldr	r0, [r7, #4]
 80093f6:	f000 ff0b 	bl	800a210 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	795b      	ldrb	r3, [r3, #5]
 80093fe:	4619      	mov	r1, r3
 8009400:	6878      	ldr	r0, [r7, #4]
 8009402:	f000 ff05 	bl	800a210 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8009406:	2300      	movs	r3, #0
}
 8009408:	4618      	mov	r0, r3
 800940a:	3708      	adds	r7, #8
 800940c:	46bd      	mov	sp, r7
 800940e:	bd80      	pop	{r7, pc}

08009410 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b086      	sub	sp, #24
 8009414:	af02      	add	r7, sp, #8
 8009416:	6078      	str	r0, [r7, #4]
 8009418:	460b      	mov	r3, r1
 800941a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800941c:	887b      	ldrh	r3, [r7, #2]
 800941e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009422:	d901      	bls.n	8009428 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009424:	2303      	movs	r3, #3
 8009426:	e01b      	b.n	8009460 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800942e:	887b      	ldrh	r3, [r7, #2]
 8009430:	9300      	str	r3, [sp, #0]
 8009432:	4613      	mov	r3, r2
 8009434:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009438:	2100      	movs	r1, #0
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	f000 f872 	bl	8009524 <USBH_GetDescriptor>
 8009440:	4603      	mov	r3, r0
 8009442:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8009444:	7bfb      	ldrb	r3, [r7, #15]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d109      	bne.n	800945e <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009450:	887a      	ldrh	r2, [r7, #2]
 8009452:	4619      	mov	r1, r3
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	f000 f929 	bl	80096ac <USBH_ParseDevDesc>
 800945a:	4603      	mov	r3, r0
 800945c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800945e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009460:	4618      	mov	r0, r3
 8009462:	3710      	adds	r7, #16
 8009464:	46bd      	mov	sp, r7
 8009466:	bd80      	pop	{r7, pc}

08009468 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b086      	sub	sp, #24
 800946c:	af02      	add	r7, sp, #8
 800946e:	6078      	str	r0, [r7, #4]
 8009470:	460b      	mov	r3, r1
 8009472:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	331c      	adds	r3, #28
 8009478:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800947a:	887b      	ldrh	r3, [r7, #2]
 800947c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009480:	d901      	bls.n	8009486 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009482:	2303      	movs	r3, #3
 8009484:	e016      	b.n	80094b4 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8009486:	887b      	ldrh	r3, [r7, #2]
 8009488:	9300      	str	r3, [sp, #0]
 800948a:	68bb      	ldr	r3, [r7, #8]
 800948c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009490:	2100      	movs	r1, #0
 8009492:	6878      	ldr	r0, [r7, #4]
 8009494:	f000 f846 	bl	8009524 <USBH_GetDescriptor>
 8009498:	4603      	mov	r3, r0
 800949a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800949c:	7bfb      	ldrb	r3, [r7, #15]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d107      	bne.n	80094b2 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80094a2:	887b      	ldrh	r3, [r7, #2]
 80094a4:	461a      	mov	r2, r3
 80094a6:	68b9      	ldr	r1, [r7, #8]
 80094a8:	6878      	ldr	r0, [r7, #4]
 80094aa:	f000 f9af 	bl	800980c <USBH_ParseCfgDesc>
 80094ae:	4603      	mov	r3, r0
 80094b0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80094b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80094b4:	4618      	mov	r0, r3
 80094b6:	3710      	adds	r7, #16
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bd80      	pop	{r7, pc}

080094bc <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b088      	sub	sp, #32
 80094c0:	af02      	add	r7, sp, #8
 80094c2:	60f8      	str	r0, [r7, #12]
 80094c4:	607a      	str	r2, [r7, #4]
 80094c6:	461a      	mov	r2, r3
 80094c8:	460b      	mov	r3, r1
 80094ca:	72fb      	strb	r3, [r7, #11]
 80094cc:	4613      	mov	r3, r2
 80094ce:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 80094d0:	893b      	ldrh	r3, [r7, #8]
 80094d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80094d6:	d802      	bhi.n	80094de <USBH_Get_StringDesc+0x22>
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d101      	bne.n	80094e2 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80094de:	2303      	movs	r3, #3
 80094e0:	e01c      	b.n	800951c <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 80094e2:	7afb      	ldrb	r3, [r7, #11]
 80094e4:	b29b      	uxth	r3, r3
 80094e6:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80094ea:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80094f2:	893b      	ldrh	r3, [r7, #8]
 80094f4:	9300      	str	r3, [sp, #0]
 80094f6:	460b      	mov	r3, r1
 80094f8:	2100      	movs	r1, #0
 80094fa:	68f8      	ldr	r0, [r7, #12]
 80094fc:	f000 f812 	bl	8009524 <USBH_GetDescriptor>
 8009500:	4603      	mov	r3, r0
 8009502:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8009504:	7dfb      	ldrb	r3, [r7, #23]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d107      	bne.n	800951a <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009510:	893a      	ldrh	r2, [r7, #8]
 8009512:	6879      	ldr	r1, [r7, #4]
 8009514:	4618      	mov	r0, r3
 8009516:	f000 fb8d 	bl	8009c34 <USBH_ParseStringDesc>
  }

  return status;
 800951a:	7dfb      	ldrb	r3, [r7, #23]
}
 800951c:	4618      	mov	r0, r3
 800951e:	3718      	adds	r7, #24
 8009520:	46bd      	mov	sp, r7
 8009522:	bd80      	pop	{r7, pc}

08009524 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b084      	sub	sp, #16
 8009528:	af00      	add	r7, sp, #0
 800952a:	60f8      	str	r0, [r7, #12]
 800952c:	607b      	str	r3, [r7, #4]
 800952e:	460b      	mov	r3, r1
 8009530:	72fb      	strb	r3, [r7, #11]
 8009532:	4613      	mov	r3, r2
 8009534:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	789b      	ldrb	r3, [r3, #2]
 800953a:	2b01      	cmp	r3, #1
 800953c:	d11c      	bne.n	8009578 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800953e:	7afb      	ldrb	r3, [r7, #11]
 8009540:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009544:	b2da      	uxtb	r2, r3
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	2206      	movs	r2, #6
 800954e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	893a      	ldrh	r2, [r7, #8]
 8009554:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009556:	893b      	ldrh	r3, [r7, #8]
 8009558:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800955c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009560:	d104      	bne.n	800956c <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	f240 4209 	movw	r2, #1033	@ 0x409
 8009568:	829a      	strh	r2, [r3, #20]
 800956a:	e002      	b.n	8009572 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	2200      	movs	r2, #0
 8009570:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	8b3a      	ldrh	r2, [r7, #24]
 8009576:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8009578:	8b3b      	ldrh	r3, [r7, #24]
 800957a:	461a      	mov	r2, r3
 800957c:	6879      	ldr	r1, [r7, #4]
 800957e:	68f8      	ldr	r0, [r7, #12]
 8009580:	f000 fba5 	bl	8009cce <USBH_CtlReq>
 8009584:	4603      	mov	r3, r0
}
 8009586:	4618      	mov	r0, r3
 8009588:	3710      	adds	r7, #16
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}

0800958e <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800958e:	b580      	push	{r7, lr}
 8009590:	b082      	sub	sp, #8
 8009592:	af00      	add	r7, sp, #0
 8009594:	6078      	str	r0, [r7, #4]
 8009596:	460b      	mov	r3, r1
 8009598:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	789b      	ldrb	r3, [r3, #2]
 800959e:	2b01      	cmp	r3, #1
 80095a0:	d10f      	bne.n	80095c2 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2200      	movs	r2, #0
 80095a6:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2205      	movs	r2, #5
 80095ac:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80095ae:	78fb      	ldrb	r3, [r7, #3]
 80095b0:	b29a      	uxth	r2, r3
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2200      	movs	r2, #0
 80095ba:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2200      	movs	r2, #0
 80095c0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80095c2:	2200      	movs	r2, #0
 80095c4:	2100      	movs	r1, #0
 80095c6:	6878      	ldr	r0, [r7, #4]
 80095c8:	f000 fb81 	bl	8009cce <USBH_CtlReq>
 80095cc:	4603      	mov	r3, r0
}
 80095ce:	4618      	mov	r0, r3
 80095d0:	3708      	adds	r7, #8
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd80      	pop	{r7, pc}

080095d6 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80095d6:	b580      	push	{r7, lr}
 80095d8:	b082      	sub	sp, #8
 80095da:	af00      	add	r7, sp, #0
 80095dc:	6078      	str	r0, [r7, #4]
 80095de:	460b      	mov	r3, r1
 80095e0:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	789b      	ldrb	r3, [r3, #2]
 80095e6:	2b01      	cmp	r3, #1
 80095e8:	d10e      	bne.n	8009608 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	2200      	movs	r2, #0
 80095ee:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2209      	movs	r2, #9
 80095f4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	887a      	ldrh	r2, [r7, #2]
 80095fa:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2200      	movs	r2, #0
 8009600:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2200      	movs	r2, #0
 8009606:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009608:	2200      	movs	r2, #0
 800960a:	2100      	movs	r1, #0
 800960c:	6878      	ldr	r0, [r7, #4]
 800960e:	f000 fb5e 	bl	8009cce <USBH_CtlReq>
 8009612:	4603      	mov	r3, r0
}
 8009614:	4618      	mov	r0, r3
 8009616:	3708      	adds	r7, #8
 8009618:	46bd      	mov	sp, r7
 800961a:	bd80      	pop	{r7, pc}

0800961c <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b082      	sub	sp, #8
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
 8009624:	460b      	mov	r3, r1
 8009626:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	789b      	ldrb	r3, [r3, #2]
 800962c:	2b01      	cmp	r3, #1
 800962e:	d10f      	bne.n	8009650 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2200      	movs	r2, #0
 8009634:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	2203      	movs	r2, #3
 800963a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800963c:	78fb      	ldrb	r3, [r7, #3]
 800963e:	b29a      	uxth	r2, r3
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2200      	movs	r2, #0
 8009648:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2200      	movs	r2, #0
 800964e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009650:	2200      	movs	r2, #0
 8009652:	2100      	movs	r1, #0
 8009654:	6878      	ldr	r0, [r7, #4]
 8009656:	f000 fb3a 	bl	8009cce <USBH_CtlReq>
 800965a:	4603      	mov	r3, r0
}
 800965c:	4618      	mov	r0, r3
 800965e:	3708      	adds	r7, #8
 8009660:	46bd      	mov	sp, r7
 8009662:	bd80      	pop	{r7, pc}

08009664 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b082      	sub	sp, #8
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
 800966c:	460b      	mov	r3, r1
 800966e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	789b      	ldrb	r3, [r3, #2]
 8009674:	2b01      	cmp	r3, #1
 8009676:	d10f      	bne.n	8009698 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2202      	movs	r2, #2
 800967c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2201      	movs	r2, #1
 8009682:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2200      	movs	r2, #0
 8009688:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800968a:	78fb      	ldrb	r3, [r7, #3]
 800968c:	b29a      	uxth	r2, r3
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	2200      	movs	r2, #0
 8009696:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009698:	2200      	movs	r2, #0
 800969a:	2100      	movs	r1, #0
 800969c:	6878      	ldr	r0, [r7, #4]
 800969e:	f000 fb16 	bl	8009cce <USBH_CtlReq>
 80096a2:	4603      	mov	r3, r0
}
 80096a4:	4618      	mov	r0, r3
 80096a6:	3708      	adds	r7, #8
 80096a8:	46bd      	mov	sp, r7
 80096aa:	bd80      	pop	{r7, pc}

080096ac <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80096ac:	b480      	push	{r7}
 80096ae:	b087      	sub	sp, #28
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	60f8      	str	r0, [r7, #12]
 80096b4:	60b9      	str	r1, [r7, #8]
 80096b6:	4613      	mov	r3, r2
 80096b8:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	f203 3326 	addw	r3, r3, #806	@ 0x326
 80096c0:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 80096c2:	2300      	movs	r3, #0
 80096c4:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 80096c6:	68bb      	ldr	r3, [r7, #8]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d101      	bne.n	80096d0 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 80096cc:	2302      	movs	r3, #2
 80096ce:	e094      	b.n	80097fa <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 80096d0:	68bb      	ldr	r3, [r7, #8]
 80096d2:	781a      	ldrb	r2, [r3, #0]
 80096d4:	693b      	ldr	r3, [r7, #16]
 80096d6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 80096d8:	68bb      	ldr	r3, [r7, #8]
 80096da:	785a      	ldrb	r2, [r3, #1]
 80096dc:	693b      	ldr	r3, [r7, #16]
 80096de:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 80096e0:	68bb      	ldr	r3, [r7, #8]
 80096e2:	3302      	adds	r3, #2
 80096e4:	781b      	ldrb	r3, [r3, #0]
 80096e6:	461a      	mov	r2, r3
 80096e8:	68bb      	ldr	r3, [r7, #8]
 80096ea:	3303      	adds	r3, #3
 80096ec:	781b      	ldrb	r3, [r3, #0]
 80096ee:	021b      	lsls	r3, r3, #8
 80096f0:	b29b      	uxth	r3, r3
 80096f2:	4313      	orrs	r3, r2
 80096f4:	b29a      	uxth	r2, r3
 80096f6:	693b      	ldr	r3, [r7, #16]
 80096f8:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	791a      	ldrb	r2, [r3, #4]
 80096fe:	693b      	ldr	r3, [r7, #16]
 8009700:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8009702:	68bb      	ldr	r3, [r7, #8]
 8009704:	795a      	ldrb	r2, [r3, #5]
 8009706:	693b      	ldr	r3, [r7, #16]
 8009708:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800970a:	68bb      	ldr	r3, [r7, #8]
 800970c:	799a      	ldrb	r2, [r3, #6]
 800970e:	693b      	ldr	r3, [r7, #16]
 8009710:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8009712:	68bb      	ldr	r3, [r7, #8]
 8009714:	79da      	ldrb	r2, [r3, #7]
 8009716:	693b      	ldr	r3, [r7, #16]
 8009718:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009720:	2b00      	cmp	r3, #0
 8009722:	d004      	beq.n	800972e <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800972a:	2b01      	cmp	r3, #1
 800972c:	d11b      	bne.n	8009766 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800972e:	693b      	ldr	r3, [r7, #16]
 8009730:	79db      	ldrb	r3, [r3, #7]
 8009732:	2b20      	cmp	r3, #32
 8009734:	dc0f      	bgt.n	8009756 <USBH_ParseDevDesc+0xaa>
 8009736:	2b08      	cmp	r3, #8
 8009738:	db0f      	blt.n	800975a <USBH_ParseDevDesc+0xae>
 800973a:	3b08      	subs	r3, #8
 800973c:	4a32      	ldr	r2, [pc, #200]	@ (8009808 <USBH_ParseDevDesc+0x15c>)
 800973e:	fa22 f303 	lsr.w	r3, r2, r3
 8009742:	f003 0301 	and.w	r3, r3, #1
 8009746:	2b00      	cmp	r3, #0
 8009748:	bf14      	ite	ne
 800974a:	2301      	movne	r3, #1
 800974c:	2300      	moveq	r3, #0
 800974e:	b2db      	uxtb	r3, r3
 8009750:	2b00      	cmp	r3, #0
 8009752:	d106      	bne.n	8009762 <USBH_ParseDevDesc+0xb6>
 8009754:	e001      	b.n	800975a <USBH_ParseDevDesc+0xae>
 8009756:	2b40      	cmp	r3, #64	@ 0x40
 8009758:	d003      	beq.n	8009762 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800975a:	693b      	ldr	r3, [r7, #16]
 800975c:	2208      	movs	r2, #8
 800975e:	71da      	strb	r2, [r3, #7]
        break;
 8009760:	e000      	b.n	8009764 <USBH_ParseDevDesc+0xb8>
        break;
 8009762:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8009764:	e00e      	b.n	8009784 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800976c:	2b02      	cmp	r3, #2
 800976e:	d107      	bne.n	8009780 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8009770:	693b      	ldr	r3, [r7, #16]
 8009772:	79db      	ldrb	r3, [r3, #7]
 8009774:	2b08      	cmp	r3, #8
 8009776:	d005      	beq.n	8009784 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8009778:	693b      	ldr	r3, [r7, #16]
 800977a:	2208      	movs	r2, #8
 800977c:	71da      	strb	r2, [r3, #7]
 800977e:	e001      	b.n	8009784 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8009780:	2303      	movs	r3, #3
 8009782:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8009784:	88fb      	ldrh	r3, [r7, #6]
 8009786:	2b08      	cmp	r3, #8
 8009788:	d936      	bls.n	80097f8 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800978a:	68bb      	ldr	r3, [r7, #8]
 800978c:	3308      	adds	r3, #8
 800978e:	781b      	ldrb	r3, [r3, #0]
 8009790:	461a      	mov	r2, r3
 8009792:	68bb      	ldr	r3, [r7, #8]
 8009794:	3309      	adds	r3, #9
 8009796:	781b      	ldrb	r3, [r3, #0]
 8009798:	021b      	lsls	r3, r3, #8
 800979a:	b29b      	uxth	r3, r3
 800979c:	4313      	orrs	r3, r2
 800979e:	b29a      	uxth	r2, r3
 80097a0:	693b      	ldr	r3, [r7, #16]
 80097a2:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 80097a4:	68bb      	ldr	r3, [r7, #8]
 80097a6:	330a      	adds	r3, #10
 80097a8:	781b      	ldrb	r3, [r3, #0]
 80097aa:	461a      	mov	r2, r3
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	330b      	adds	r3, #11
 80097b0:	781b      	ldrb	r3, [r3, #0]
 80097b2:	021b      	lsls	r3, r3, #8
 80097b4:	b29b      	uxth	r3, r3
 80097b6:	4313      	orrs	r3, r2
 80097b8:	b29a      	uxth	r2, r3
 80097ba:	693b      	ldr	r3, [r7, #16]
 80097bc:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 80097be:	68bb      	ldr	r3, [r7, #8]
 80097c0:	330c      	adds	r3, #12
 80097c2:	781b      	ldrb	r3, [r3, #0]
 80097c4:	461a      	mov	r2, r3
 80097c6:	68bb      	ldr	r3, [r7, #8]
 80097c8:	330d      	adds	r3, #13
 80097ca:	781b      	ldrb	r3, [r3, #0]
 80097cc:	021b      	lsls	r3, r3, #8
 80097ce:	b29b      	uxth	r3, r3
 80097d0:	4313      	orrs	r3, r2
 80097d2:	b29a      	uxth	r2, r3
 80097d4:	693b      	ldr	r3, [r7, #16]
 80097d6:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 80097d8:	68bb      	ldr	r3, [r7, #8]
 80097da:	7b9a      	ldrb	r2, [r3, #14]
 80097dc:	693b      	ldr	r3, [r7, #16]
 80097de:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 80097e0:	68bb      	ldr	r3, [r7, #8]
 80097e2:	7bda      	ldrb	r2, [r3, #15]
 80097e4:	693b      	ldr	r3, [r7, #16]
 80097e6:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 80097e8:	68bb      	ldr	r3, [r7, #8]
 80097ea:	7c1a      	ldrb	r2, [r3, #16]
 80097ec:	693b      	ldr	r3, [r7, #16]
 80097ee:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 80097f0:	68bb      	ldr	r3, [r7, #8]
 80097f2:	7c5a      	ldrb	r2, [r3, #17]
 80097f4:	693b      	ldr	r3, [r7, #16]
 80097f6:	745a      	strb	r2, [r3, #17]
  }

  return status;
 80097f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80097fa:	4618      	mov	r0, r3
 80097fc:	371c      	adds	r7, #28
 80097fe:	46bd      	mov	sp, r7
 8009800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009804:	4770      	bx	lr
 8009806:	bf00      	nop
 8009808:	01000101 	.word	0x01000101

0800980c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b08c      	sub	sp, #48	@ 0x30
 8009810:	af00      	add	r7, sp, #0
 8009812:	60f8      	str	r0, [r7, #12]
 8009814:	60b9      	str	r1, [r7, #8]
 8009816:	4613      	mov	r3, r2
 8009818:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8009820:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8009822:	2300      	movs	r3, #0
 8009824:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8009828:	2300      	movs	r3, #0
 800982a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800982e:	2300      	movs	r3, #0
 8009830:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8009834:	68bb      	ldr	r3, [r7, #8]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d101      	bne.n	800983e <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800983a:	2302      	movs	r3, #2
 800983c:	e0da      	b.n	80099f4 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800983e:	68bb      	ldr	r3, [r7, #8]
 8009840:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8009842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009844:	781b      	ldrb	r3, [r3, #0]
 8009846:	2b09      	cmp	r3, #9
 8009848:	d002      	beq.n	8009850 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800984a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800984c:	2209      	movs	r2, #9
 800984e:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8009850:	68bb      	ldr	r3, [r7, #8]
 8009852:	781a      	ldrb	r2, [r3, #0]
 8009854:	6a3b      	ldr	r3, [r7, #32]
 8009856:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8009858:	68bb      	ldr	r3, [r7, #8]
 800985a:	785a      	ldrb	r2, [r3, #1]
 800985c:	6a3b      	ldr	r3, [r7, #32]
 800985e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8009860:	68bb      	ldr	r3, [r7, #8]
 8009862:	3302      	adds	r3, #2
 8009864:	781b      	ldrb	r3, [r3, #0]
 8009866:	461a      	mov	r2, r3
 8009868:	68bb      	ldr	r3, [r7, #8]
 800986a:	3303      	adds	r3, #3
 800986c:	781b      	ldrb	r3, [r3, #0]
 800986e:	021b      	lsls	r3, r3, #8
 8009870:	b29b      	uxth	r3, r3
 8009872:	4313      	orrs	r3, r2
 8009874:	b29b      	uxth	r3, r3
 8009876:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800987a:	bf28      	it	cs
 800987c:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8009880:	b29a      	uxth	r2, r3
 8009882:	6a3b      	ldr	r3, [r7, #32]
 8009884:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8009886:	68bb      	ldr	r3, [r7, #8]
 8009888:	791a      	ldrb	r2, [r3, #4]
 800988a:	6a3b      	ldr	r3, [r7, #32]
 800988c:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800988e:	68bb      	ldr	r3, [r7, #8]
 8009890:	795a      	ldrb	r2, [r3, #5]
 8009892:	6a3b      	ldr	r3, [r7, #32]
 8009894:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8009896:	68bb      	ldr	r3, [r7, #8]
 8009898:	799a      	ldrb	r2, [r3, #6]
 800989a:	6a3b      	ldr	r3, [r7, #32]
 800989c:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800989e:	68bb      	ldr	r3, [r7, #8]
 80098a0:	79da      	ldrb	r2, [r3, #7]
 80098a2:	6a3b      	ldr	r3, [r7, #32]
 80098a4:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 80098a6:	68bb      	ldr	r3, [r7, #8]
 80098a8:	7a1a      	ldrb	r2, [r3, #8]
 80098aa:	6a3b      	ldr	r3, [r7, #32]
 80098ac:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80098ae:	88fb      	ldrh	r3, [r7, #6]
 80098b0:	2b09      	cmp	r3, #9
 80098b2:	f240 809d 	bls.w	80099f0 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 80098b6:	2309      	movs	r3, #9
 80098b8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80098ba:	2300      	movs	r3, #0
 80098bc:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80098be:	e081      	b.n	80099c4 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80098c0:	f107 0316 	add.w	r3, r7, #22
 80098c4:	4619      	mov	r1, r3
 80098c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80098c8:	f000 f9e7 	bl	8009c9a <USBH_GetNextDesc>
 80098cc:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80098ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098d0:	785b      	ldrb	r3, [r3, #1]
 80098d2:	2b04      	cmp	r3, #4
 80098d4:	d176      	bne.n	80099c4 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80098d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098d8:	781b      	ldrb	r3, [r3, #0]
 80098da:	2b09      	cmp	r3, #9
 80098dc:	d002      	beq.n	80098e4 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80098de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098e0:	2209      	movs	r2, #9
 80098e2:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80098e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80098e8:	221a      	movs	r2, #26
 80098ea:	fb02 f303 	mul.w	r3, r2, r3
 80098ee:	3308      	adds	r3, #8
 80098f0:	6a3a      	ldr	r2, [r7, #32]
 80098f2:	4413      	add	r3, r2
 80098f4:	3302      	adds	r3, #2
 80098f6:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80098f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80098fa:	69f8      	ldr	r0, [r7, #28]
 80098fc:	f000 f87e 	bl	80099fc <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8009900:	2300      	movs	r3, #0
 8009902:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8009906:	2300      	movs	r3, #0
 8009908:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800990a:	e043      	b.n	8009994 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800990c:	f107 0316 	add.w	r3, r7, #22
 8009910:	4619      	mov	r1, r3
 8009912:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009914:	f000 f9c1 	bl	8009c9a <USBH_GetNextDesc>
 8009918:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800991a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800991c:	785b      	ldrb	r3, [r3, #1]
 800991e:	2b05      	cmp	r3, #5
 8009920:	d138      	bne.n	8009994 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8009922:	69fb      	ldr	r3, [r7, #28]
 8009924:	795b      	ldrb	r3, [r3, #5]
 8009926:	2b01      	cmp	r3, #1
 8009928:	d113      	bne.n	8009952 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800992a:	69fb      	ldr	r3, [r7, #28]
 800992c:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800992e:	2b02      	cmp	r3, #2
 8009930:	d003      	beq.n	800993a <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8009932:	69fb      	ldr	r3, [r7, #28]
 8009934:	799b      	ldrb	r3, [r3, #6]
 8009936:	2b03      	cmp	r3, #3
 8009938:	d10b      	bne.n	8009952 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800993a:	69fb      	ldr	r3, [r7, #28]
 800993c:	79db      	ldrb	r3, [r3, #7]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d10b      	bne.n	800995a <USBH_ParseCfgDesc+0x14e>
 8009942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009944:	781b      	ldrb	r3, [r3, #0]
 8009946:	2b09      	cmp	r3, #9
 8009948:	d007      	beq.n	800995a <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800994a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800994c:	2209      	movs	r2, #9
 800994e:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009950:	e003      	b.n	800995a <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8009952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009954:	2207      	movs	r2, #7
 8009956:	701a      	strb	r2, [r3, #0]
 8009958:	e000      	b.n	800995c <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800995a:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800995c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009960:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009964:	3201      	adds	r2, #1
 8009966:	00d2      	lsls	r2, r2, #3
 8009968:	211a      	movs	r1, #26
 800996a:	fb01 f303 	mul.w	r3, r1, r3
 800996e:	4413      	add	r3, r2
 8009970:	3308      	adds	r3, #8
 8009972:	6a3a      	ldr	r2, [r7, #32]
 8009974:	4413      	add	r3, r2
 8009976:	3304      	adds	r3, #4
 8009978:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800997a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800997c:	69b9      	ldr	r1, [r7, #24]
 800997e:	68f8      	ldr	r0, [r7, #12]
 8009980:	f000 f870 	bl	8009a64 <USBH_ParseEPDesc>
 8009984:	4603      	mov	r3, r0
 8009986:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800998a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800998e:	3301      	adds	r3, #1
 8009990:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009994:	69fb      	ldr	r3, [r7, #28]
 8009996:	791b      	ldrb	r3, [r3, #4]
 8009998:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800999c:	429a      	cmp	r2, r3
 800999e:	d204      	bcs.n	80099aa <USBH_ParseCfgDesc+0x19e>
 80099a0:	6a3b      	ldr	r3, [r7, #32]
 80099a2:	885a      	ldrh	r2, [r3, #2]
 80099a4:	8afb      	ldrh	r3, [r7, #22]
 80099a6:	429a      	cmp	r2, r3
 80099a8:	d8b0      	bhi.n	800990c <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80099aa:	69fb      	ldr	r3, [r7, #28]
 80099ac:	791b      	ldrb	r3, [r3, #4]
 80099ae:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80099b2:	429a      	cmp	r2, r3
 80099b4:	d201      	bcs.n	80099ba <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 80099b6:	2303      	movs	r3, #3
 80099b8:	e01c      	b.n	80099f4 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 80099ba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80099be:	3301      	adds	r3, #1
 80099c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80099c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80099c8:	2b01      	cmp	r3, #1
 80099ca:	d805      	bhi.n	80099d8 <USBH_ParseCfgDesc+0x1cc>
 80099cc:	6a3b      	ldr	r3, [r7, #32]
 80099ce:	885a      	ldrh	r2, [r3, #2]
 80099d0:	8afb      	ldrh	r3, [r7, #22]
 80099d2:	429a      	cmp	r2, r3
 80099d4:	f63f af74 	bhi.w	80098c0 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80099d8:	6a3b      	ldr	r3, [r7, #32]
 80099da:	791b      	ldrb	r3, [r3, #4]
 80099dc:	2b02      	cmp	r3, #2
 80099de:	bf28      	it	cs
 80099e0:	2302      	movcs	r3, #2
 80099e2:	b2db      	uxtb	r3, r3
 80099e4:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80099e8:	429a      	cmp	r2, r3
 80099ea:	d201      	bcs.n	80099f0 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 80099ec:	2303      	movs	r3, #3
 80099ee:	e001      	b.n	80099f4 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 80099f0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80099f4:	4618      	mov	r0, r3
 80099f6:	3730      	adds	r7, #48	@ 0x30
 80099f8:	46bd      	mov	sp, r7
 80099fa:	bd80      	pop	{r7, pc}

080099fc <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 80099fc:	b480      	push	{r7}
 80099fe:	b083      	sub	sp, #12
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
 8009a04:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	781a      	ldrb	r2, [r3, #0]
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8009a0e:	683b      	ldr	r3, [r7, #0]
 8009a10:	785a      	ldrb	r2, [r3, #1]
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8009a16:	683b      	ldr	r3, [r7, #0]
 8009a18:	789a      	ldrb	r2, [r3, #2]
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	78da      	ldrb	r2, [r3, #3]
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	3304      	adds	r3, #4
 8009a2a:	781b      	ldrb	r3, [r3, #0]
 8009a2c:	2b02      	cmp	r3, #2
 8009a2e:	bf28      	it	cs
 8009a30:	2302      	movcs	r3, #2
 8009a32:	b2da      	uxtb	r2, r3
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	795a      	ldrb	r2, [r3, #5]
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	799a      	ldrb	r2, [r3, #6]
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	79da      	ldrb	r2, [r3, #7]
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	7a1a      	ldrb	r2, [r3, #8]
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	721a      	strb	r2, [r3, #8]
}
 8009a58:	bf00      	nop
 8009a5a:	370c      	adds	r7, #12
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a62:	4770      	bx	lr

08009a64 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8009a64:	b480      	push	{r7}
 8009a66:	b087      	sub	sp, #28
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	60f8      	str	r0, [r7, #12]
 8009a6c:	60b9      	str	r1, [r7, #8]
 8009a6e:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8009a70:	2300      	movs	r3, #0
 8009a72:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	781a      	ldrb	r2, [r3, #0]
 8009a78:	68bb      	ldr	r3, [r7, #8]
 8009a7a:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	785a      	ldrb	r2, [r3, #1]
 8009a80:	68bb      	ldr	r3, [r7, #8]
 8009a82:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	789a      	ldrb	r2, [r3, #2]
 8009a88:	68bb      	ldr	r3, [r7, #8]
 8009a8a:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	78da      	ldrb	r2, [r3, #3]
 8009a90:	68bb      	ldr	r3, [r7, #8]
 8009a92:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	3304      	adds	r3, #4
 8009a98:	781b      	ldrb	r3, [r3, #0]
 8009a9a:	461a      	mov	r2, r3
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	3305      	adds	r3, #5
 8009aa0:	781b      	ldrb	r3, [r3, #0]
 8009aa2:	021b      	lsls	r3, r3, #8
 8009aa4:	b29b      	uxth	r3, r3
 8009aa6:	4313      	orrs	r3, r2
 8009aa8:	b29a      	uxth	r2, r3
 8009aaa:	68bb      	ldr	r3, [r7, #8]
 8009aac:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	799a      	ldrb	r2, [r3, #6]
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8009ab6:	68bb      	ldr	r3, [r7, #8]
 8009ab8:	889b      	ldrh	r3, [r3, #4]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d009      	beq.n	8009ad2 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8009abe:	68bb      	ldr	r3, [r7, #8]
 8009ac0:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8009ac2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009ac6:	d804      	bhi.n	8009ad2 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8009ac8:	68bb      	ldr	r3, [r7, #8]
 8009aca:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8009acc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009ad0:	d901      	bls.n	8009ad6 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8009ad2:	2303      	movs	r3, #3
 8009ad4:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d136      	bne.n	8009b4e <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8009ae0:	68bb      	ldr	r3, [r7, #8]
 8009ae2:	78db      	ldrb	r3, [r3, #3]
 8009ae4:	f003 0303 	and.w	r3, r3, #3
 8009ae8:	2b02      	cmp	r3, #2
 8009aea:	d108      	bne.n	8009afe <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8009aec:	68bb      	ldr	r3, [r7, #8]
 8009aee:	889b      	ldrh	r3, [r3, #4]
 8009af0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009af4:	f240 8097 	bls.w	8009c26 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009af8:	2303      	movs	r3, #3
 8009afa:	75fb      	strb	r3, [r7, #23]
 8009afc:	e093      	b.n	8009c26 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8009afe:	68bb      	ldr	r3, [r7, #8]
 8009b00:	78db      	ldrb	r3, [r3, #3]
 8009b02:	f003 0303 	and.w	r3, r3, #3
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d107      	bne.n	8009b1a <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009b0a:	68bb      	ldr	r3, [r7, #8]
 8009b0c:	889b      	ldrh	r3, [r3, #4]
 8009b0e:	2b40      	cmp	r3, #64	@ 0x40
 8009b10:	f240 8089 	bls.w	8009c26 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009b14:	2303      	movs	r3, #3
 8009b16:	75fb      	strb	r3, [r7, #23]
 8009b18:	e085      	b.n	8009c26 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009b1a:	68bb      	ldr	r3, [r7, #8]
 8009b1c:	78db      	ldrb	r3, [r3, #3]
 8009b1e:	f003 0303 	and.w	r3, r3, #3
 8009b22:	2b01      	cmp	r3, #1
 8009b24:	d005      	beq.n	8009b32 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8009b26:	68bb      	ldr	r3, [r7, #8]
 8009b28:	78db      	ldrb	r3, [r3, #3]
 8009b2a:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009b2e:	2b03      	cmp	r3, #3
 8009b30:	d10a      	bne.n	8009b48 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009b32:	68bb      	ldr	r3, [r7, #8]
 8009b34:	799b      	ldrb	r3, [r3, #6]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d003      	beq.n	8009b42 <USBH_ParseEPDesc+0xde>
 8009b3a:	68bb      	ldr	r3, [r7, #8]
 8009b3c:	799b      	ldrb	r3, [r3, #6]
 8009b3e:	2b10      	cmp	r3, #16
 8009b40:	d970      	bls.n	8009c24 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8009b42:	2303      	movs	r3, #3
 8009b44:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009b46:	e06d      	b.n	8009c24 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009b48:	2303      	movs	r3, #3
 8009b4a:	75fb      	strb	r3, [r7, #23]
 8009b4c:	e06b      	b.n	8009c26 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009b54:	2b01      	cmp	r3, #1
 8009b56:	d13c      	bne.n	8009bd2 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8009b58:	68bb      	ldr	r3, [r7, #8]
 8009b5a:	78db      	ldrb	r3, [r3, #3]
 8009b5c:	f003 0303 	and.w	r3, r3, #3
 8009b60:	2b02      	cmp	r3, #2
 8009b62:	d005      	beq.n	8009b70 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8009b64:	68bb      	ldr	r3, [r7, #8]
 8009b66:	78db      	ldrb	r3, [r3, #3]
 8009b68:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d106      	bne.n	8009b7e <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009b70:	68bb      	ldr	r3, [r7, #8]
 8009b72:	889b      	ldrh	r3, [r3, #4]
 8009b74:	2b40      	cmp	r3, #64	@ 0x40
 8009b76:	d956      	bls.n	8009c26 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009b78:	2303      	movs	r3, #3
 8009b7a:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009b7c:	e053      	b.n	8009c26 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8009b7e:	68bb      	ldr	r3, [r7, #8]
 8009b80:	78db      	ldrb	r3, [r3, #3]
 8009b82:	f003 0303 	and.w	r3, r3, #3
 8009b86:	2b01      	cmp	r3, #1
 8009b88:	d10e      	bne.n	8009ba8 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8009b8a:	68bb      	ldr	r3, [r7, #8]
 8009b8c:	799b      	ldrb	r3, [r3, #6]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d007      	beq.n	8009ba2 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8009b92:	68bb      	ldr	r3, [r7, #8]
 8009b94:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8009b96:	2b10      	cmp	r3, #16
 8009b98:	d803      	bhi.n	8009ba2 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8009b9a:	68bb      	ldr	r3, [r7, #8]
 8009b9c:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8009b9e:	2b40      	cmp	r3, #64	@ 0x40
 8009ba0:	d941      	bls.n	8009c26 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009ba2:	2303      	movs	r3, #3
 8009ba4:	75fb      	strb	r3, [r7, #23]
 8009ba6:	e03e      	b.n	8009c26 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009ba8:	68bb      	ldr	r3, [r7, #8]
 8009baa:	78db      	ldrb	r3, [r3, #3]
 8009bac:	f003 0303 	and.w	r3, r3, #3
 8009bb0:	2b03      	cmp	r3, #3
 8009bb2:	d10b      	bne.n	8009bcc <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8009bb4:	68bb      	ldr	r3, [r7, #8]
 8009bb6:	799b      	ldrb	r3, [r3, #6]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d004      	beq.n	8009bc6 <USBH_ParseEPDesc+0x162>
 8009bbc:	68bb      	ldr	r3, [r7, #8]
 8009bbe:	889b      	ldrh	r3, [r3, #4]
 8009bc0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009bc4:	d32f      	bcc.n	8009c26 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009bc6:	2303      	movs	r3, #3
 8009bc8:	75fb      	strb	r3, [r7, #23]
 8009bca:	e02c      	b.n	8009c26 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009bcc:	2303      	movs	r3, #3
 8009bce:	75fb      	strb	r3, [r7, #23]
 8009bd0:	e029      	b.n	8009c26 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009bd8:	2b02      	cmp	r3, #2
 8009bda:	d120      	bne.n	8009c1e <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8009bdc:	68bb      	ldr	r3, [r7, #8]
 8009bde:	78db      	ldrb	r3, [r3, #3]
 8009be0:	f003 0303 	and.w	r3, r3, #3
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d106      	bne.n	8009bf6 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8009be8:	68bb      	ldr	r3, [r7, #8]
 8009bea:	889b      	ldrh	r3, [r3, #4]
 8009bec:	2b08      	cmp	r3, #8
 8009bee:	d01a      	beq.n	8009c26 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009bf0:	2303      	movs	r3, #3
 8009bf2:	75fb      	strb	r3, [r7, #23]
 8009bf4:	e017      	b.n	8009c26 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009bf6:	68bb      	ldr	r3, [r7, #8]
 8009bf8:	78db      	ldrb	r3, [r3, #3]
 8009bfa:	f003 0303 	and.w	r3, r3, #3
 8009bfe:	2b03      	cmp	r3, #3
 8009c00:	d10a      	bne.n	8009c18 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8009c02:	68bb      	ldr	r3, [r7, #8]
 8009c04:	799b      	ldrb	r3, [r3, #6]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d003      	beq.n	8009c12 <USBH_ParseEPDesc+0x1ae>
 8009c0a:	68bb      	ldr	r3, [r7, #8]
 8009c0c:	889b      	ldrh	r3, [r3, #4]
 8009c0e:	2b08      	cmp	r3, #8
 8009c10:	d909      	bls.n	8009c26 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009c12:	2303      	movs	r3, #3
 8009c14:	75fb      	strb	r3, [r7, #23]
 8009c16:	e006      	b.n	8009c26 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009c18:	2303      	movs	r3, #3
 8009c1a:	75fb      	strb	r3, [r7, #23]
 8009c1c:	e003      	b.n	8009c26 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8009c1e:	2303      	movs	r3, #3
 8009c20:	75fb      	strb	r3, [r7, #23]
 8009c22:	e000      	b.n	8009c26 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009c24:	bf00      	nop
  }

  return status;
 8009c26:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c28:	4618      	mov	r0, r3
 8009c2a:	371c      	adds	r7, #28
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c32:	4770      	bx	lr

08009c34 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8009c34:	b480      	push	{r7}
 8009c36:	b087      	sub	sp, #28
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	60f8      	str	r0, [r7, #12]
 8009c3c:	60b9      	str	r1, [r7, #8]
 8009c3e:	4613      	mov	r3, r2
 8009c40:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	3301      	adds	r3, #1
 8009c46:	781b      	ldrb	r3, [r3, #0]
 8009c48:	2b03      	cmp	r3, #3
 8009c4a:	d120      	bne.n	8009c8e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	781b      	ldrb	r3, [r3, #0]
 8009c50:	1e9a      	subs	r2, r3, #2
 8009c52:	88fb      	ldrh	r3, [r7, #6]
 8009c54:	4293      	cmp	r3, r2
 8009c56:	bf28      	it	cs
 8009c58:	4613      	movcs	r3, r2
 8009c5a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	3302      	adds	r3, #2
 8009c60:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8009c62:	2300      	movs	r3, #0
 8009c64:	82fb      	strh	r3, [r7, #22]
 8009c66:	e00b      	b.n	8009c80 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009c68:	8afb      	ldrh	r3, [r7, #22]
 8009c6a:	68fa      	ldr	r2, [r7, #12]
 8009c6c:	4413      	add	r3, r2
 8009c6e:	781a      	ldrb	r2, [r3, #0]
 8009c70:	68bb      	ldr	r3, [r7, #8]
 8009c72:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009c74:	68bb      	ldr	r3, [r7, #8]
 8009c76:	3301      	adds	r3, #1
 8009c78:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8009c7a:	8afb      	ldrh	r3, [r7, #22]
 8009c7c:	3302      	adds	r3, #2
 8009c7e:	82fb      	strh	r3, [r7, #22]
 8009c80:	8afa      	ldrh	r2, [r7, #22]
 8009c82:	8abb      	ldrh	r3, [r7, #20]
 8009c84:	429a      	cmp	r2, r3
 8009c86:	d3ef      	bcc.n	8009c68 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	701a      	strb	r2, [r3, #0]
  }
}
 8009c8e:	bf00      	nop
 8009c90:	371c      	adds	r7, #28
 8009c92:	46bd      	mov	sp, r7
 8009c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c98:	4770      	bx	lr

08009c9a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009c9a:	b480      	push	{r7}
 8009c9c:	b085      	sub	sp, #20
 8009c9e:	af00      	add	r7, sp, #0
 8009ca0:	6078      	str	r0, [r7, #4]
 8009ca2:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	881b      	ldrh	r3, [r3, #0]
 8009ca8:	687a      	ldr	r2, [r7, #4]
 8009caa:	7812      	ldrb	r2, [r2, #0]
 8009cac:	4413      	add	r3, r2
 8009cae:	b29a      	uxth	r2, r3
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	781b      	ldrb	r3, [r3, #0]
 8009cb8:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	4413      	add	r3, r2
 8009cbe:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009cc0:	68fb      	ldr	r3, [r7, #12]
}
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	3714      	adds	r7, #20
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ccc:	4770      	bx	lr

08009cce <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8009cce:	b580      	push	{r7, lr}
 8009cd0:	b086      	sub	sp, #24
 8009cd2:	af00      	add	r7, sp, #0
 8009cd4:	60f8      	str	r0, [r7, #12]
 8009cd6:	60b9      	str	r1, [r7, #8]
 8009cd8:	4613      	mov	r3, r2
 8009cda:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009cdc:	2301      	movs	r3, #1
 8009cde:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	789b      	ldrb	r3, [r3, #2]
 8009ce4:	2b01      	cmp	r3, #1
 8009ce6:	d002      	beq.n	8009cee <USBH_CtlReq+0x20>
 8009ce8:	2b02      	cmp	r3, #2
 8009cea:	d00f      	beq.n	8009d0c <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8009cec:	e027      	b.n	8009d3e <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	68ba      	ldr	r2, [r7, #8]
 8009cf2:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	88fa      	ldrh	r2, [r7, #6]
 8009cf8:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	2201      	movs	r2, #1
 8009cfe:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	2202      	movs	r2, #2
 8009d04:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8009d06:	2301      	movs	r3, #1
 8009d08:	75fb      	strb	r3, [r7, #23]
      break;
 8009d0a:	e018      	b.n	8009d3e <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8009d0c:	68f8      	ldr	r0, [r7, #12]
 8009d0e:	f000 f81b 	bl	8009d48 <USBH_HandleControl>
 8009d12:	4603      	mov	r3, r0
 8009d14:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8009d16:	7dfb      	ldrb	r3, [r7, #23]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d002      	beq.n	8009d22 <USBH_CtlReq+0x54>
 8009d1c:	7dfb      	ldrb	r3, [r7, #23]
 8009d1e:	2b03      	cmp	r3, #3
 8009d20:	d106      	bne.n	8009d30 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	2201      	movs	r2, #1
 8009d26:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	761a      	strb	r2, [r3, #24]
      break;
 8009d2e:	e005      	b.n	8009d3c <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8009d30:	7dfb      	ldrb	r3, [r7, #23]
 8009d32:	2b02      	cmp	r3, #2
 8009d34:	d102      	bne.n	8009d3c <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	2201      	movs	r2, #1
 8009d3a:	709a      	strb	r2, [r3, #2]
      break;
 8009d3c:	bf00      	nop
  }
  return status;
 8009d3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d40:	4618      	mov	r0, r3
 8009d42:	3718      	adds	r7, #24
 8009d44:	46bd      	mov	sp, r7
 8009d46:	bd80      	pop	{r7, pc}

08009d48 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b086      	sub	sp, #24
 8009d4c:	af02      	add	r7, sp, #8
 8009d4e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8009d50:	2301      	movs	r3, #1
 8009d52:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009d54:	2300      	movs	r3, #0
 8009d56:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	7e1b      	ldrb	r3, [r3, #24]
 8009d5c:	3b01      	subs	r3, #1
 8009d5e:	2b0a      	cmp	r3, #10
 8009d60:	f200 8156 	bhi.w	800a010 <USBH_HandleControl+0x2c8>
 8009d64:	a201      	add	r2, pc, #4	@ (adr r2, 8009d6c <USBH_HandleControl+0x24>)
 8009d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d6a:	bf00      	nop
 8009d6c:	08009d99 	.word	0x08009d99
 8009d70:	08009db3 	.word	0x08009db3
 8009d74:	08009e1d 	.word	0x08009e1d
 8009d78:	08009e43 	.word	0x08009e43
 8009d7c:	08009e7b 	.word	0x08009e7b
 8009d80:	08009ea5 	.word	0x08009ea5
 8009d84:	08009ef7 	.word	0x08009ef7
 8009d88:	08009f19 	.word	0x08009f19
 8009d8c:	08009f55 	.word	0x08009f55
 8009d90:	08009f7b 	.word	0x08009f7b
 8009d94:	08009fb9 	.word	0x08009fb9
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	f103 0110 	add.w	r1, r3, #16
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	795b      	ldrb	r3, [r3, #5]
 8009da2:	461a      	mov	r2, r3
 8009da4:	6878      	ldr	r0, [r7, #4]
 8009da6:	f000 f943 	bl	800a030 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	2202      	movs	r2, #2
 8009dae:	761a      	strb	r2, [r3, #24]
      break;
 8009db0:	e139      	b.n	800a026 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	795b      	ldrb	r3, [r3, #5]
 8009db6:	4619      	mov	r1, r3
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	f000 fcc5 	bl	800a748 <USBH_LL_GetURBState>
 8009dbe:	4603      	mov	r3, r0
 8009dc0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8009dc2:	7bbb      	ldrb	r3, [r7, #14]
 8009dc4:	2b01      	cmp	r3, #1
 8009dc6:	d11e      	bne.n	8009e06 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	7c1b      	ldrb	r3, [r3, #16]
 8009dcc:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009dd0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	8adb      	ldrh	r3, [r3, #22]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d00a      	beq.n	8009df0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8009dda:	7b7b      	ldrb	r3, [r7, #13]
 8009ddc:	2b80      	cmp	r3, #128	@ 0x80
 8009dde:	d103      	bne.n	8009de8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2203      	movs	r2, #3
 8009de4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009de6:	e115      	b.n	800a014 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	2205      	movs	r2, #5
 8009dec:	761a      	strb	r2, [r3, #24]
      break;
 8009dee:	e111      	b.n	800a014 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8009df0:	7b7b      	ldrb	r3, [r7, #13]
 8009df2:	2b80      	cmp	r3, #128	@ 0x80
 8009df4:	d103      	bne.n	8009dfe <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	2209      	movs	r2, #9
 8009dfa:	761a      	strb	r2, [r3, #24]
      break;
 8009dfc:	e10a      	b.n	800a014 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	2207      	movs	r2, #7
 8009e02:	761a      	strb	r2, [r3, #24]
      break;
 8009e04:	e106      	b.n	800a014 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8009e06:	7bbb      	ldrb	r3, [r7, #14]
 8009e08:	2b04      	cmp	r3, #4
 8009e0a:	d003      	beq.n	8009e14 <USBH_HandleControl+0xcc>
 8009e0c:	7bbb      	ldrb	r3, [r7, #14]
 8009e0e:	2b02      	cmp	r3, #2
 8009e10:	f040 8100 	bne.w	800a014 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	220b      	movs	r2, #11
 8009e18:	761a      	strb	r2, [r3, #24]
      break;
 8009e1a:	e0fb      	b.n	800a014 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009e22:	b29a      	uxth	r2, r3
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	6899      	ldr	r1, [r3, #8]
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	899a      	ldrh	r2, [r3, #12]
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	791b      	ldrb	r3, [r3, #4]
 8009e34:	6878      	ldr	r0, [r7, #4]
 8009e36:	f000 f93a 	bl	800a0ae <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	2204      	movs	r2, #4
 8009e3e:	761a      	strb	r2, [r3, #24]
      break;
 8009e40:	e0f1      	b.n	800a026 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	791b      	ldrb	r3, [r3, #4]
 8009e46:	4619      	mov	r1, r3
 8009e48:	6878      	ldr	r0, [r7, #4]
 8009e4a:	f000 fc7d 	bl	800a748 <USBH_LL_GetURBState>
 8009e4e:	4603      	mov	r3, r0
 8009e50:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8009e52:	7bbb      	ldrb	r3, [r7, #14]
 8009e54:	2b01      	cmp	r3, #1
 8009e56:	d102      	bne.n	8009e5e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	2209      	movs	r2, #9
 8009e5c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8009e5e:	7bbb      	ldrb	r3, [r7, #14]
 8009e60:	2b05      	cmp	r3, #5
 8009e62:	d102      	bne.n	8009e6a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009e64:	2303      	movs	r3, #3
 8009e66:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009e68:	e0d6      	b.n	800a018 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8009e6a:	7bbb      	ldrb	r3, [r7, #14]
 8009e6c:	2b04      	cmp	r3, #4
 8009e6e:	f040 80d3 	bne.w	800a018 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	220b      	movs	r2, #11
 8009e76:	761a      	strb	r2, [r3, #24]
      break;
 8009e78:	e0ce      	b.n	800a018 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	6899      	ldr	r1, [r3, #8]
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	899a      	ldrh	r2, [r3, #12]
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	795b      	ldrb	r3, [r3, #5]
 8009e86:	2001      	movs	r0, #1
 8009e88:	9000      	str	r0, [sp, #0]
 8009e8a:	6878      	ldr	r0, [r7, #4]
 8009e8c:	f000 f8ea 	bl	800a064 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009e96:	b29a      	uxth	r2, r3
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2206      	movs	r2, #6
 8009ea0:	761a      	strb	r2, [r3, #24]
      break;
 8009ea2:	e0c0      	b.n	800a026 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	795b      	ldrb	r3, [r3, #5]
 8009ea8:	4619      	mov	r1, r3
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	f000 fc4c 	bl	800a748 <USBH_LL_GetURBState>
 8009eb0:	4603      	mov	r3, r0
 8009eb2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009eb4:	7bbb      	ldrb	r3, [r7, #14]
 8009eb6:	2b01      	cmp	r3, #1
 8009eb8:	d103      	bne.n	8009ec2 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	2207      	movs	r2, #7
 8009ebe:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009ec0:	e0ac      	b.n	800a01c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8009ec2:	7bbb      	ldrb	r3, [r7, #14]
 8009ec4:	2b05      	cmp	r3, #5
 8009ec6:	d105      	bne.n	8009ed4 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	220c      	movs	r2, #12
 8009ecc:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009ece:	2303      	movs	r3, #3
 8009ed0:	73fb      	strb	r3, [r7, #15]
      break;
 8009ed2:	e0a3      	b.n	800a01c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009ed4:	7bbb      	ldrb	r3, [r7, #14]
 8009ed6:	2b02      	cmp	r3, #2
 8009ed8:	d103      	bne.n	8009ee2 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2205      	movs	r2, #5
 8009ede:	761a      	strb	r2, [r3, #24]
      break;
 8009ee0:	e09c      	b.n	800a01c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8009ee2:	7bbb      	ldrb	r3, [r7, #14]
 8009ee4:	2b04      	cmp	r3, #4
 8009ee6:	f040 8099 	bne.w	800a01c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	220b      	movs	r2, #11
 8009eee:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009ef0:	2302      	movs	r3, #2
 8009ef2:	73fb      	strb	r3, [r7, #15]
      break;
 8009ef4:	e092      	b.n	800a01c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	791b      	ldrb	r3, [r3, #4]
 8009efa:	2200      	movs	r2, #0
 8009efc:	2100      	movs	r1, #0
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	f000 f8d5 	bl	800a0ae <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009f0a:	b29a      	uxth	r2, r3
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2208      	movs	r2, #8
 8009f14:	761a      	strb	r2, [r3, #24]

      break;
 8009f16:	e086      	b.n	800a026 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	791b      	ldrb	r3, [r3, #4]
 8009f1c:	4619      	mov	r1, r3
 8009f1e:	6878      	ldr	r0, [r7, #4]
 8009f20:	f000 fc12 	bl	800a748 <USBH_LL_GetURBState>
 8009f24:	4603      	mov	r3, r0
 8009f26:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009f28:	7bbb      	ldrb	r3, [r7, #14]
 8009f2a:	2b01      	cmp	r3, #1
 8009f2c:	d105      	bne.n	8009f3a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	220d      	movs	r2, #13
 8009f32:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009f34:	2300      	movs	r3, #0
 8009f36:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009f38:	e072      	b.n	800a020 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8009f3a:	7bbb      	ldrb	r3, [r7, #14]
 8009f3c:	2b04      	cmp	r3, #4
 8009f3e:	d103      	bne.n	8009f48 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	220b      	movs	r2, #11
 8009f44:	761a      	strb	r2, [r3, #24]
      break;
 8009f46:	e06b      	b.n	800a020 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8009f48:	7bbb      	ldrb	r3, [r7, #14]
 8009f4a:	2b05      	cmp	r3, #5
 8009f4c:	d168      	bne.n	800a020 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8009f4e:	2303      	movs	r3, #3
 8009f50:	73fb      	strb	r3, [r7, #15]
      break;
 8009f52:	e065      	b.n	800a020 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	795b      	ldrb	r3, [r3, #5]
 8009f58:	2201      	movs	r2, #1
 8009f5a:	9200      	str	r2, [sp, #0]
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	2100      	movs	r1, #0
 8009f60:	6878      	ldr	r0, [r7, #4]
 8009f62:	f000 f87f 	bl	800a064 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009f6c:	b29a      	uxth	r2, r3
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	220a      	movs	r2, #10
 8009f76:	761a      	strb	r2, [r3, #24]
      break;
 8009f78:	e055      	b.n	800a026 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	795b      	ldrb	r3, [r3, #5]
 8009f7e:	4619      	mov	r1, r3
 8009f80:	6878      	ldr	r0, [r7, #4]
 8009f82:	f000 fbe1 	bl	800a748 <USBH_LL_GetURBState>
 8009f86:	4603      	mov	r3, r0
 8009f88:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009f8a:	7bbb      	ldrb	r3, [r7, #14]
 8009f8c:	2b01      	cmp	r3, #1
 8009f8e:	d105      	bne.n	8009f9c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8009f90:	2300      	movs	r3, #0
 8009f92:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	220d      	movs	r2, #13
 8009f98:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009f9a:	e043      	b.n	800a024 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009f9c:	7bbb      	ldrb	r3, [r7, #14]
 8009f9e:	2b02      	cmp	r3, #2
 8009fa0:	d103      	bne.n	8009faa <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	2209      	movs	r2, #9
 8009fa6:	761a      	strb	r2, [r3, #24]
      break;
 8009fa8:	e03c      	b.n	800a024 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8009faa:	7bbb      	ldrb	r3, [r7, #14]
 8009fac:	2b04      	cmp	r3, #4
 8009fae:	d139      	bne.n	800a024 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	220b      	movs	r2, #11
 8009fb4:	761a      	strb	r2, [r3, #24]
      break;
 8009fb6:	e035      	b.n	800a024 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	7e5b      	ldrb	r3, [r3, #25]
 8009fbc:	3301      	adds	r3, #1
 8009fbe:	b2da      	uxtb	r2, r3
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	765a      	strb	r2, [r3, #25]
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	7e5b      	ldrb	r3, [r3, #25]
 8009fc8:	2b02      	cmp	r3, #2
 8009fca:	d806      	bhi.n	8009fda <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	2201      	movs	r2, #1
 8009fd0:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	2201      	movs	r2, #1
 8009fd6:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009fd8:	e025      	b.n	800a026 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009fe0:	2106      	movs	r1, #6
 8009fe2:	6878      	ldr	r0, [r7, #4]
 8009fe4:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	2200      	movs	r2, #0
 8009fea:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	795b      	ldrb	r3, [r3, #5]
 8009ff0:	4619      	mov	r1, r3
 8009ff2:	6878      	ldr	r0, [r7, #4]
 8009ff4:	f000 f90c 	bl	800a210 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	791b      	ldrb	r3, [r3, #4]
 8009ffc:	4619      	mov	r1, r3
 8009ffe:	6878      	ldr	r0, [r7, #4]
 800a000:	f000 f906 	bl	800a210 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2200      	movs	r2, #0
 800a008:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a00a:	2302      	movs	r3, #2
 800a00c:	73fb      	strb	r3, [r7, #15]
      break;
 800a00e:	e00a      	b.n	800a026 <USBH_HandleControl+0x2de>

    default:
      break;
 800a010:	bf00      	nop
 800a012:	e008      	b.n	800a026 <USBH_HandleControl+0x2de>
      break;
 800a014:	bf00      	nop
 800a016:	e006      	b.n	800a026 <USBH_HandleControl+0x2de>
      break;
 800a018:	bf00      	nop
 800a01a:	e004      	b.n	800a026 <USBH_HandleControl+0x2de>
      break;
 800a01c:	bf00      	nop
 800a01e:	e002      	b.n	800a026 <USBH_HandleControl+0x2de>
      break;
 800a020:	bf00      	nop
 800a022:	e000      	b.n	800a026 <USBH_HandleControl+0x2de>
      break;
 800a024:	bf00      	nop
  }

  return status;
 800a026:	7bfb      	ldrb	r3, [r7, #15]
}
 800a028:	4618      	mov	r0, r3
 800a02a:	3710      	adds	r7, #16
 800a02c:	46bd      	mov	sp, r7
 800a02e:	bd80      	pop	{r7, pc}

0800a030 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b088      	sub	sp, #32
 800a034:	af04      	add	r7, sp, #16
 800a036:	60f8      	str	r0, [r7, #12]
 800a038:	60b9      	str	r1, [r7, #8]
 800a03a:	4613      	mov	r3, r2
 800a03c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a03e:	79f9      	ldrb	r1, [r7, #7]
 800a040:	2300      	movs	r3, #0
 800a042:	9303      	str	r3, [sp, #12]
 800a044:	2308      	movs	r3, #8
 800a046:	9302      	str	r3, [sp, #8]
 800a048:	68bb      	ldr	r3, [r7, #8]
 800a04a:	9301      	str	r3, [sp, #4]
 800a04c:	2300      	movs	r3, #0
 800a04e:	9300      	str	r3, [sp, #0]
 800a050:	2300      	movs	r3, #0
 800a052:	2200      	movs	r2, #0
 800a054:	68f8      	ldr	r0, [r7, #12]
 800a056:	f000 fb46 	bl	800a6e6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800a05a:	2300      	movs	r3, #0
}
 800a05c:	4618      	mov	r0, r3
 800a05e:	3710      	adds	r7, #16
 800a060:	46bd      	mov	sp, r7
 800a062:	bd80      	pop	{r7, pc}

0800a064 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b088      	sub	sp, #32
 800a068:	af04      	add	r7, sp, #16
 800a06a:	60f8      	str	r0, [r7, #12]
 800a06c:	60b9      	str	r1, [r7, #8]
 800a06e:	4611      	mov	r1, r2
 800a070:	461a      	mov	r2, r3
 800a072:	460b      	mov	r3, r1
 800a074:	80fb      	strh	r3, [r7, #6]
 800a076:	4613      	mov	r3, r2
 800a078:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a080:	2b00      	cmp	r3, #0
 800a082:	d001      	beq.n	800a088 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a084:	2300      	movs	r3, #0
 800a086:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a088:	7979      	ldrb	r1, [r7, #5]
 800a08a:	7e3b      	ldrb	r3, [r7, #24]
 800a08c:	9303      	str	r3, [sp, #12]
 800a08e:	88fb      	ldrh	r3, [r7, #6]
 800a090:	9302      	str	r3, [sp, #8]
 800a092:	68bb      	ldr	r3, [r7, #8]
 800a094:	9301      	str	r3, [sp, #4]
 800a096:	2301      	movs	r3, #1
 800a098:	9300      	str	r3, [sp, #0]
 800a09a:	2300      	movs	r3, #0
 800a09c:	2200      	movs	r2, #0
 800a09e:	68f8      	ldr	r0, [r7, #12]
 800a0a0:	f000 fb21 	bl	800a6e6 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a0a4:	2300      	movs	r3, #0
}
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	3710      	adds	r7, #16
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	bd80      	pop	{r7, pc}

0800a0ae <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a0ae:	b580      	push	{r7, lr}
 800a0b0:	b088      	sub	sp, #32
 800a0b2:	af04      	add	r7, sp, #16
 800a0b4:	60f8      	str	r0, [r7, #12]
 800a0b6:	60b9      	str	r1, [r7, #8]
 800a0b8:	4611      	mov	r1, r2
 800a0ba:	461a      	mov	r2, r3
 800a0bc:	460b      	mov	r3, r1
 800a0be:	80fb      	strh	r3, [r7, #6]
 800a0c0:	4613      	mov	r3, r2
 800a0c2:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a0c4:	7979      	ldrb	r1, [r7, #5]
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	9303      	str	r3, [sp, #12]
 800a0ca:	88fb      	ldrh	r3, [r7, #6]
 800a0cc:	9302      	str	r3, [sp, #8]
 800a0ce:	68bb      	ldr	r3, [r7, #8]
 800a0d0:	9301      	str	r3, [sp, #4]
 800a0d2:	2301      	movs	r3, #1
 800a0d4:	9300      	str	r3, [sp, #0]
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	2201      	movs	r2, #1
 800a0da:	68f8      	ldr	r0, [r7, #12]
 800a0dc:	f000 fb03 	bl	800a6e6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a0e0:	2300      	movs	r3, #0

}
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	3710      	adds	r7, #16
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	bd80      	pop	{r7, pc}

0800a0ea <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800a0ea:	b580      	push	{r7, lr}
 800a0ec:	b088      	sub	sp, #32
 800a0ee:	af04      	add	r7, sp, #16
 800a0f0:	60f8      	str	r0, [r7, #12]
 800a0f2:	60b9      	str	r1, [r7, #8]
 800a0f4:	4611      	mov	r1, r2
 800a0f6:	461a      	mov	r2, r3
 800a0f8:	460b      	mov	r3, r1
 800a0fa:	80fb      	strh	r3, [r7, #6]
 800a0fc:	4613      	mov	r3, r2
 800a0fe:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a106:	2b00      	cmp	r3, #0
 800a108:	d001      	beq.n	800a10e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800a10a:	2300      	movs	r3, #0
 800a10c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a10e:	7979      	ldrb	r1, [r7, #5]
 800a110:	7e3b      	ldrb	r3, [r7, #24]
 800a112:	9303      	str	r3, [sp, #12]
 800a114:	88fb      	ldrh	r3, [r7, #6]
 800a116:	9302      	str	r3, [sp, #8]
 800a118:	68bb      	ldr	r3, [r7, #8]
 800a11a:	9301      	str	r3, [sp, #4]
 800a11c:	2301      	movs	r3, #1
 800a11e:	9300      	str	r3, [sp, #0]
 800a120:	2302      	movs	r3, #2
 800a122:	2200      	movs	r2, #0
 800a124:	68f8      	ldr	r0, [r7, #12]
 800a126:	f000 fade 	bl	800a6e6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800a12a:	2300      	movs	r3, #0
}
 800a12c:	4618      	mov	r0, r3
 800a12e:	3710      	adds	r7, #16
 800a130:	46bd      	mov	sp, r7
 800a132:	bd80      	pop	{r7, pc}

0800a134 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b088      	sub	sp, #32
 800a138:	af04      	add	r7, sp, #16
 800a13a:	60f8      	str	r0, [r7, #12]
 800a13c:	60b9      	str	r1, [r7, #8]
 800a13e:	4611      	mov	r1, r2
 800a140:	461a      	mov	r2, r3
 800a142:	460b      	mov	r3, r1
 800a144:	80fb      	strh	r3, [r7, #6]
 800a146:	4613      	mov	r3, r2
 800a148:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a14a:	7979      	ldrb	r1, [r7, #5]
 800a14c:	2300      	movs	r3, #0
 800a14e:	9303      	str	r3, [sp, #12]
 800a150:	88fb      	ldrh	r3, [r7, #6]
 800a152:	9302      	str	r3, [sp, #8]
 800a154:	68bb      	ldr	r3, [r7, #8]
 800a156:	9301      	str	r3, [sp, #4]
 800a158:	2301      	movs	r3, #1
 800a15a:	9300      	str	r3, [sp, #0]
 800a15c:	2302      	movs	r3, #2
 800a15e:	2201      	movs	r2, #1
 800a160:	68f8      	ldr	r0, [r7, #12]
 800a162:	f000 fac0 	bl	800a6e6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a166:	2300      	movs	r3, #0
}
 800a168:	4618      	mov	r0, r3
 800a16a:	3710      	adds	r7, #16
 800a16c:	46bd      	mov	sp, r7
 800a16e:	bd80      	pop	{r7, pc}

0800a170 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b086      	sub	sp, #24
 800a174:	af04      	add	r7, sp, #16
 800a176:	6078      	str	r0, [r7, #4]
 800a178:	4608      	mov	r0, r1
 800a17a:	4611      	mov	r1, r2
 800a17c:	461a      	mov	r2, r3
 800a17e:	4603      	mov	r3, r0
 800a180:	70fb      	strb	r3, [r7, #3]
 800a182:	460b      	mov	r3, r1
 800a184:	70bb      	strb	r3, [r7, #2]
 800a186:	4613      	mov	r3, r2
 800a188:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800a18a:	7878      	ldrb	r0, [r7, #1]
 800a18c:	78ba      	ldrb	r2, [r7, #2]
 800a18e:	78f9      	ldrb	r1, [r7, #3]
 800a190:	8b3b      	ldrh	r3, [r7, #24]
 800a192:	9302      	str	r3, [sp, #8]
 800a194:	7d3b      	ldrb	r3, [r7, #20]
 800a196:	9301      	str	r3, [sp, #4]
 800a198:	7c3b      	ldrb	r3, [r7, #16]
 800a19a:	9300      	str	r3, [sp, #0]
 800a19c:	4603      	mov	r3, r0
 800a19e:	6878      	ldr	r0, [r7, #4]
 800a1a0:	f000 fa53 	bl	800a64a <USBH_LL_OpenPipe>

  return USBH_OK;
 800a1a4:	2300      	movs	r3, #0
}
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	3708      	adds	r7, #8
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	bd80      	pop	{r7, pc}

0800a1ae <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800a1ae:	b580      	push	{r7, lr}
 800a1b0:	b082      	sub	sp, #8
 800a1b2:	af00      	add	r7, sp, #0
 800a1b4:	6078      	str	r0, [r7, #4]
 800a1b6:	460b      	mov	r3, r1
 800a1b8:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800a1ba:	78fb      	ldrb	r3, [r7, #3]
 800a1bc:	4619      	mov	r1, r3
 800a1be:	6878      	ldr	r0, [r7, #4]
 800a1c0:	f000 fa72 	bl	800a6a8 <USBH_LL_ClosePipe>

  return USBH_OK;
 800a1c4:	2300      	movs	r3, #0
}
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	3708      	adds	r7, #8
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	bd80      	pop	{r7, pc}

0800a1ce <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a1ce:	b580      	push	{r7, lr}
 800a1d0:	b084      	sub	sp, #16
 800a1d2:	af00      	add	r7, sp, #0
 800a1d4:	6078      	str	r0, [r7, #4]
 800a1d6:	460b      	mov	r3, r1
 800a1d8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a1da:	6878      	ldr	r0, [r7, #4]
 800a1dc:	f000 f836 	bl	800a24c <USBH_GetFreePipe>
 800a1e0:	4603      	mov	r3, r0
 800a1e2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a1e4:	89fb      	ldrh	r3, [r7, #14]
 800a1e6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a1ea:	4293      	cmp	r3, r2
 800a1ec:	d00a      	beq.n	800a204 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800a1ee:	78fa      	ldrb	r2, [r7, #3]
 800a1f0:	89fb      	ldrh	r3, [r7, #14]
 800a1f2:	f003 030f 	and.w	r3, r3, #15
 800a1f6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a1fa:	6879      	ldr	r1, [r7, #4]
 800a1fc:	33e0      	adds	r3, #224	@ 0xe0
 800a1fe:	009b      	lsls	r3, r3, #2
 800a200:	440b      	add	r3, r1
 800a202:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800a204:	89fb      	ldrh	r3, [r7, #14]
 800a206:	b2db      	uxtb	r3, r3
}
 800a208:	4618      	mov	r0, r3
 800a20a:	3710      	adds	r7, #16
 800a20c:	46bd      	mov	sp, r7
 800a20e:	bd80      	pop	{r7, pc}

0800a210 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a210:	b480      	push	{r7}
 800a212:	b083      	sub	sp, #12
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
 800a218:	460b      	mov	r3, r1
 800a21a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800a21c:	78fb      	ldrb	r3, [r7, #3]
 800a21e:	2b0f      	cmp	r3, #15
 800a220:	d80d      	bhi.n	800a23e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a222:	78fb      	ldrb	r3, [r7, #3]
 800a224:	687a      	ldr	r2, [r7, #4]
 800a226:	33e0      	adds	r3, #224	@ 0xe0
 800a228:	009b      	lsls	r3, r3, #2
 800a22a:	4413      	add	r3, r2
 800a22c:	685a      	ldr	r2, [r3, #4]
 800a22e:	78fb      	ldrb	r3, [r7, #3]
 800a230:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a234:	6879      	ldr	r1, [r7, #4]
 800a236:	33e0      	adds	r3, #224	@ 0xe0
 800a238:	009b      	lsls	r3, r3, #2
 800a23a:	440b      	add	r3, r1
 800a23c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a23e:	2300      	movs	r3, #0
}
 800a240:	4618      	mov	r0, r3
 800a242:	370c      	adds	r7, #12
 800a244:	46bd      	mov	sp, r7
 800a246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24a:	4770      	bx	lr

0800a24c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800a24c:	b480      	push	{r7}
 800a24e:	b085      	sub	sp, #20
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a254:	2300      	movs	r3, #0
 800a256:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800a258:	2300      	movs	r3, #0
 800a25a:	73fb      	strb	r3, [r7, #15]
 800a25c:	e00f      	b.n	800a27e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a25e:	7bfb      	ldrb	r3, [r7, #15]
 800a260:	687a      	ldr	r2, [r7, #4]
 800a262:	33e0      	adds	r3, #224	@ 0xe0
 800a264:	009b      	lsls	r3, r3, #2
 800a266:	4413      	add	r3, r2
 800a268:	685b      	ldr	r3, [r3, #4]
 800a26a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d102      	bne.n	800a278 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800a272:	7bfb      	ldrb	r3, [r7, #15]
 800a274:	b29b      	uxth	r3, r3
 800a276:	e007      	b.n	800a288 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800a278:	7bfb      	ldrb	r3, [r7, #15]
 800a27a:	3301      	adds	r3, #1
 800a27c:	73fb      	strb	r3, [r7, #15]
 800a27e:	7bfb      	ldrb	r3, [r7, #15]
 800a280:	2b0f      	cmp	r3, #15
 800a282:	d9ec      	bls.n	800a25e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800a284:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800a288:	4618      	mov	r0, r3
 800a28a:	3714      	adds	r7, #20
 800a28c:	46bd      	mov	sp, r7
 800a28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a292:	4770      	bx	lr

0800a294 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800a294:	b580      	push	{r7, lr}
 800a296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800a298:	2201      	movs	r2, #1
 800a29a:	490e      	ldr	r1, [pc, #56]	@ (800a2d4 <MX_USB_HOST_Init+0x40>)
 800a29c:	480e      	ldr	r0, [pc, #56]	@ (800a2d8 <MX_USB_HOST_Init+0x44>)
 800a29e:	f7fe fb15 	bl	80088cc <USBH_Init>
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d001      	beq.n	800a2ac <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800a2a8:	f7f7 feb2 	bl	8002010 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800a2ac:	490b      	ldr	r1, [pc, #44]	@ (800a2dc <MX_USB_HOST_Init+0x48>)
 800a2ae:	480a      	ldr	r0, [pc, #40]	@ (800a2d8 <MX_USB_HOST_Init+0x44>)
 800a2b0:	f7fe fbb9 	bl	8008a26 <USBH_RegisterClass>
 800a2b4:	4603      	mov	r3, r0
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d001      	beq.n	800a2be <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800a2ba:	f7f7 fea9 	bl	8002010 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800a2be:	4806      	ldr	r0, [pc, #24]	@ (800a2d8 <MX_USB_HOST_Init+0x44>)
 800a2c0:	f7fe fc3d 	bl	8008b3e <USBH_Start>
 800a2c4:	4603      	mov	r3, r0
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d001      	beq.n	800a2ce <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800a2ca:	f7f7 fea1 	bl	8002010 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800a2ce:	bf00      	nop
 800a2d0:	bd80      	pop	{r7, pc}
 800a2d2:	bf00      	nop
 800a2d4:	0800a2f5 	.word	0x0800a2f5
 800a2d8:	200002e8 	.word	0x200002e8
 800a2dc:	2000000c 	.word	0x2000000c

0800a2e0 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800a2e4:	4802      	ldr	r0, [pc, #8]	@ (800a2f0 <MX_USB_HOST_Process+0x10>)
 800a2e6:	f7fe fc3b 	bl	8008b60 <USBH_Process>
}
 800a2ea:	bf00      	nop
 800a2ec:	bd80      	pop	{r7, pc}
 800a2ee:	bf00      	nop
 800a2f0:	200002e8 	.word	0x200002e8

0800a2f4 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800a2f4:	b480      	push	{r7}
 800a2f6:	b083      	sub	sp, #12
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
 800a2fc:	460b      	mov	r3, r1
 800a2fe:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800a300:	78fb      	ldrb	r3, [r7, #3]
 800a302:	3b01      	subs	r3, #1
 800a304:	2b04      	cmp	r3, #4
 800a306:	d819      	bhi.n	800a33c <USBH_UserProcess+0x48>
 800a308:	a201      	add	r2, pc, #4	@ (adr r2, 800a310 <USBH_UserProcess+0x1c>)
 800a30a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a30e:	bf00      	nop
 800a310:	0800a33d 	.word	0x0800a33d
 800a314:	0800a32d 	.word	0x0800a32d
 800a318:	0800a33d 	.word	0x0800a33d
 800a31c:	0800a335 	.word	0x0800a335
 800a320:	0800a325 	.word	0x0800a325
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800a324:	4b09      	ldr	r3, [pc, #36]	@ (800a34c <USBH_UserProcess+0x58>)
 800a326:	2203      	movs	r2, #3
 800a328:	701a      	strb	r2, [r3, #0]
  break;
 800a32a:	e008      	b.n	800a33e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800a32c:	4b07      	ldr	r3, [pc, #28]	@ (800a34c <USBH_UserProcess+0x58>)
 800a32e:	2202      	movs	r2, #2
 800a330:	701a      	strb	r2, [r3, #0]
  break;
 800a332:	e004      	b.n	800a33e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800a334:	4b05      	ldr	r3, [pc, #20]	@ (800a34c <USBH_UserProcess+0x58>)
 800a336:	2201      	movs	r2, #1
 800a338:	701a      	strb	r2, [r3, #0]
  break;
 800a33a:	e000      	b.n	800a33e <USBH_UserProcess+0x4a>

  default:
  break;
 800a33c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800a33e:	bf00      	nop
 800a340:	370c      	adds	r7, #12
 800a342:	46bd      	mov	sp, r7
 800a344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a348:	4770      	bx	lr
 800a34a:	bf00      	nop
 800a34c:	200006c0 	.word	0x200006c0

0800a350 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b08a      	sub	sp, #40	@ 0x28
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a358:	f107 0314 	add.w	r3, r7, #20
 800a35c:	2200      	movs	r2, #0
 800a35e:	601a      	str	r2, [r3, #0]
 800a360:	605a      	str	r2, [r3, #4]
 800a362:	609a      	str	r2, [r3, #8]
 800a364:	60da      	str	r2, [r3, #12]
 800a366:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a370:	d147      	bne.n	800a402 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a372:	2300      	movs	r3, #0
 800a374:	613b      	str	r3, [r7, #16]
 800a376:	4b25      	ldr	r3, [pc, #148]	@ (800a40c <HAL_HCD_MspInit+0xbc>)
 800a378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a37a:	4a24      	ldr	r2, [pc, #144]	@ (800a40c <HAL_HCD_MspInit+0xbc>)
 800a37c:	f043 0301 	orr.w	r3, r3, #1
 800a380:	6313      	str	r3, [r2, #48]	@ 0x30
 800a382:	4b22      	ldr	r3, [pc, #136]	@ (800a40c <HAL_HCD_MspInit+0xbc>)
 800a384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a386:	f003 0301 	and.w	r3, r3, #1
 800a38a:	613b      	str	r3, [r7, #16]
 800a38c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800a38e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a392:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a394:	2300      	movs	r3, #0
 800a396:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a398:	2300      	movs	r3, #0
 800a39a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800a39c:	f107 0314 	add.w	r3, r7, #20
 800a3a0:	4619      	mov	r1, r3
 800a3a2:	481b      	ldr	r0, [pc, #108]	@ (800a410 <HAL_HCD_MspInit+0xc0>)
 800a3a4:	f7f8 f9d6 	bl	8002754 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800a3a8:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800a3ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a3ae:	2302      	movs	r3, #2
 800a3b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a3ba:	230a      	movs	r3, #10
 800a3bc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a3be:	f107 0314 	add.w	r3, r7, #20
 800a3c2:	4619      	mov	r1, r3
 800a3c4:	4812      	ldr	r0, [pc, #72]	@ (800a410 <HAL_HCD_MspInit+0xc0>)
 800a3c6:	f7f8 f9c5 	bl	8002754 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a3ca:	4b10      	ldr	r3, [pc, #64]	@ (800a40c <HAL_HCD_MspInit+0xbc>)
 800a3cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a3ce:	4a0f      	ldr	r2, [pc, #60]	@ (800a40c <HAL_HCD_MspInit+0xbc>)
 800a3d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a3d4:	6353      	str	r3, [r2, #52]	@ 0x34
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	60fb      	str	r3, [r7, #12]
 800a3da:	4b0c      	ldr	r3, [pc, #48]	@ (800a40c <HAL_HCD_MspInit+0xbc>)
 800a3dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a3de:	4a0b      	ldr	r2, [pc, #44]	@ (800a40c <HAL_HCD_MspInit+0xbc>)
 800a3e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a3e4:	6453      	str	r3, [r2, #68]	@ 0x44
 800a3e6:	4b09      	ldr	r3, [pc, #36]	@ (800a40c <HAL_HCD_MspInit+0xbc>)
 800a3e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a3ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a3ee:	60fb      	str	r3, [r7, #12]
 800a3f0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	2100      	movs	r1, #0
 800a3f6:	2043      	movs	r0, #67	@ 0x43
 800a3f8:	f7f8 f975 	bl	80026e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a3fc:	2043      	movs	r0, #67	@ 0x43
 800a3fe:	f7f8 f98e 	bl	800271e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a402:	bf00      	nop
 800a404:	3728      	adds	r7, #40	@ 0x28
 800a406:	46bd      	mov	sp, r7
 800a408:	bd80      	pop	{r7, pc}
 800a40a:	bf00      	nop
 800a40c:	40023800 	.word	0x40023800
 800a410:	40020000 	.word	0x40020000

0800a414 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b082      	sub	sp, #8
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a422:	4618      	mov	r0, r3
 800a424:	f7fe ff73 	bl	800930e <USBH_LL_IncTimer>
}
 800a428:	bf00      	nop
 800a42a:	3708      	adds	r7, #8
 800a42c:	46bd      	mov	sp, r7
 800a42e:	bd80      	pop	{r7, pc}

0800a430 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b082      	sub	sp, #8
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a43e:	4618      	mov	r0, r3
 800a440:	f7fe ffab 	bl	800939a <USBH_LL_Connect>
}
 800a444:	bf00      	nop
 800a446:	3708      	adds	r7, #8
 800a448:	46bd      	mov	sp, r7
 800a44a:	bd80      	pop	{r7, pc}

0800a44c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b082      	sub	sp, #8
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a45a:	4618      	mov	r0, r3
 800a45c:	f7fe ffb4 	bl	80093c8 <USBH_LL_Disconnect>
}
 800a460:	bf00      	nop
 800a462:	3708      	adds	r7, #8
 800a464:	46bd      	mov	sp, r7
 800a466:	bd80      	pop	{r7, pc}

0800a468 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800a468:	b480      	push	{r7}
 800a46a:	b083      	sub	sp, #12
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
 800a470:	460b      	mov	r3, r1
 800a472:	70fb      	strb	r3, [r7, #3]
 800a474:	4613      	mov	r3, r2
 800a476:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800a478:	bf00      	nop
 800a47a:	370c      	adds	r7, #12
 800a47c:	46bd      	mov	sp, r7
 800a47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a482:	4770      	bx	lr

0800a484 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b082      	sub	sp, #8
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a492:	4618      	mov	r0, r3
 800a494:	f7fe ff65 	bl	8009362 <USBH_LL_PortEnabled>
}
 800a498:	bf00      	nop
 800a49a:	3708      	adds	r7, #8
 800a49c:	46bd      	mov	sp, r7
 800a49e:	bd80      	pop	{r7, pc}

0800a4a0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b082      	sub	sp, #8
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	f7fe ff65 	bl	800937e <USBH_LL_PortDisabled>
}
 800a4b4:	bf00      	nop
 800a4b6:	3708      	adds	r7, #8
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	bd80      	pop	{r7, pc}

0800a4bc <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b082      	sub	sp, #8
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800a4ca:	2b01      	cmp	r3, #1
 800a4cc:	d12a      	bne.n	800a524 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800a4ce:	4a18      	ldr	r2, [pc, #96]	@ (800a530 <USBH_LL_Init+0x74>)
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	4a15      	ldr	r2, [pc, #84]	@ (800a530 <USBH_LL_Init+0x74>)
 800a4da:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a4de:	4b14      	ldr	r3, [pc, #80]	@ (800a530 <USBH_LL_Init+0x74>)
 800a4e0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800a4e4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800a4e6:	4b12      	ldr	r3, [pc, #72]	@ (800a530 <USBH_LL_Init+0x74>)
 800a4e8:	2208      	movs	r2, #8
 800a4ea:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800a4ec:	4b10      	ldr	r3, [pc, #64]	@ (800a530 <USBH_LL_Init+0x74>)
 800a4ee:	2201      	movs	r2, #1
 800a4f0:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a4f2:	4b0f      	ldr	r3, [pc, #60]	@ (800a530 <USBH_LL_Init+0x74>)
 800a4f4:	2200      	movs	r2, #0
 800a4f6:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800a4f8:	4b0d      	ldr	r3, [pc, #52]	@ (800a530 <USBH_LL_Init+0x74>)
 800a4fa:	2202      	movs	r2, #2
 800a4fc:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a4fe:	4b0c      	ldr	r3, [pc, #48]	@ (800a530 <USBH_LL_Init+0x74>)
 800a500:	2200      	movs	r2, #0
 800a502:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800a504:	480a      	ldr	r0, [pc, #40]	@ (800a530 <USBH_LL_Init+0x74>)
 800a506:	f7f8 fada 	bl	8002abe <HAL_HCD_Init>
 800a50a:	4603      	mov	r3, r0
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d001      	beq.n	800a514 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800a510:	f7f7 fd7e 	bl	8002010 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800a514:	4806      	ldr	r0, [pc, #24]	@ (800a530 <USBH_LL_Init+0x74>)
 800a516:	f7f8 ff3b 	bl	8003390 <HAL_HCD_GetCurrentFrame>
 800a51a:	4603      	mov	r3, r0
 800a51c:	4619      	mov	r1, r3
 800a51e:	6878      	ldr	r0, [r7, #4]
 800a520:	f7fe fee6 	bl	80092f0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800a524:	2300      	movs	r3, #0
}
 800a526:	4618      	mov	r0, r3
 800a528:	3708      	adds	r7, #8
 800a52a:	46bd      	mov	sp, r7
 800a52c:	bd80      	pop	{r7, pc}
 800a52e:	bf00      	nop
 800a530:	200006c4 	.word	0x200006c4

0800a534 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800a534:	b580      	push	{r7, lr}
 800a536:	b084      	sub	sp, #16
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a53c:	2300      	movs	r3, #0
 800a53e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a540:	2300      	movs	r3, #0
 800a542:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a54a:	4618      	mov	r0, r3
 800a54c:	f7f8 fea8 	bl	80032a0 <HAL_HCD_Start>
 800a550:	4603      	mov	r3, r0
 800a552:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a554:	7bfb      	ldrb	r3, [r7, #15]
 800a556:	4618      	mov	r0, r3
 800a558:	f000 f95e 	bl	800a818 <USBH_Get_USB_Status>
 800a55c:	4603      	mov	r3, r0
 800a55e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a560:	7bbb      	ldrb	r3, [r7, #14]
}
 800a562:	4618      	mov	r0, r3
 800a564:	3710      	adds	r7, #16
 800a566:	46bd      	mov	sp, r7
 800a568:	bd80      	pop	{r7, pc}

0800a56a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800a56a:	b580      	push	{r7, lr}
 800a56c:	b084      	sub	sp, #16
 800a56e:	af00      	add	r7, sp, #0
 800a570:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a572:	2300      	movs	r3, #0
 800a574:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a576:	2300      	movs	r3, #0
 800a578:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a580:	4618      	mov	r0, r3
 800a582:	f7f8 feb0 	bl	80032e6 <HAL_HCD_Stop>
 800a586:	4603      	mov	r3, r0
 800a588:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a58a:	7bfb      	ldrb	r3, [r7, #15]
 800a58c:	4618      	mov	r0, r3
 800a58e:	f000 f943 	bl	800a818 <USBH_Get_USB_Status>
 800a592:	4603      	mov	r3, r0
 800a594:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a596:	7bbb      	ldrb	r3, [r7, #14]
}
 800a598:	4618      	mov	r0, r3
 800a59a:	3710      	adds	r7, #16
 800a59c:	46bd      	mov	sp, r7
 800a59e:	bd80      	pop	{r7, pc}

0800a5a0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b084      	sub	sp, #16
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800a5a8:	2301      	movs	r3, #1
 800a5aa:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	f7f8 fefa 	bl	80033ac <HAL_HCD_GetCurrentSpeed>
 800a5b8:	4603      	mov	r3, r0
 800a5ba:	2b02      	cmp	r3, #2
 800a5bc:	d00c      	beq.n	800a5d8 <USBH_LL_GetSpeed+0x38>
 800a5be:	2b02      	cmp	r3, #2
 800a5c0:	d80d      	bhi.n	800a5de <USBH_LL_GetSpeed+0x3e>
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d002      	beq.n	800a5cc <USBH_LL_GetSpeed+0x2c>
 800a5c6:	2b01      	cmp	r3, #1
 800a5c8:	d003      	beq.n	800a5d2 <USBH_LL_GetSpeed+0x32>
 800a5ca:	e008      	b.n	800a5de <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	73fb      	strb	r3, [r7, #15]
    break;
 800a5d0:	e008      	b.n	800a5e4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800a5d2:	2301      	movs	r3, #1
 800a5d4:	73fb      	strb	r3, [r7, #15]
    break;
 800a5d6:	e005      	b.n	800a5e4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800a5d8:	2302      	movs	r3, #2
 800a5da:	73fb      	strb	r3, [r7, #15]
    break;
 800a5dc:	e002      	b.n	800a5e4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800a5de:	2301      	movs	r3, #1
 800a5e0:	73fb      	strb	r3, [r7, #15]
    break;
 800a5e2:	bf00      	nop
  }
  return  speed;
 800a5e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	3710      	adds	r7, #16
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	bd80      	pop	{r7, pc}

0800a5ee <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800a5ee:	b580      	push	{r7, lr}
 800a5f0:	b084      	sub	sp, #16
 800a5f2:	af00      	add	r7, sp, #0
 800a5f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a604:	4618      	mov	r0, r3
 800a606:	f7f8 fe8b 	bl	8003320 <HAL_HCD_ResetPort>
 800a60a:	4603      	mov	r3, r0
 800a60c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a60e:	7bfb      	ldrb	r3, [r7, #15]
 800a610:	4618      	mov	r0, r3
 800a612:	f000 f901 	bl	800a818 <USBH_Get_USB_Status>
 800a616:	4603      	mov	r3, r0
 800a618:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a61a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a61c:	4618      	mov	r0, r3
 800a61e:	3710      	adds	r7, #16
 800a620:	46bd      	mov	sp, r7
 800a622:	bd80      	pop	{r7, pc}

0800a624 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b082      	sub	sp, #8
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
 800a62c:	460b      	mov	r3, r1
 800a62e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a636:	78fa      	ldrb	r2, [r7, #3]
 800a638:	4611      	mov	r1, r2
 800a63a:	4618      	mov	r0, r3
 800a63c:	f7f8 fe93 	bl	8003366 <HAL_HCD_HC_GetXferCount>
 800a640:	4603      	mov	r3, r0
}
 800a642:	4618      	mov	r0, r3
 800a644:	3708      	adds	r7, #8
 800a646:	46bd      	mov	sp, r7
 800a648:	bd80      	pop	{r7, pc}

0800a64a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a64a:	b590      	push	{r4, r7, lr}
 800a64c:	b089      	sub	sp, #36	@ 0x24
 800a64e:	af04      	add	r7, sp, #16
 800a650:	6078      	str	r0, [r7, #4]
 800a652:	4608      	mov	r0, r1
 800a654:	4611      	mov	r1, r2
 800a656:	461a      	mov	r2, r3
 800a658:	4603      	mov	r3, r0
 800a65a:	70fb      	strb	r3, [r7, #3]
 800a65c:	460b      	mov	r3, r1
 800a65e:	70bb      	strb	r3, [r7, #2]
 800a660:	4613      	mov	r3, r2
 800a662:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a664:	2300      	movs	r3, #0
 800a666:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a668:	2300      	movs	r3, #0
 800a66a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800a672:	787c      	ldrb	r4, [r7, #1]
 800a674:	78ba      	ldrb	r2, [r7, #2]
 800a676:	78f9      	ldrb	r1, [r7, #3]
 800a678:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a67a:	9302      	str	r3, [sp, #8]
 800a67c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a680:	9301      	str	r3, [sp, #4]
 800a682:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a686:	9300      	str	r3, [sp, #0]
 800a688:	4623      	mov	r3, r4
 800a68a:	f7f8 fa7f 	bl	8002b8c <HAL_HCD_HC_Init>
 800a68e:	4603      	mov	r3, r0
 800a690:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800a692:	7bfb      	ldrb	r3, [r7, #15]
 800a694:	4618      	mov	r0, r3
 800a696:	f000 f8bf 	bl	800a818 <USBH_Get_USB_Status>
 800a69a:	4603      	mov	r3, r0
 800a69c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a69e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	3714      	adds	r7, #20
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	bd90      	pop	{r4, r7, pc}

0800a6a8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b084      	sub	sp, #16
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
 800a6b0:	460b      	mov	r3, r1
 800a6b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a6c2:	78fa      	ldrb	r2, [r7, #3]
 800a6c4:	4611      	mov	r1, r2
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	f7f8 fb18 	bl	8002cfc <HAL_HCD_HC_Halt>
 800a6cc:	4603      	mov	r3, r0
 800a6ce:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a6d0:	7bfb      	ldrb	r3, [r7, #15]
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	f000 f8a0 	bl	800a818 <USBH_Get_USB_Status>
 800a6d8:	4603      	mov	r3, r0
 800a6da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a6dc:	7bbb      	ldrb	r3, [r7, #14]
}
 800a6de:	4618      	mov	r0, r3
 800a6e0:	3710      	adds	r7, #16
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	bd80      	pop	{r7, pc}

0800a6e6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800a6e6:	b590      	push	{r4, r7, lr}
 800a6e8:	b089      	sub	sp, #36	@ 0x24
 800a6ea:	af04      	add	r7, sp, #16
 800a6ec:	6078      	str	r0, [r7, #4]
 800a6ee:	4608      	mov	r0, r1
 800a6f0:	4611      	mov	r1, r2
 800a6f2:	461a      	mov	r2, r3
 800a6f4:	4603      	mov	r3, r0
 800a6f6:	70fb      	strb	r3, [r7, #3]
 800a6f8:	460b      	mov	r3, r1
 800a6fa:	70bb      	strb	r3, [r7, #2]
 800a6fc:	4613      	mov	r3, r2
 800a6fe:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a700:	2300      	movs	r3, #0
 800a702:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a704:	2300      	movs	r3, #0
 800a706:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800a70e:	787c      	ldrb	r4, [r7, #1]
 800a710:	78ba      	ldrb	r2, [r7, #2]
 800a712:	78f9      	ldrb	r1, [r7, #3]
 800a714:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800a718:	9303      	str	r3, [sp, #12]
 800a71a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a71c:	9302      	str	r3, [sp, #8]
 800a71e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a720:	9301      	str	r3, [sp, #4]
 800a722:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a726:	9300      	str	r3, [sp, #0]
 800a728:	4623      	mov	r3, r4
 800a72a:	f7f8 fb0b 	bl	8002d44 <HAL_HCD_HC_SubmitRequest>
 800a72e:	4603      	mov	r3, r0
 800a730:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800a732:	7bfb      	ldrb	r3, [r7, #15]
 800a734:	4618      	mov	r0, r3
 800a736:	f000 f86f 	bl	800a818 <USBH_Get_USB_Status>
 800a73a:	4603      	mov	r3, r0
 800a73c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a73e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a740:	4618      	mov	r0, r3
 800a742:	3714      	adds	r7, #20
 800a744:	46bd      	mov	sp, r7
 800a746:	bd90      	pop	{r4, r7, pc}

0800a748 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b082      	sub	sp, #8
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
 800a750:	460b      	mov	r3, r1
 800a752:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a75a:	78fa      	ldrb	r2, [r7, #3]
 800a75c:	4611      	mov	r1, r2
 800a75e:	4618      	mov	r0, r3
 800a760:	f7f8 fdec 	bl	800333c <HAL_HCD_HC_GetURBState>
 800a764:	4603      	mov	r3, r0
}
 800a766:	4618      	mov	r0, r3
 800a768:	3708      	adds	r7, #8
 800a76a:	46bd      	mov	sp, r7
 800a76c:	bd80      	pop	{r7, pc}

0800a76e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800a76e:	b580      	push	{r7, lr}
 800a770:	b082      	sub	sp, #8
 800a772:	af00      	add	r7, sp, #0
 800a774:	6078      	str	r0, [r7, #4]
 800a776:	460b      	mov	r3, r1
 800a778:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800a780:	2b01      	cmp	r3, #1
 800a782:	d103      	bne.n	800a78c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800a784:	78fb      	ldrb	r3, [r7, #3]
 800a786:	4618      	mov	r0, r3
 800a788:	f000 f872 	bl	800a870 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800a78c:	20c8      	movs	r0, #200	@ 0xc8
 800a78e:	f7f7 feab 	bl	80024e8 <HAL_Delay>
  return USBH_OK;
 800a792:	2300      	movs	r3, #0
}
 800a794:	4618      	mov	r0, r3
 800a796:	3708      	adds	r7, #8
 800a798:	46bd      	mov	sp, r7
 800a79a:	bd80      	pop	{r7, pc}

0800a79c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800a79c:	b480      	push	{r7}
 800a79e:	b085      	sub	sp, #20
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]
 800a7a4:	460b      	mov	r3, r1
 800a7a6:	70fb      	strb	r3, [r7, #3]
 800a7a8:	4613      	mov	r3, r2
 800a7aa:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a7b2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800a7b4:	78fa      	ldrb	r2, [r7, #3]
 800a7b6:	68f9      	ldr	r1, [r7, #12]
 800a7b8:	4613      	mov	r3, r2
 800a7ba:	011b      	lsls	r3, r3, #4
 800a7bc:	1a9b      	subs	r3, r3, r2
 800a7be:	009b      	lsls	r3, r3, #2
 800a7c0:	440b      	add	r3, r1
 800a7c2:	3317      	adds	r3, #23
 800a7c4:	781b      	ldrb	r3, [r3, #0]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d00a      	beq.n	800a7e0 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800a7ca:	78fa      	ldrb	r2, [r7, #3]
 800a7cc:	68f9      	ldr	r1, [r7, #12]
 800a7ce:	4613      	mov	r3, r2
 800a7d0:	011b      	lsls	r3, r3, #4
 800a7d2:	1a9b      	subs	r3, r3, r2
 800a7d4:	009b      	lsls	r3, r3, #2
 800a7d6:	440b      	add	r3, r1
 800a7d8:	333c      	adds	r3, #60	@ 0x3c
 800a7da:	78ba      	ldrb	r2, [r7, #2]
 800a7dc:	701a      	strb	r2, [r3, #0]
 800a7de:	e009      	b.n	800a7f4 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800a7e0:	78fa      	ldrb	r2, [r7, #3]
 800a7e2:	68f9      	ldr	r1, [r7, #12]
 800a7e4:	4613      	mov	r3, r2
 800a7e6:	011b      	lsls	r3, r3, #4
 800a7e8:	1a9b      	subs	r3, r3, r2
 800a7ea:	009b      	lsls	r3, r3, #2
 800a7ec:	440b      	add	r3, r1
 800a7ee:	333d      	adds	r3, #61	@ 0x3d
 800a7f0:	78ba      	ldrb	r2, [r7, #2]
 800a7f2:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800a7f4:	2300      	movs	r3, #0
}
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	3714      	adds	r7, #20
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a800:	4770      	bx	lr

0800a802 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800a802:	b580      	push	{r7, lr}
 800a804:	b082      	sub	sp, #8
 800a806:	af00      	add	r7, sp, #0
 800a808:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800a80a:	6878      	ldr	r0, [r7, #4]
 800a80c:	f7f7 fe6c 	bl	80024e8 <HAL_Delay>
}
 800a810:	bf00      	nop
 800a812:	3708      	adds	r7, #8
 800a814:	46bd      	mov	sp, r7
 800a816:	bd80      	pop	{r7, pc}

0800a818 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a818:	b480      	push	{r7}
 800a81a:	b085      	sub	sp, #20
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	4603      	mov	r3, r0
 800a820:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a822:	2300      	movs	r3, #0
 800a824:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a826:	79fb      	ldrb	r3, [r7, #7]
 800a828:	2b03      	cmp	r3, #3
 800a82a:	d817      	bhi.n	800a85c <USBH_Get_USB_Status+0x44>
 800a82c:	a201      	add	r2, pc, #4	@ (adr r2, 800a834 <USBH_Get_USB_Status+0x1c>)
 800a82e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a832:	bf00      	nop
 800a834:	0800a845 	.word	0x0800a845
 800a838:	0800a84b 	.word	0x0800a84b
 800a83c:	0800a851 	.word	0x0800a851
 800a840:	0800a857 	.word	0x0800a857
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800a844:	2300      	movs	r3, #0
 800a846:	73fb      	strb	r3, [r7, #15]
    break;
 800a848:	e00b      	b.n	800a862 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800a84a:	2302      	movs	r3, #2
 800a84c:	73fb      	strb	r3, [r7, #15]
    break;
 800a84e:	e008      	b.n	800a862 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800a850:	2301      	movs	r3, #1
 800a852:	73fb      	strb	r3, [r7, #15]
    break;
 800a854:	e005      	b.n	800a862 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800a856:	2302      	movs	r3, #2
 800a858:	73fb      	strb	r3, [r7, #15]
    break;
 800a85a:	e002      	b.n	800a862 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800a85c:	2302      	movs	r3, #2
 800a85e:	73fb      	strb	r3, [r7, #15]
    break;
 800a860:	bf00      	nop
  }
  return usb_status;
 800a862:	7bfb      	ldrb	r3, [r7, #15]
}
 800a864:	4618      	mov	r0, r3
 800a866:	3714      	adds	r7, #20
 800a868:	46bd      	mov	sp, r7
 800a86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86e:	4770      	bx	lr

0800a870 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b084      	sub	sp, #16
 800a874:	af00      	add	r7, sp, #0
 800a876:	4603      	mov	r3, r0
 800a878:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800a87a:	79fb      	ldrb	r3, [r7, #7]
 800a87c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800a87e:	79fb      	ldrb	r3, [r7, #7]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d102      	bne.n	800a88a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800a884:	2300      	movs	r3, #0
 800a886:	73fb      	strb	r3, [r7, #15]
 800a888:	e001      	b.n	800a88e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800a88a:	2301      	movs	r3, #1
 800a88c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800a88e:	7bfb      	ldrb	r3, [r7, #15]
 800a890:	461a      	mov	r2, r3
 800a892:	2101      	movs	r1, #1
 800a894:	4803      	ldr	r0, [pc, #12]	@ (800a8a4 <MX_DriverVbusFS+0x34>)
 800a896:	f7f8 f8f9 	bl	8002a8c <HAL_GPIO_WritePin>
}
 800a89a:	bf00      	nop
 800a89c:	3710      	adds	r7, #16
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	bd80      	pop	{r7, pc}
 800a8a2:	bf00      	nop
 800a8a4:	40020800 	.word	0x40020800

0800a8a8 <malloc>:
 800a8a8:	4b02      	ldr	r3, [pc, #8]	@ (800a8b4 <malloc+0xc>)
 800a8aa:	4601      	mov	r1, r0
 800a8ac:	6818      	ldr	r0, [r3, #0]
 800a8ae:	f000 b82d 	b.w	800a90c <_malloc_r>
 800a8b2:	bf00      	nop
 800a8b4:	20000038 	.word	0x20000038

0800a8b8 <free>:
 800a8b8:	4b02      	ldr	r3, [pc, #8]	@ (800a8c4 <free+0xc>)
 800a8ba:	4601      	mov	r1, r0
 800a8bc:	6818      	ldr	r0, [r3, #0]
 800a8be:	f001 be0f 	b.w	800c4e0 <_free_r>
 800a8c2:	bf00      	nop
 800a8c4:	20000038 	.word	0x20000038

0800a8c8 <sbrk_aligned>:
 800a8c8:	b570      	push	{r4, r5, r6, lr}
 800a8ca:	4e0f      	ldr	r6, [pc, #60]	@ (800a908 <sbrk_aligned+0x40>)
 800a8cc:	460c      	mov	r4, r1
 800a8ce:	6831      	ldr	r1, [r6, #0]
 800a8d0:	4605      	mov	r5, r0
 800a8d2:	b911      	cbnz	r1, 800a8da <sbrk_aligned+0x12>
 800a8d4:	f000 ff68 	bl	800b7a8 <_sbrk_r>
 800a8d8:	6030      	str	r0, [r6, #0]
 800a8da:	4621      	mov	r1, r4
 800a8dc:	4628      	mov	r0, r5
 800a8de:	f000 ff63 	bl	800b7a8 <_sbrk_r>
 800a8e2:	1c43      	adds	r3, r0, #1
 800a8e4:	d103      	bne.n	800a8ee <sbrk_aligned+0x26>
 800a8e6:	f04f 34ff 	mov.w	r4, #4294967295
 800a8ea:	4620      	mov	r0, r4
 800a8ec:	bd70      	pop	{r4, r5, r6, pc}
 800a8ee:	1cc4      	adds	r4, r0, #3
 800a8f0:	f024 0403 	bic.w	r4, r4, #3
 800a8f4:	42a0      	cmp	r0, r4
 800a8f6:	d0f8      	beq.n	800a8ea <sbrk_aligned+0x22>
 800a8f8:	1a21      	subs	r1, r4, r0
 800a8fa:	4628      	mov	r0, r5
 800a8fc:	f000 ff54 	bl	800b7a8 <_sbrk_r>
 800a900:	3001      	adds	r0, #1
 800a902:	d1f2      	bne.n	800a8ea <sbrk_aligned+0x22>
 800a904:	e7ef      	b.n	800a8e6 <sbrk_aligned+0x1e>
 800a906:	bf00      	nop
 800a908:	20000aa4 	.word	0x20000aa4

0800a90c <_malloc_r>:
 800a90c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a910:	1ccd      	adds	r5, r1, #3
 800a912:	f025 0503 	bic.w	r5, r5, #3
 800a916:	3508      	adds	r5, #8
 800a918:	2d0c      	cmp	r5, #12
 800a91a:	bf38      	it	cc
 800a91c:	250c      	movcc	r5, #12
 800a91e:	2d00      	cmp	r5, #0
 800a920:	4606      	mov	r6, r0
 800a922:	db01      	blt.n	800a928 <_malloc_r+0x1c>
 800a924:	42a9      	cmp	r1, r5
 800a926:	d904      	bls.n	800a932 <_malloc_r+0x26>
 800a928:	230c      	movs	r3, #12
 800a92a:	6033      	str	r3, [r6, #0]
 800a92c:	2000      	movs	r0, #0
 800a92e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a932:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800aa08 <_malloc_r+0xfc>
 800a936:	f000 f869 	bl	800aa0c <__malloc_lock>
 800a93a:	f8d8 3000 	ldr.w	r3, [r8]
 800a93e:	461c      	mov	r4, r3
 800a940:	bb44      	cbnz	r4, 800a994 <_malloc_r+0x88>
 800a942:	4629      	mov	r1, r5
 800a944:	4630      	mov	r0, r6
 800a946:	f7ff ffbf 	bl	800a8c8 <sbrk_aligned>
 800a94a:	1c43      	adds	r3, r0, #1
 800a94c:	4604      	mov	r4, r0
 800a94e:	d158      	bne.n	800aa02 <_malloc_r+0xf6>
 800a950:	f8d8 4000 	ldr.w	r4, [r8]
 800a954:	4627      	mov	r7, r4
 800a956:	2f00      	cmp	r7, #0
 800a958:	d143      	bne.n	800a9e2 <_malloc_r+0xd6>
 800a95a:	2c00      	cmp	r4, #0
 800a95c:	d04b      	beq.n	800a9f6 <_malloc_r+0xea>
 800a95e:	6823      	ldr	r3, [r4, #0]
 800a960:	4639      	mov	r1, r7
 800a962:	4630      	mov	r0, r6
 800a964:	eb04 0903 	add.w	r9, r4, r3
 800a968:	f000 ff1e 	bl	800b7a8 <_sbrk_r>
 800a96c:	4581      	cmp	r9, r0
 800a96e:	d142      	bne.n	800a9f6 <_malloc_r+0xea>
 800a970:	6821      	ldr	r1, [r4, #0]
 800a972:	1a6d      	subs	r5, r5, r1
 800a974:	4629      	mov	r1, r5
 800a976:	4630      	mov	r0, r6
 800a978:	f7ff ffa6 	bl	800a8c8 <sbrk_aligned>
 800a97c:	3001      	adds	r0, #1
 800a97e:	d03a      	beq.n	800a9f6 <_malloc_r+0xea>
 800a980:	6823      	ldr	r3, [r4, #0]
 800a982:	442b      	add	r3, r5
 800a984:	6023      	str	r3, [r4, #0]
 800a986:	f8d8 3000 	ldr.w	r3, [r8]
 800a98a:	685a      	ldr	r2, [r3, #4]
 800a98c:	bb62      	cbnz	r2, 800a9e8 <_malloc_r+0xdc>
 800a98e:	f8c8 7000 	str.w	r7, [r8]
 800a992:	e00f      	b.n	800a9b4 <_malloc_r+0xa8>
 800a994:	6822      	ldr	r2, [r4, #0]
 800a996:	1b52      	subs	r2, r2, r5
 800a998:	d420      	bmi.n	800a9dc <_malloc_r+0xd0>
 800a99a:	2a0b      	cmp	r2, #11
 800a99c:	d917      	bls.n	800a9ce <_malloc_r+0xc2>
 800a99e:	1961      	adds	r1, r4, r5
 800a9a0:	42a3      	cmp	r3, r4
 800a9a2:	6025      	str	r5, [r4, #0]
 800a9a4:	bf18      	it	ne
 800a9a6:	6059      	strne	r1, [r3, #4]
 800a9a8:	6863      	ldr	r3, [r4, #4]
 800a9aa:	bf08      	it	eq
 800a9ac:	f8c8 1000 	streq.w	r1, [r8]
 800a9b0:	5162      	str	r2, [r4, r5]
 800a9b2:	604b      	str	r3, [r1, #4]
 800a9b4:	4630      	mov	r0, r6
 800a9b6:	f000 f82f 	bl	800aa18 <__malloc_unlock>
 800a9ba:	f104 000b 	add.w	r0, r4, #11
 800a9be:	1d23      	adds	r3, r4, #4
 800a9c0:	f020 0007 	bic.w	r0, r0, #7
 800a9c4:	1ac2      	subs	r2, r0, r3
 800a9c6:	bf1c      	itt	ne
 800a9c8:	1a1b      	subne	r3, r3, r0
 800a9ca:	50a3      	strne	r3, [r4, r2]
 800a9cc:	e7af      	b.n	800a92e <_malloc_r+0x22>
 800a9ce:	6862      	ldr	r2, [r4, #4]
 800a9d0:	42a3      	cmp	r3, r4
 800a9d2:	bf0c      	ite	eq
 800a9d4:	f8c8 2000 	streq.w	r2, [r8]
 800a9d8:	605a      	strne	r2, [r3, #4]
 800a9da:	e7eb      	b.n	800a9b4 <_malloc_r+0xa8>
 800a9dc:	4623      	mov	r3, r4
 800a9de:	6864      	ldr	r4, [r4, #4]
 800a9e0:	e7ae      	b.n	800a940 <_malloc_r+0x34>
 800a9e2:	463c      	mov	r4, r7
 800a9e4:	687f      	ldr	r7, [r7, #4]
 800a9e6:	e7b6      	b.n	800a956 <_malloc_r+0x4a>
 800a9e8:	461a      	mov	r2, r3
 800a9ea:	685b      	ldr	r3, [r3, #4]
 800a9ec:	42a3      	cmp	r3, r4
 800a9ee:	d1fb      	bne.n	800a9e8 <_malloc_r+0xdc>
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	6053      	str	r3, [r2, #4]
 800a9f4:	e7de      	b.n	800a9b4 <_malloc_r+0xa8>
 800a9f6:	230c      	movs	r3, #12
 800a9f8:	6033      	str	r3, [r6, #0]
 800a9fa:	4630      	mov	r0, r6
 800a9fc:	f000 f80c 	bl	800aa18 <__malloc_unlock>
 800aa00:	e794      	b.n	800a92c <_malloc_r+0x20>
 800aa02:	6005      	str	r5, [r0, #0]
 800aa04:	e7d6      	b.n	800a9b4 <_malloc_r+0xa8>
 800aa06:	bf00      	nop
 800aa08:	20000aa8 	.word	0x20000aa8

0800aa0c <__malloc_lock>:
 800aa0c:	4801      	ldr	r0, [pc, #4]	@ (800aa14 <__malloc_lock+0x8>)
 800aa0e:	f000 bf18 	b.w	800b842 <__retarget_lock_acquire_recursive>
 800aa12:	bf00      	nop
 800aa14:	20000bec 	.word	0x20000bec

0800aa18 <__malloc_unlock>:
 800aa18:	4801      	ldr	r0, [pc, #4]	@ (800aa20 <__malloc_unlock+0x8>)
 800aa1a:	f000 bf13 	b.w	800b844 <__retarget_lock_release_recursive>
 800aa1e:	bf00      	nop
 800aa20:	20000bec 	.word	0x20000bec

0800aa24 <__cvt>:
 800aa24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aa28:	ec57 6b10 	vmov	r6, r7, d0
 800aa2c:	2f00      	cmp	r7, #0
 800aa2e:	460c      	mov	r4, r1
 800aa30:	4619      	mov	r1, r3
 800aa32:	463b      	mov	r3, r7
 800aa34:	bfbb      	ittet	lt
 800aa36:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800aa3a:	461f      	movlt	r7, r3
 800aa3c:	2300      	movge	r3, #0
 800aa3e:	232d      	movlt	r3, #45	@ 0x2d
 800aa40:	700b      	strb	r3, [r1, #0]
 800aa42:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800aa44:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800aa48:	4691      	mov	r9, r2
 800aa4a:	f023 0820 	bic.w	r8, r3, #32
 800aa4e:	bfbc      	itt	lt
 800aa50:	4632      	movlt	r2, r6
 800aa52:	4616      	movlt	r6, r2
 800aa54:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800aa58:	d005      	beq.n	800aa66 <__cvt+0x42>
 800aa5a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800aa5e:	d100      	bne.n	800aa62 <__cvt+0x3e>
 800aa60:	3401      	adds	r4, #1
 800aa62:	2102      	movs	r1, #2
 800aa64:	e000      	b.n	800aa68 <__cvt+0x44>
 800aa66:	2103      	movs	r1, #3
 800aa68:	ab03      	add	r3, sp, #12
 800aa6a:	9301      	str	r3, [sp, #4]
 800aa6c:	ab02      	add	r3, sp, #8
 800aa6e:	9300      	str	r3, [sp, #0]
 800aa70:	ec47 6b10 	vmov	d0, r6, r7
 800aa74:	4653      	mov	r3, sl
 800aa76:	4622      	mov	r2, r4
 800aa78:	f000 ff6e 	bl	800b958 <_dtoa_r>
 800aa7c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800aa80:	4605      	mov	r5, r0
 800aa82:	d119      	bne.n	800aab8 <__cvt+0x94>
 800aa84:	f019 0f01 	tst.w	r9, #1
 800aa88:	d00e      	beq.n	800aaa8 <__cvt+0x84>
 800aa8a:	eb00 0904 	add.w	r9, r0, r4
 800aa8e:	2200      	movs	r2, #0
 800aa90:	2300      	movs	r3, #0
 800aa92:	4630      	mov	r0, r6
 800aa94:	4639      	mov	r1, r7
 800aa96:	f7f6 f817 	bl	8000ac8 <__aeabi_dcmpeq>
 800aa9a:	b108      	cbz	r0, 800aaa0 <__cvt+0x7c>
 800aa9c:	f8cd 900c 	str.w	r9, [sp, #12]
 800aaa0:	2230      	movs	r2, #48	@ 0x30
 800aaa2:	9b03      	ldr	r3, [sp, #12]
 800aaa4:	454b      	cmp	r3, r9
 800aaa6:	d31e      	bcc.n	800aae6 <__cvt+0xc2>
 800aaa8:	9b03      	ldr	r3, [sp, #12]
 800aaaa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aaac:	1b5b      	subs	r3, r3, r5
 800aaae:	4628      	mov	r0, r5
 800aab0:	6013      	str	r3, [r2, #0]
 800aab2:	b004      	add	sp, #16
 800aab4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aab8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800aabc:	eb00 0904 	add.w	r9, r0, r4
 800aac0:	d1e5      	bne.n	800aa8e <__cvt+0x6a>
 800aac2:	7803      	ldrb	r3, [r0, #0]
 800aac4:	2b30      	cmp	r3, #48	@ 0x30
 800aac6:	d10a      	bne.n	800aade <__cvt+0xba>
 800aac8:	2200      	movs	r2, #0
 800aaca:	2300      	movs	r3, #0
 800aacc:	4630      	mov	r0, r6
 800aace:	4639      	mov	r1, r7
 800aad0:	f7f5 fffa 	bl	8000ac8 <__aeabi_dcmpeq>
 800aad4:	b918      	cbnz	r0, 800aade <__cvt+0xba>
 800aad6:	f1c4 0401 	rsb	r4, r4, #1
 800aada:	f8ca 4000 	str.w	r4, [sl]
 800aade:	f8da 3000 	ldr.w	r3, [sl]
 800aae2:	4499      	add	r9, r3
 800aae4:	e7d3      	b.n	800aa8e <__cvt+0x6a>
 800aae6:	1c59      	adds	r1, r3, #1
 800aae8:	9103      	str	r1, [sp, #12]
 800aaea:	701a      	strb	r2, [r3, #0]
 800aaec:	e7d9      	b.n	800aaa2 <__cvt+0x7e>

0800aaee <__exponent>:
 800aaee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aaf0:	2900      	cmp	r1, #0
 800aaf2:	bfba      	itte	lt
 800aaf4:	4249      	neglt	r1, r1
 800aaf6:	232d      	movlt	r3, #45	@ 0x2d
 800aaf8:	232b      	movge	r3, #43	@ 0x2b
 800aafa:	2909      	cmp	r1, #9
 800aafc:	7002      	strb	r2, [r0, #0]
 800aafe:	7043      	strb	r3, [r0, #1]
 800ab00:	dd29      	ble.n	800ab56 <__exponent+0x68>
 800ab02:	f10d 0307 	add.w	r3, sp, #7
 800ab06:	461d      	mov	r5, r3
 800ab08:	270a      	movs	r7, #10
 800ab0a:	461a      	mov	r2, r3
 800ab0c:	fbb1 f6f7 	udiv	r6, r1, r7
 800ab10:	fb07 1416 	mls	r4, r7, r6, r1
 800ab14:	3430      	adds	r4, #48	@ 0x30
 800ab16:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ab1a:	460c      	mov	r4, r1
 800ab1c:	2c63      	cmp	r4, #99	@ 0x63
 800ab1e:	f103 33ff 	add.w	r3, r3, #4294967295
 800ab22:	4631      	mov	r1, r6
 800ab24:	dcf1      	bgt.n	800ab0a <__exponent+0x1c>
 800ab26:	3130      	adds	r1, #48	@ 0x30
 800ab28:	1e94      	subs	r4, r2, #2
 800ab2a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ab2e:	1c41      	adds	r1, r0, #1
 800ab30:	4623      	mov	r3, r4
 800ab32:	42ab      	cmp	r3, r5
 800ab34:	d30a      	bcc.n	800ab4c <__exponent+0x5e>
 800ab36:	f10d 0309 	add.w	r3, sp, #9
 800ab3a:	1a9b      	subs	r3, r3, r2
 800ab3c:	42ac      	cmp	r4, r5
 800ab3e:	bf88      	it	hi
 800ab40:	2300      	movhi	r3, #0
 800ab42:	3302      	adds	r3, #2
 800ab44:	4403      	add	r3, r0
 800ab46:	1a18      	subs	r0, r3, r0
 800ab48:	b003      	add	sp, #12
 800ab4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab4c:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ab50:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ab54:	e7ed      	b.n	800ab32 <__exponent+0x44>
 800ab56:	2330      	movs	r3, #48	@ 0x30
 800ab58:	3130      	adds	r1, #48	@ 0x30
 800ab5a:	7083      	strb	r3, [r0, #2]
 800ab5c:	70c1      	strb	r1, [r0, #3]
 800ab5e:	1d03      	adds	r3, r0, #4
 800ab60:	e7f1      	b.n	800ab46 <__exponent+0x58>
	...

0800ab64 <_printf_float>:
 800ab64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab68:	b08d      	sub	sp, #52	@ 0x34
 800ab6a:	460c      	mov	r4, r1
 800ab6c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800ab70:	4616      	mov	r6, r2
 800ab72:	461f      	mov	r7, r3
 800ab74:	4605      	mov	r5, r0
 800ab76:	f000 fddf 	bl	800b738 <_localeconv_r>
 800ab7a:	6803      	ldr	r3, [r0, #0]
 800ab7c:	9304      	str	r3, [sp, #16]
 800ab7e:	4618      	mov	r0, r3
 800ab80:	f7f5 fb76 	bl	8000270 <strlen>
 800ab84:	2300      	movs	r3, #0
 800ab86:	930a      	str	r3, [sp, #40]	@ 0x28
 800ab88:	f8d8 3000 	ldr.w	r3, [r8]
 800ab8c:	9005      	str	r0, [sp, #20]
 800ab8e:	3307      	adds	r3, #7
 800ab90:	f023 0307 	bic.w	r3, r3, #7
 800ab94:	f103 0208 	add.w	r2, r3, #8
 800ab98:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ab9c:	f8d4 b000 	ldr.w	fp, [r4]
 800aba0:	f8c8 2000 	str.w	r2, [r8]
 800aba4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800aba8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800abac:	9307      	str	r3, [sp, #28]
 800abae:	f8cd 8018 	str.w	r8, [sp, #24]
 800abb2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800abb6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800abba:	4b9c      	ldr	r3, [pc, #624]	@ (800ae2c <_printf_float+0x2c8>)
 800abbc:	f04f 32ff 	mov.w	r2, #4294967295
 800abc0:	f7f5 ffb4 	bl	8000b2c <__aeabi_dcmpun>
 800abc4:	bb70      	cbnz	r0, 800ac24 <_printf_float+0xc0>
 800abc6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800abca:	4b98      	ldr	r3, [pc, #608]	@ (800ae2c <_printf_float+0x2c8>)
 800abcc:	f04f 32ff 	mov.w	r2, #4294967295
 800abd0:	f7f5 ff8e 	bl	8000af0 <__aeabi_dcmple>
 800abd4:	bb30      	cbnz	r0, 800ac24 <_printf_float+0xc0>
 800abd6:	2200      	movs	r2, #0
 800abd8:	2300      	movs	r3, #0
 800abda:	4640      	mov	r0, r8
 800abdc:	4649      	mov	r1, r9
 800abde:	f7f5 ff7d 	bl	8000adc <__aeabi_dcmplt>
 800abe2:	b110      	cbz	r0, 800abea <_printf_float+0x86>
 800abe4:	232d      	movs	r3, #45	@ 0x2d
 800abe6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800abea:	4a91      	ldr	r2, [pc, #580]	@ (800ae30 <_printf_float+0x2cc>)
 800abec:	4b91      	ldr	r3, [pc, #580]	@ (800ae34 <_printf_float+0x2d0>)
 800abee:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800abf2:	bf94      	ite	ls
 800abf4:	4690      	movls	r8, r2
 800abf6:	4698      	movhi	r8, r3
 800abf8:	2303      	movs	r3, #3
 800abfa:	6123      	str	r3, [r4, #16]
 800abfc:	f02b 0304 	bic.w	r3, fp, #4
 800ac00:	6023      	str	r3, [r4, #0]
 800ac02:	f04f 0900 	mov.w	r9, #0
 800ac06:	9700      	str	r7, [sp, #0]
 800ac08:	4633      	mov	r3, r6
 800ac0a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800ac0c:	4621      	mov	r1, r4
 800ac0e:	4628      	mov	r0, r5
 800ac10:	f000 f9d2 	bl	800afb8 <_printf_common>
 800ac14:	3001      	adds	r0, #1
 800ac16:	f040 808d 	bne.w	800ad34 <_printf_float+0x1d0>
 800ac1a:	f04f 30ff 	mov.w	r0, #4294967295
 800ac1e:	b00d      	add	sp, #52	@ 0x34
 800ac20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac24:	4642      	mov	r2, r8
 800ac26:	464b      	mov	r3, r9
 800ac28:	4640      	mov	r0, r8
 800ac2a:	4649      	mov	r1, r9
 800ac2c:	f7f5 ff7e 	bl	8000b2c <__aeabi_dcmpun>
 800ac30:	b140      	cbz	r0, 800ac44 <_printf_float+0xe0>
 800ac32:	464b      	mov	r3, r9
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	bfbc      	itt	lt
 800ac38:	232d      	movlt	r3, #45	@ 0x2d
 800ac3a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800ac3e:	4a7e      	ldr	r2, [pc, #504]	@ (800ae38 <_printf_float+0x2d4>)
 800ac40:	4b7e      	ldr	r3, [pc, #504]	@ (800ae3c <_printf_float+0x2d8>)
 800ac42:	e7d4      	b.n	800abee <_printf_float+0x8a>
 800ac44:	6863      	ldr	r3, [r4, #4]
 800ac46:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800ac4a:	9206      	str	r2, [sp, #24]
 800ac4c:	1c5a      	adds	r2, r3, #1
 800ac4e:	d13b      	bne.n	800acc8 <_printf_float+0x164>
 800ac50:	2306      	movs	r3, #6
 800ac52:	6063      	str	r3, [r4, #4]
 800ac54:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800ac58:	2300      	movs	r3, #0
 800ac5a:	6022      	str	r2, [r4, #0]
 800ac5c:	9303      	str	r3, [sp, #12]
 800ac5e:	ab0a      	add	r3, sp, #40	@ 0x28
 800ac60:	e9cd a301 	strd	sl, r3, [sp, #4]
 800ac64:	ab09      	add	r3, sp, #36	@ 0x24
 800ac66:	9300      	str	r3, [sp, #0]
 800ac68:	6861      	ldr	r1, [r4, #4]
 800ac6a:	ec49 8b10 	vmov	d0, r8, r9
 800ac6e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800ac72:	4628      	mov	r0, r5
 800ac74:	f7ff fed6 	bl	800aa24 <__cvt>
 800ac78:	9b06      	ldr	r3, [sp, #24]
 800ac7a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ac7c:	2b47      	cmp	r3, #71	@ 0x47
 800ac7e:	4680      	mov	r8, r0
 800ac80:	d129      	bne.n	800acd6 <_printf_float+0x172>
 800ac82:	1cc8      	adds	r0, r1, #3
 800ac84:	db02      	blt.n	800ac8c <_printf_float+0x128>
 800ac86:	6863      	ldr	r3, [r4, #4]
 800ac88:	4299      	cmp	r1, r3
 800ac8a:	dd41      	ble.n	800ad10 <_printf_float+0x1ac>
 800ac8c:	f1aa 0a02 	sub.w	sl, sl, #2
 800ac90:	fa5f fa8a 	uxtb.w	sl, sl
 800ac94:	3901      	subs	r1, #1
 800ac96:	4652      	mov	r2, sl
 800ac98:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800ac9c:	9109      	str	r1, [sp, #36]	@ 0x24
 800ac9e:	f7ff ff26 	bl	800aaee <__exponent>
 800aca2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800aca4:	1813      	adds	r3, r2, r0
 800aca6:	2a01      	cmp	r2, #1
 800aca8:	4681      	mov	r9, r0
 800acaa:	6123      	str	r3, [r4, #16]
 800acac:	dc02      	bgt.n	800acb4 <_printf_float+0x150>
 800acae:	6822      	ldr	r2, [r4, #0]
 800acb0:	07d2      	lsls	r2, r2, #31
 800acb2:	d501      	bpl.n	800acb8 <_printf_float+0x154>
 800acb4:	3301      	adds	r3, #1
 800acb6:	6123      	str	r3, [r4, #16]
 800acb8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d0a2      	beq.n	800ac06 <_printf_float+0xa2>
 800acc0:	232d      	movs	r3, #45	@ 0x2d
 800acc2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800acc6:	e79e      	b.n	800ac06 <_printf_float+0xa2>
 800acc8:	9a06      	ldr	r2, [sp, #24]
 800acca:	2a47      	cmp	r2, #71	@ 0x47
 800accc:	d1c2      	bne.n	800ac54 <_printf_float+0xf0>
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d1c0      	bne.n	800ac54 <_printf_float+0xf0>
 800acd2:	2301      	movs	r3, #1
 800acd4:	e7bd      	b.n	800ac52 <_printf_float+0xee>
 800acd6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800acda:	d9db      	bls.n	800ac94 <_printf_float+0x130>
 800acdc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800ace0:	d118      	bne.n	800ad14 <_printf_float+0x1b0>
 800ace2:	2900      	cmp	r1, #0
 800ace4:	6863      	ldr	r3, [r4, #4]
 800ace6:	dd0b      	ble.n	800ad00 <_printf_float+0x19c>
 800ace8:	6121      	str	r1, [r4, #16]
 800acea:	b913      	cbnz	r3, 800acf2 <_printf_float+0x18e>
 800acec:	6822      	ldr	r2, [r4, #0]
 800acee:	07d0      	lsls	r0, r2, #31
 800acf0:	d502      	bpl.n	800acf8 <_printf_float+0x194>
 800acf2:	3301      	adds	r3, #1
 800acf4:	440b      	add	r3, r1
 800acf6:	6123      	str	r3, [r4, #16]
 800acf8:	65a1      	str	r1, [r4, #88]	@ 0x58
 800acfa:	f04f 0900 	mov.w	r9, #0
 800acfe:	e7db      	b.n	800acb8 <_printf_float+0x154>
 800ad00:	b913      	cbnz	r3, 800ad08 <_printf_float+0x1a4>
 800ad02:	6822      	ldr	r2, [r4, #0]
 800ad04:	07d2      	lsls	r2, r2, #31
 800ad06:	d501      	bpl.n	800ad0c <_printf_float+0x1a8>
 800ad08:	3302      	adds	r3, #2
 800ad0a:	e7f4      	b.n	800acf6 <_printf_float+0x192>
 800ad0c:	2301      	movs	r3, #1
 800ad0e:	e7f2      	b.n	800acf6 <_printf_float+0x192>
 800ad10:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800ad14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ad16:	4299      	cmp	r1, r3
 800ad18:	db05      	blt.n	800ad26 <_printf_float+0x1c2>
 800ad1a:	6823      	ldr	r3, [r4, #0]
 800ad1c:	6121      	str	r1, [r4, #16]
 800ad1e:	07d8      	lsls	r0, r3, #31
 800ad20:	d5ea      	bpl.n	800acf8 <_printf_float+0x194>
 800ad22:	1c4b      	adds	r3, r1, #1
 800ad24:	e7e7      	b.n	800acf6 <_printf_float+0x192>
 800ad26:	2900      	cmp	r1, #0
 800ad28:	bfd4      	ite	le
 800ad2a:	f1c1 0202 	rsble	r2, r1, #2
 800ad2e:	2201      	movgt	r2, #1
 800ad30:	4413      	add	r3, r2
 800ad32:	e7e0      	b.n	800acf6 <_printf_float+0x192>
 800ad34:	6823      	ldr	r3, [r4, #0]
 800ad36:	055a      	lsls	r2, r3, #21
 800ad38:	d407      	bmi.n	800ad4a <_printf_float+0x1e6>
 800ad3a:	6923      	ldr	r3, [r4, #16]
 800ad3c:	4642      	mov	r2, r8
 800ad3e:	4631      	mov	r1, r6
 800ad40:	4628      	mov	r0, r5
 800ad42:	47b8      	blx	r7
 800ad44:	3001      	adds	r0, #1
 800ad46:	d12b      	bne.n	800ada0 <_printf_float+0x23c>
 800ad48:	e767      	b.n	800ac1a <_printf_float+0xb6>
 800ad4a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ad4e:	f240 80dd 	bls.w	800af0c <_printf_float+0x3a8>
 800ad52:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ad56:	2200      	movs	r2, #0
 800ad58:	2300      	movs	r3, #0
 800ad5a:	f7f5 feb5 	bl	8000ac8 <__aeabi_dcmpeq>
 800ad5e:	2800      	cmp	r0, #0
 800ad60:	d033      	beq.n	800adca <_printf_float+0x266>
 800ad62:	4a37      	ldr	r2, [pc, #220]	@ (800ae40 <_printf_float+0x2dc>)
 800ad64:	2301      	movs	r3, #1
 800ad66:	4631      	mov	r1, r6
 800ad68:	4628      	mov	r0, r5
 800ad6a:	47b8      	blx	r7
 800ad6c:	3001      	adds	r0, #1
 800ad6e:	f43f af54 	beq.w	800ac1a <_printf_float+0xb6>
 800ad72:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800ad76:	4543      	cmp	r3, r8
 800ad78:	db02      	blt.n	800ad80 <_printf_float+0x21c>
 800ad7a:	6823      	ldr	r3, [r4, #0]
 800ad7c:	07d8      	lsls	r0, r3, #31
 800ad7e:	d50f      	bpl.n	800ada0 <_printf_float+0x23c>
 800ad80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ad84:	4631      	mov	r1, r6
 800ad86:	4628      	mov	r0, r5
 800ad88:	47b8      	blx	r7
 800ad8a:	3001      	adds	r0, #1
 800ad8c:	f43f af45 	beq.w	800ac1a <_printf_float+0xb6>
 800ad90:	f04f 0900 	mov.w	r9, #0
 800ad94:	f108 38ff 	add.w	r8, r8, #4294967295
 800ad98:	f104 0a1a 	add.w	sl, r4, #26
 800ad9c:	45c8      	cmp	r8, r9
 800ad9e:	dc09      	bgt.n	800adb4 <_printf_float+0x250>
 800ada0:	6823      	ldr	r3, [r4, #0]
 800ada2:	079b      	lsls	r3, r3, #30
 800ada4:	f100 8103 	bmi.w	800afae <_printf_float+0x44a>
 800ada8:	68e0      	ldr	r0, [r4, #12]
 800adaa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800adac:	4298      	cmp	r0, r3
 800adae:	bfb8      	it	lt
 800adb0:	4618      	movlt	r0, r3
 800adb2:	e734      	b.n	800ac1e <_printf_float+0xba>
 800adb4:	2301      	movs	r3, #1
 800adb6:	4652      	mov	r2, sl
 800adb8:	4631      	mov	r1, r6
 800adba:	4628      	mov	r0, r5
 800adbc:	47b8      	blx	r7
 800adbe:	3001      	adds	r0, #1
 800adc0:	f43f af2b 	beq.w	800ac1a <_printf_float+0xb6>
 800adc4:	f109 0901 	add.w	r9, r9, #1
 800adc8:	e7e8      	b.n	800ad9c <_printf_float+0x238>
 800adca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800adcc:	2b00      	cmp	r3, #0
 800adce:	dc39      	bgt.n	800ae44 <_printf_float+0x2e0>
 800add0:	4a1b      	ldr	r2, [pc, #108]	@ (800ae40 <_printf_float+0x2dc>)
 800add2:	2301      	movs	r3, #1
 800add4:	4631      	mov	r1, r6
 800add6:	4628      	mov	r0, r5
 800add8:	47b8      	blx	r7
 800adda:	3001      	adds	r0, #1
 800addc:	f43f af1d 	beq.w	800ac1a <_printf_float+0xb6>
 800ade0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800ade4:	ea59 0303 	orrs.w	r3, r9, r3
 800ade8:	d102      	bne.n	800adf0 <_printf_float+0x28c>
 800adea:	6823      	ldr	r3, [r4, #0]
 800adec:	07d9      	lsls	r1, r3, #31
 800adee:	d5d7      	bpl.n	800ada0 <_printf_float+0x23c>
 800adf0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800adf4:	4631      	mov	r1, r6
 800adf6:	4628      	mov	r0, r5
 800adf8:	47b8      	blx	r7
 800adfa:	3001      	adds	r0, #1
 800adfc:	f43f af0d 	beq.w	800ac1a <_printf_float+0xb6>
 800ae00:	f04f 0a00 	mov.w	sl, #0
 800ae04:	f104 0b1a 	add.w	fp, r4, #26
 800ae08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae0a:	425b      	negs	r3, r3
 800ae0c:	4553      	cmp	r3, sl
 800ae0e:	dc01      	bgt.n	800ae14 <_printf_float+0x2b0>
 800ae10:	464b      	mov	r3, r9
 800ae12:	e793      	b.n	800ad3c <_printf_float+0x1d8>
 800ae14:	2301      	movs	r3, #1
 800ae16:	465a      	mov	r2, fp
 800ae18:	4631      	mov	r1, r6
 800ae1a:	4628      	mov	r0, r5
 800ae1c:	47b8      	blx	r7
 800ae1e:	3001      	adds	r0, #1
 800ae20:	f43f aefb 	beq.w	800ac1a <_printf_float+0xb6>
 800ae24:	f10a 0a01 	add.w	sl, sl, #1
 800ae28:	e7ee      	b.n	800ae08 <_printf_float+0x2a4>
 800ae2a:	bf00      	nop
 800ae2c:	7fefffff 	.word	0x7fefffff
 800ae30:	0800d6c8 	.word	0x0800d6c8
 800ae34:	0800d6cc 	.word	0x0800d6cc
 800ae38:	0800d6d0 	.word	0x0800d6d0
 800ae3c:	0800d6d4 	.word	0x0800d6d4
 800ae40:	0800d6d8 	.word	0x0800d6d8
 800ae44:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ae46:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ae4a:	4553      	cmp	r3, sl
 800ae4c:	bfa8      	it	ge
 800ae4e:	4653      	movge	r3, sl
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	4699      	mov	r9, r3
 800ae54:	dc36      	bgt.n	800aec4 <_printf_float+0x360>
 800ae56:	f04f 0b00 	mov.w	fp, #0
 800ae5a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ae5e:	f104 021a 	add.w	r2, r4, #26
 800ae62:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ae64:	9306      	str	r3, [sp, #24]
 800ae66:	eba3 0309 	sub.w	r3, r3, r9
 800ae6a:	455b      	cmp	r3, fp
 800ae6c:	dc31      	bgt.n	800aed2 <_printf_float+0x36e>
 800ae6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae70:	459a      	cmp	sl, r3
 800ae72:	dc3a      	bgt.n	800aeea <_printf_float+0x386>
 800ae74:	6823      	ldr	r3, [r4, #0]
 800ae76:	07da      	lsls	r2, r3, #31
 800ae78:	d437      	bmi.n	800aeea <_printf_float+0x386>
 800ae7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae7c:	ebaa 0903 	sub.w	r9, sl, r3
 800ae80:	9b06      	ldr	r3, [sp, #24]
 800ae82:	ebaa 0303 	sub.w	r3, sl, r3
 800ae86:	4599      	cmp	r9, r3
 800ae88:	bfa8      	it	ge
 800ae8a:	4699      	movge	r9, r3
 800ae8c:	f1b9 0f00 	cmp.w	r9, #0
 800ae90:	dc33      	bgt.n	800aefa <_printf_float+0x396>
 800ae92:	f04f 0800 	mov.w	r8, #0
 800ae96:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ae9a:	f104 0b1a 	add.w	fp, r4, #26
 800ae9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aea0:	ebaa 0303 	sub.w	r3, sl, r3
 800aea4:	eba3 0309 	sub.w	r3, r3, r9
 800aea8:	4543      	cmp	r3, r8
 800aeaa:	f77f af79 	ble.w	800ada0 <_printf_float+0x23c>
 800aeae:	2301      	movs	r3, #1
 800aeb0:	465a      	mov	r2, fp
 800aeb2:	4631      	mov	r1, r6
 800aeb4:	4628      	mov	r0, r5
 800aeb6:	47b8      	blx	r7
 800aeb8:	3001      	adds	r0, #1
 800aeba:	f43f aeae 	beq.w	800ac1a <_printf_float+0xb6>
 800aebe:	f108 0801 	add.w	r8, r8, #1
 800aec2:	e7ec      	b.n	800ae9e <_printf_float+0x33a>
 800aec4:	4642      	mov	r2, r8
 800aec6:	4631      	mov	r1, r6
 800aec8:	4628      	mov	r0, r5
 800aeca:	47b8      	blx	r7
 800aecc:	3001      	adds	r0, #1
 800aece:	d1c2      	bne.n	800ae56 <_printf_float+0x2f2>
 800aed0:	e6a3      	b.n	800ac1a <_printf_float+0xb6>
 800aed2:	2301      	movs	r3, #1
 800aed4:	4631      	mov	r1, r6
 800aed6:	4628      	mov	r0, r5
 800aed8:	9206      	str	r2, [sp, #24]
 800aeda:	47b8      	blx	r7
 800aedc:	3001      	adds	r0, #1
 800aede:	f43f ae9c 	beq.w	800ac1a <_printf_float+0xb6>
 800aee2:	9a06      	ldr	r2, [sp, #24]
 800aee4:	f10b 0b01 	add.w	fp, fp, #1
 800aee8:	e7bb      	b.n	800ae62 <_printf_float+0x2fe>
 800aeea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aeee:	4631      	mov	r1, r6
 800aef0:	4628      	mov	r0, r5
 800aef2:	47b8      	blx	r7
 800aef4:	3001      	adds	r0, #1
 800aef6:	d1c0      	bne.n	800ae7a <_printf_float+0x316>
 800aef8:	e68f      	b.n	800ac1a <_printf_float+0xb6>
 800aefa:	9a06      	ldr	r2, [sp, #24]
 800aefc:	464b      	mov	r3, r9
 800aefe:	4442      	add	r2, r8
 800af00:	4631      	mov	r1, r6
 800af02:	4628      	mov	r0, r5
 800af04:	47b8      	blx	r7
 800af06:	3001      	adds	r0, #1
 800af08:	d1c3      	bne.n	800ae92 <_printf_float+0x32e>
 800af0a:	e686      	b.n	800ac1a <_printf_float+0xb6>
 800af0c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800af10:	f1ba 0f01 	cmp.w	sl, #1
 800af14:	dc01      	bgt.n	800af1a <_printf_float+0x3b6>
 800af16:	07db      	lsls	r3, r3, #31
 800af18:	d536      	bpl.n	800af88 <_printf_float+0x424>
 800af1a:	2301      	movs	r3, #1
 800af1c:	4642      	mov	r2, r8
 800af1e:	4631      	mov	r1, r6
 800af20:	4628      	mov	r0, r5
 800af22:	47b8      	blx	r7
 800af24:	3001      	adds	r0, #1
 800af26:	f43f ae78 	beq.w	800ac1a <_printf_float+0xb6>
 800af2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800af2e:	4631      	mov	r1, r6
 800af30:	4628      	mov	r0, r5
 800af32:	47b8      	blx	r7
 800af34:	3001      	adds	r0, #1
 800af36:	f43f ae70 	beq.w	800ac1a <_printf_float+0xb6>
 800af3a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800af3e:	2200      	movs	r2, #0
 800af40:	2300      	movs	r3, #0
 800af42:	f10a 3aff 	add.w	sl, sl, #4294967295
 800af46:	f7f5 fdbf 	bl	8000ac8 <__aeabi_dcmpeq>
 800af4a:	b9c0      	cbnz	r0, 800af7e <_printf_float+0x41a>
 800af4c:	4653      	mov	r3, sl
 800af4e:	f108 0201 	add.w	r2, r8, #1
 800af52:	4631      	mov	r1, r6
 800af54:	4628      	mov	r0, r5
 800af56:	47b8      	blx	r7
 800af58:	3001      	adds	r0, #1
 800af5a:	d10c      	bne.n	800af76 <_printf_float+0x412>
 800af5c:	e65d      	b.n	800ac1a <_printf_float+0xb6>
 800af5e:	2301      	movs	r3, #1
 800af60:	465a      	mov	r2, fp
 800af62:	4631      	mov	r1, r6
 800af64:	4628      	mov	r0, r5
 800af66:	47b8      	blx	r7
 800af68:	3001      	adds	r0, #1
 800af6a:	f43f ae56 	beq.w	800ac1a <_printf_float+0xb6>
 800af6e:	f108 0801 	add.w	r8, r8, #1
 800af72:	45d0      	cmp	r8, sl
 800af74:	dbf3      	blt.n	800af5e <_printf_float+0x3fa>
 800af76:	464b      	mov	r3, r9
 800af78:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800af7c:	e6df      	b.n	800ad3e <_printf_float+0x1da>
 800af7e:	f04f 0800 	mov.w	r8, #0
 800af82:	f104 0b1a 	add.w	fp, r4, #26
 800af86:	e7f4      	b.n	800af72 <_printf_float+0x40e>
 800af88:	2301      	movs	r3, #1
 800af8a:	4642      	mov	r2, r8
 800af8c:	e7e1      	b.n	800af52 <_printf_float+0x3ee>
 800af8e:	2301      	movs	r3, #1
 800af90:	464a      	mov	r2, r9
 800af92:	4631      	mov	r1, r6
 800af94:	4628      	mov	r0, r5
 800af96:	47b8      	blx	r7
 800af98:	3001      	adds	r0, #1
 800af9a:	f43f ae3e 	beq.w	800ac1a <_printf_float+0xb6>
 800af9e:	f108 0801 	add.w	r8, r8, #1
 800afa2:	68e3      	ldr	r3, [r4, #12]
 800afa4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800afa6:	1a5b      	subs	r3, r3, r1
 800afa8:	4543      	cmp	r3, r8
 800afaa:	dcf0      	bgt.n	800af8e <_printf_float+0x42a>
 800afac:	e6fc      	b.n	800ada8 <_printf_float+0x244>
 800afae:	f04f 0800 	mov.w	r8, #0
 800afb2:	f104 0919 	add.w	r9, r4, #25
 800afb6:	e7f4      	b.n	800afa2 <_printf_float+0x43e>

0800afb8 <_printf_common>:
 800afb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800afbc:	4616      	mov	r6, r2
 800afbe:	4698      	mov	r8, r3
 800afc0:	688a      	ldr	r2, [r1, #8]
 800afc2:	690b      	ldr	r3, [r1, #16]
 800afc4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800afc8:	4293      	cmp	r3, r2
 800afca:	bfb8      	it	lt
 800afcc:	4613      	movlt	r3, r2
 800afce:	6033      	str	r3, [r6, #0]
 800afd0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800afd4:	4607      	mov	r7, r0
 800afd6:	460c      	mov	r4, r1
 800afd8:	b10a      	cbz	r2, 800afde <_printf_common+0x26>
 800afda:	3301      	adds	r3, #1
 800afdc:	6033      	str	r3, [r6, #0]
 800afde:	6823      	ldr	r3, [r4, #0]
 800afe0:	0699      	lsls	r1, r3, #26
 800afe2:	bf42      	ittt	mi
 800afe4:	6833      	ldrmi	r3, [r6, #0]
 800afe6:	3302      	addmi	r3, #2
 800afe8:	6033      	strmi	r3, [r6, #0]
 800afea:	6825      	ldr	r5, [r4, #0]
 800afec:	f015 0506 	ands.w	r5, r5, #6
 800aff0:	d106      	bne.n	800b000 <_printf_common+0x48>
 800aff2:	f104 0a19 	add.w	sl, r4, #25
 800aff6:	68e3      	ldr	r3, [r4, #12]
 800aff8:	6832      	ldr	r2, [r6, #0]
 800affa:	1a9b      	subs	r3, r3, r2
 800affc:	42ab      	cmp	r3, r5
 800affe:	dc26      	bgt.n	800b04e <_printf_common+0x96>
 800b000:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b004:	6822      	ldr	r2, [r4, #0]
 800b006:	3b00      	subs	r3, #0
 800b008:	bf18      	it	ne
 800b00a:	2301      	movne	r3, #1
 800b00c:	0692      	lsls	r2, r2, #26
 800b00e:	d42b      	bmi.n	800b068 <_printf_common+0xb0>
 800b010:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b014:	4641      	mov	r1, r8
 800b016:	4638      	mov	r0, r7
 800b018:	47c8      	blx	r9
 800b01a:	3001      	adds	r0, #1
 800b01c:	d01e      	beq.n	800b05c <_printf_common+0xa4>
 800b01e:	6823      	ldr	r3, [r4, #0]
 800b020:	6922      	ldr	r2, [r4, #16]
 800b022:	f003 0306 	and.w	r3, r3, #6
 800b026:	2b04      	cmp	r3, #4
 800b028:	bf02      	ittt	eq
 800b02a:	68e5      	ldreq	r5, [r4, #12]
 800b02c:	6833      	ldreq	r3, [r6, #0]
 800b02e:	1aed      	subeq	r5, r5, r3
 800b030:	68a3      	ldr	r3, [r4, #8]
 800b032:	bf0c      	ite	eq
 800b034:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b038:	2500      	movne	r5, #0
 800b03a:	4293      	cmp	r3, r2
 800b03c:	bfc4      	itt	gt
 800b03e:	1a9b      	subgt	r3, r3, r2
 800b040:	18ed      	addgt	r5, r5, r3
 800b042:	2600      	movs	r6, #0
 800b044:	341a      	adds	r4, #26
 800b046:	42b5      	cmp	r5, r6
 800b048:	d11a      	bne.n	800b080 <_printf_common+0xc8>
 800b04a:	2000      	movs	r0, #0
 800b04c:	e008      	b.n	800b060 <_printf_common+0xa8>
 800b04e:	2301      	movs	r3, #1
 800b050:	4652      	mov	r2, sl
 800b052:	4641      	mov	r1, r8
 800b054:	4638      	mov	r0, r7
 800b056:	47c8      	blx	r9
 800b058:	3001      	adds	r0, #1
 800b05a:	d103      	bne.n	800b064 <_printf_common+0xac>
 800b05c:	f04f 30ff 	mov.w	r0, #4294967295
 800b060:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b064:	3501      	adds	r5, #1
 800b066:	e7c6      	b.n	800aff6 <_printf_common+0x3e>
 800b068:	18e1      	adds	r1, r4, r3
 800b06a:	1c5a      	adds	r2, r3, #1
 800b06c:	2030      	movs	r0, #48	@ 0x30
 800b06e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b072:	4422      	add	r2, r4
 800b074:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b078:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b07c:	3302      	adds	r3, #2
 800b07e:	e7c7      	b.n	800b010 <_printf_common+0x58>
 800b080:	2301      	movs	r3, #1
 800b082:	4622      	mov	r2, r4
 800b084:	4641      	mov	r1, r8
 800b086:	4638      	mov	r0, r7
 800b088:	47c8      	blx	r9
 800b08a:	3001      	adds	r0, #1
 800b08c:	d0e6      	beq.n	800b05c <_printf_common+0xa4>
 800b08e:	3601      	adds	r6, #1
 800b090:	e7d9      	b.n	800b046 <_printf_common+0x8e>
	...

0800b094 <_printf_i>:
 800b094:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b098:	7e0f      	ldrb	r7, [r1, #24]
 800b09a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b09c:	2f78      	cmp	r7, #120	@ 0x78
 800b09e:	4691      	mov	r9, r2
 800b0a0:	4680      	mov	r8, r0
 800b0a2:	460c      	mov	r4, r1
 800b0a4:	469a      	mov	sl, r3
 800b0a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b0aa:	d807      	bhi.n	800b0bc <_printf_i+0x28>
 800b0ac:	2f62      	cmp	r7, #98	@ 0x62
 800b0ae:	d80a      	bhi.n	800b0c6 <_printf_i+0x32>
 800b0b0:	2f00      	cmp	r7, #0
 800b0b2:	f000 80d2 	beq.w	800b25a <_printf_i+0x1c6>
 800b0b6:	2f58      	cmp	r7, #88	@ 0x58
 800b0b8:	f000 80b9 	beq.w	800b22e <_printf_i+0x19a>
 800b0bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b0c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b0c4:	e03a      	b.n	800b13c <_printf_i+0xa8>
 800b0c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b0ca:	2b15      	cmp	r3, #21
 800b0cc:	d8f6      	bhi.n	800b0bc <_printf_i+0x28>
 800b0ce:	a101      	add	r1, pc, #4	@ (adr r1, 800b0d4 <_printf_i+0x40>)
 800b0d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b0d4:	0800b12d 	.word	0x0800b12d
 800b0d8:	0800b141 	.word	0x0800b141
 800b0dc:	0800b0bd 	.word	0x0800b0bd
 800b0e0:	0800b0bd 	.word	0x0800b0bd
 800b0e4:	0800b0bd 	.word	0x0800b0bd
 800b0e8:	0800b0bd 	.word	0x0800b0bd
 800b0ec:	0800b141 	.word	0x0800b141
 800b0f0:	0800b0bd 	.word	0x0800b0bd
 800b0f4:	0800b0bd 	.word	0x0800b0bd
 800b0f8:	0800b0bd 	.word	0x0800b0bd
 800b0fc:	0800b0bd 	.word	0x0800b0bd
 800b100:	0800b241 	.word	0x0800b241
 800b104:	0800b16b 	.word	0x0800b16b
 800b108:	0800b1fb 	.word	0x0800b1fb
 800b10c:	0800b0bd 	.word	0x0800b0bd
 800b110:	0800b0bd 	.word	0x0800b0bd
 800b114:	0800b263 	.word	0x0800b263
 800b118:	0800b0bd 	.word	0x0800b0bd
 800b11c:	0800b16b 	.word	0x0800b16b
 800b120:	0800b0bd 	.word	0x0800b0bd
 800b124:	0800b0bd 	.word	0x0800b0bd
 800b128:	0800b203 	.word	0x0800b203
 800b12c:	6833      	ldr	r3, [r6, #0]
 800b12e:	1d1a      	adds	r2, r3, #4
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	6032      	str	r2, [r6, #0]
 800b134:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b138:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b13c:	2301      	movs	r3, #1
 800b13e:	e09d      	b.n	800b27c <_printf_i+0x1e8>
 800b140:	6833      	ldr	r3, [r6, #0]
 800b142:	6820      	ldr	r0, [r4, #0]
 800b144:	1d19      	adds	r1, r3, #4
 800b146:	6031      	str	r1, [r6, #0]
 800b148:	0606      	lsls	r6, r0, #24
 800b14a:	d501      	bpl.n	800b150 <_printf_i+0xbc>
 800b14c:	681d      	ldr	r5, [r3, #0]
 800b14e:	e003      	b.n	800b158 <_printf_i+0xc4>
 800b150:	0645      	lsls	r5, r0, #25
 800b152:	d5fb      	bpl.n	800b14c <_printf_i+0xb8>
 800b154:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b158:	2d00      	cmp	r5, #0
 800b15a:	da03      	bge.n	800b164 <_printf_i+0xd0>
 800b15c:	232d      	movs	r3, #45	@ 0x2d
 800b15e:	426d      	negs	r5, r5
 800b160:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b164:	4859      	ldr	r0, [pc, #356]	@ (800b2cc <_printf_i+0x238>)
 800b166:	230a      	movs	r3, #10
 800b168:	e011      	b.n	800b18e <_printf_i+0xfa>
 800b16a:	6821      	ldr	r1, [r4, #0]
 800b16c:	6833      	ldr	r3, [r6, #0]
 800b16e:	0608      	lsls	r0, r1, #24
 800b170:	f853 5b04 	ldr.w	r5, [r3], #4
 800b174:	d402      	bmi.n	800b17c <_printf_i+0xe8>
 800b176:	0649      	lsls	r1, r1, #25
 800b178:	bf48      	it	mi
 800b17a:	b2ad      	uxthmi	r5, r5
 800b17c:	2f6f      	cmp	r7, #111	@ 0x6f
 800b17e:	4853      	ldr	r0, [pc, #332]	@ (800b2cc <_printf_i+0x238>)
 800b180:	6033      	str	r3, [r6, #0]
 800b182:	bf14      	ite	ne
 800b184:	230a      	movne	r3, #10
 800b186:	2308      	moveq	r3, #8
 800b188:	2100      	movs	r1, #0
 800b18a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b18e:	6866      	ldr	r6, [r4, #4]
 800b190:	60a6      	str	r6, [r4, #8]
 800b192:	2e00      	cmp	r6, #0
 800b194:	bfa2      	ittt	ge
 800b196:	6821      	ldrge	r1, [r4, #0]
 800b198:	f021 0104 	bicge.w	r1, r1, #4
 800b19c:	6021      	strge	r1, [r4, #0]
 800b19e:	b90d      	cbnz	r5, 800b1a4 <_printf_i+0x110>
 800b1a0:	2e00      	cmp	r6, #0
 800b1a2:	d04b      	beq.n	800b23c <_printf_i+0x1a8>
 800b1a4:	4616      	mov	r6, r2
 800b1a6:	fbb5 f1f3 	udiv	r1, r5, r3
 800b1aa:	fb03 5711 	mls	r7, r3, r1, r5
 800b1ae:	5dc7      	ldrb	r7, [r0, r7]
 800b1b0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b1b4:	462f      	mov	r7, r5
 800b1b6:	42bb      	cmp	r3, r7
 800b1b8:	460d      	mov	r5, r1
 800b1ba:	d9f4      	bls.n	800b1a6 <_printf_i+0x112>
 800b1bc:	2b08      	cmp	r3, #8
 800b1be:	d10b      	bne.n	800b1d8 <_printf_i+0x144>
 800b1c0:	6823      	ldr	r3, [r4, #0]
 800b1c2:	07df      	lsls	r7, r3, #31
 800b1c4:	d508      	bpl.n	800b1d8 <_printf_i+0x144>
 800b1c6:	6923      	ldr	r3, [r4, #16]
 800b1c8:	6861      	ldr	r1, [r4, #4]
 800b1ca:	4299      	cmp	r1, r3
 800b1cc:	bfde      	ittt	le
 800b1ce:	2330      	movle	r3, #48	@ 0x30
 800b1d0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b1d4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b1d8:	1b92      	subs	r2, r2, r6
 800b1da:	6122      	str	r2, [r4, #16]
 800b1dc:	f8cd a000 	str.w	sl, [sp]
 800b1e0:	464b      	mov	r3, r9
 800b1e2:	aa03      	add	r2, sp, #12
 800b1e4:	4621      	mov	r1, r4
 800b1e6:	4640      	mov	r0, r8
 800b1e8:	f7ff fee6 	bl	800afb8 <_printf_common>
 800b1ec:	3001      	adds	r0, #1
 800b1ee:	d14a      	bne.n	800b286 <_printf_i+0x1f2>
 800b1f0:	f04f 30ff 	mov.w	r0, #4294967295
 800b1f4:	b004      	add	sp, #16
 800b1f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1fa:	6823      	ldr	r3, [r4, #0]
 800b1fc:	f043 0320 	orr.w	r3, r3, #32
 800b200:	6023      	str	r3, [r4, #0]
 800b202:	4833      	ldr	r0, [pc, #204]	@ (800b2d0 <_printf_i+0x23c>)
 800b204:	2778      	movs	r7, #120	@ 0x78
 800b206:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b20a:	6823      	ldr	r3, [r4, #0]
 800b20c:	6831      	ldr	r1, [r6, #0]
 800b20e:	061f      	lsls	r7, r3, #24
 800b210:	f851 5b04 	ldr.w	r5, [r1], #4
 800b214:	d402      	bmi.n	800b21c <_printf_i+0x188>
 800b216:	065f      	lsls	r7, r3, #25
 800b218:	bf48      	it	mi
 800b21a:	b2ad      	uxthmi	r5, r5
 800b21c:	6031      	str	r1, [r6, #0]
 800b21e:	07d9      	lsls	r1, r3, #31
 800b220:	bf44      	itt	mi
 800b222:	f043 0320 	orrmi.w	r3, r3, #32
 800b226:	6023      	strmi	r3, [r4, #0]
 800b228:	b11d      	cbz	r5, 800b232 <_printf_i+0x19e>
 800b22a:	2310      	movs	r3, #16
 800b22c:	e7ac      	b.n	800b188 <_printf_i+0xf4>
 800b22e:	4827      	ldr	r0, [pc, #156]	@ (800b2cc <_printf_i+0x238>)
 800b230:	e7e9      	b.n	800b206 <_printf_i+0x172>
 800b232:	6823      	ldr	r3, [r4, #0]
 800b234:	f023 0320 	bic.w	r3, r3, #32
 800b238:	6023      	str	r3, [r4, #0]
 800b23a:	e7f6      	b.n	800b22a <_printf_i+0x196>
 800b23c:	4616      	mov	r6, r2
 800b23e:	e7bd      	b.n	800b1bc <_printf_i+0x128>
 800b240:	6833      	ldr	r3, [r6, #0]
 800b242:	6825      	ldr	r5, [r4, #0]
 800b244:	6961      	ldr	r1, [r4, #20]
 800b246:	1d18      	adds	r0, r3, #4
 800b248:	6030      	str	r0, [r6, #0]
 800b24a:	062e      	lsls	r6, r5, #24
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	d501      	bpl.n	800b254 <_printf_i+0x1c0>
 800b250:	6019      	str	r1, [r3, #0]
 800b252:	e002      	b.n	800b25a <_printf_i+0x1c6>
 800b254:	0668      	lsls	r0, r5, #25
 800b256:	d5fb      	bpl.n	800b250 <_printf_i+0x1bc>
 800b258:	8019      	strh	r1, [r3, #0]
 800b25a:	2300      	movs	r3, #0
 800b25c:	6123      	str	r3, [r4, #16]
 800b25e:	4616      	mov	r6, r2
 800b260:	e7bc      	b.n	800b1dc <_printf_i+0x148>
 800b262:	6833      	ldr	r3, [r6, #0]
 800b264:	1d1a      	adds	r2, r3, #4
 800b266:	6032      	str	r2, [r6, #0]
 800b268:	681e      	ldr	r6, [r3, #0]
 800b26a:	6862      	ldr	r2, [r4, #4]
 800b26c:	2100      	movs	r1, #0
 800b26e:	4630      	mov	r0, r6
 800b270:	f7f4 ffae 	bl	80001d0 <memchr>
 800b274:	b108      	cbz	r0, 800b27a <_printf_i+0x1e6>
 800b276:	1b80      	subs	r0, r0, r6
 800b278:	6060      	str	r0, [r4, #4]
 800b27a:	6863      	ldr	r3, [r4, #4]
 800b27c:	6123      	str	r3, [r4, #16]
 800b27e:	2300      	movs	r3, #0
 800b280:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b284:	e7aa      	b.n	800b1dc <_printf_i+0x148>
 800b286:	6923      	ldr	r3, [r4, #16]
 800b288:	4632      	mov	r2, r6
 800b28a:	4649      	mov	r1, r9
 800b28c:	4640      	mov	r0, r8
 800b28e:	47d0      	blx	sl
 800b290:	3001      	adds	r0, #1
 800b292:	d0ad      	beq.n	800b1f0 <_printf_i+0x15c>
 800b294:	6823      	ldr	r3, [r4, #0]
 800b296:	079b      	lsls	r3, r3, #30
 800b298:	d413      	bmi.n	800b2c2 <_printf_i+0x22e>
 800b29a:	68e0      	ldr	r0, [r4, #12]
 800b29c:	9b03      	ldr	r3, [sp, #12]
 800b29e:	4298      	cmp	r0, r3
 800b2a0:	bfb8      	it	lt
 800b2a2:	4618      	movlt	r0, r3
 800b2a4:	e7a6      	b.n	800b1f4 <_printf_i+0x160>
 800b2a6:	2301      	movs	r3, #1
 800b2a8:	4632      	mov	r2, r6
 800b2aa:	4649      	mov	r1, r9
 800b2ac:	4640      	mov	r0, r8
 800b2ae:	47d0      	blx	sl
 800b2b0:	3001      	adds	r0, #1
 800b2b2:	d09d      	beq.n	800b1f0 <_printf_i+0x15c>
 800b2b4:	3501      	adds	r5, #1
 800b2b6:	68e3      	ldr	r3, [r4, #12]
 800b2b8:	9903      	ldr	r1, [sp, #12]
 800b2ba:	1a5b      	subs	r3, r3, r1
 800b2bc:	42ab      	cmp	r3, r5
 800b2be:	dcf2      	bgt.n	800b2a6 <_printf_i+0x212>
 800b2c0:	e7eb      	b.n	800b29a <_printf_i+0x206>
 800b2c2:	2500      	movs	r5, #0
 800b2c4:	f104 0619 	add.w	r6, r4, #25
 800b2c8:	e7f5      	b.n	800b2b6 <_printf_i+0x222>
 800b2ca:	bf00      	nop
 800b2cc:	0800d6da 	.word	0x0800d6da
 800b2d0:	0800d6eb 	.word	0x0800d6eb

0800b2d4 <std>:
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	b510      	push	{r4, lr}
 800b2d8:	4604      	mov	r4, r0
 800b2da:	e9c0 3300 	strd	r3, r3, [r0]
 800b2de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b2e2:	6083      	str	r3, [r0, #8]
 800b2e4:	8181      	strh	r1, [r0, #12]
 800b2e6:	6643      	str	r3, [r0, #100]	@ 0x64
 800b2e8:	81c2      	strh	r2, [r0, #14]
 800b2ea:	6183      	str	r3, [r0, #24]
 800b2ec:	4619      	mov	r1, r3
 800b2ee:	2208      	movs	r2, #8
 800b2f0:	305c      	adds	r0, #92	@ 0x5c
 800b2f2:	f000 fa19 	bl	800b728 <memset>
 800b2f6:	4b0d      	ldr	r3, [pc, #52]	@ (800b32c <std+0x58>)
 800b2f8:	6263      	str	r3, [r4, #36]	@ 0x24
 800b2fa:	4b0d      	ldr	r3, [pc, #52]	@ (800b330 <std+0x5c>)
 800b2fc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b2fe:	4b0d      	ldr	r3, [pc, #52]	@ (800b334 <std+0x60>)
 800b300:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b302:	4b0d      	ldr	r3, [pc, #52]	@ (800b338 <std+0x64>)
 800b304:	6323      	str	r3, [r4, #48]	@ 0x30
 800b306:	4b0d      	ldr	r3, [pc, #52]	@ (800b33c <std+0x68>)
 800b308:	6224      	str	r4, [r4, #32]
 800b30a:	429c      	cmp	r4, r3
 800b30c:	d006      	beq.n	800b31c <std+0x48>
 800b30e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b312:	4294      	cmp	r4, r2
 800b314:	d002      	beq.n	800b31c <std+0x48>
 800b316:	33d0      	adds	r3, #208	@ 0xd0
 800b318:	429c      	cmp	r4, r3
 800b31a:	d105      	bne.n	800b328 <std+0x54>
 800b31c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b320:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b324:	f000 ba8c 	b.w	800b840 <__retarget_lock_init_recursive>
 800b328:	bd10      	pop	{r4, pc}
 800b32a:	bf00      	nop
 800b32c:	0800b579 	.word	0x0800b579
 800b330:	0800b59b 	.word	0x0800b59b
 800b334:	0800b5d3 	.word	0x0800b5d3
 800b338:	0800b5f7 	.word	0x0800b5f7
 800b33c:	20000aac 	.word	0x20000aac

0800b340 <stdio_exit_handler>:
 800b340:	4a02      	ldr	r2, [pc, #8]	@ (800b34c <stdio_exit_handler+0xc>)
 800b342:	4903      	ldr	r1, [pc, #12]	@ (800b350 <stdio_exit_handler+0x10>)
 800b344:	4803      	ldr	r0, [pc, #12]	@ (800b354 <stdio_exit_handler+0x14>)
 800b346:	f000 b869 	b.w	800b41c <_fwalk_sglue>
 800b34a:	bf00      	nop
 800b34c:	2000002c 	.word	0x2000002c
 800b350:	0800d2b5 	.word	0x0800d2b5
 800b354:	2000003c 	.word	0x2000003c

0800b358 <cleanup_stdio>:
 800b358:	6841      	ldr	r1, [r0, #4]
 800b35a:	4b0c      	ldr	r3, [pc, #48]	@ (800b38c <cleanup_stdio+0x34>)
 800b35c:	4299      	cmp	r1, r3
 800b35e:	b510      	push	{r4, lr}
 800b360:	4604      	mov	r4, r0
 800b362:	d001      	beq.n	800b368 <cleanup_stdio+0x10>
 800b364:	f001 ffa6 	bl	800d2b4 <_fflush_r>
 800b368:	68a1      	ldr	r1, [r4, #8]
 800b36a:	4b09      	ldr	r3, [pc, #36]	@ (800b390 <cleanup_stdio+0x38>)
 800b36c:	4299      	cmp	r1, r3
 800b36e:	d002      	beq.n	800b376 <cleanup_stdio+0x1e>
 800b370:	4620      	mov	r0, r4
 800b372:	f001 ff9f 	bl	800d2b4 <_fflush_r>
 800b376:	68e1      	ldr	r1, [r4, #12]
 800b378:	4b06      	ldr	r3, [pc, #24]	@ (800b394 <cleanup_stdio+0x3c>)
 800b37a:	4299      	cmp	r1, r3
 800b37c:	d004      	beq.n	800b388 <cleanup_stdio+0x30>
 800b37e:	4620      	mov	r0, r4
 800b380:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b384:	f001 bf96 	b.w	800d2b4 <_fflush_r>
 800b388:	bd10      	pop	{r4, pc}
 800b38a:	bf00      	nop
 800b38c:	20000aac 	.word	0x20000aac
 800b390:	20000b14 	.word	0x20000b14
 800b394:	20000b7c 	.word	0x20000b7c

0800b398 <global_stdio_init.part.0>:
 800b398:	b510      	push	{r4, lr}
 800b39a:	4b0b      	ldr	r3, [pc, #44]	@ (800b3c8 <global_stdio_init.part.0+0x30>)
 800b39c:	4c0b      	ldr	r4, [pc, #44]	@ (800b3cc <global_stdio_init.part.0+0x34>)
 800b39e:	4a0c      	ldr	r2, [pc, #48]	@ (800b3d0 <global_stdio_init.part.0+0x38>)
 800b3a0:	601a      	str	r2, [r3, #0]
 800b3a2:	4620      	mov	r0, r4
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	2104      	movs	r1, #4
 800b3a8:	f7ff ff94 	bl	800b2d4 <std>
 800b3ac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b3b0:	2201      	movs	r2, #1
 800b3b2:	2109      	movs	r1, #9
 800b3b4:	f7ff ff8e 	bl	800b2d4 <std>
 800b3b8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b3bc:	2202      	movs	r2, #2
 800b3be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b3c2:	2112      	movs	r1, #18
 800b3c4:	f7ff bf86 	b.w	800b2d4 <std>
 800b3c8:	20000be4 	.word	0x20000be4
 800b3cc:	20000aac 	.word	0x20000aac
 800b3d0:	0800b341 	.word	0x0800b341

0800b3d4 <__sfp_lock_acquire>:
 800b3d4:	4801      	ldr	r0, [pc, #4]	@ (800b3dc <__sfp_lock_acquire+0x8>)
 800b3d6:	f000 ba34 	b.w	800b842 <__retarget_lock_acquire_recursive>
 800b3da:	bf00      	nop
 800b3dc:	20000bed 	.word	0x20000bed

0800b3e0 <__sfp_lock_release>:
 800b3e0:	4801      	ldr	r0, [pc, #4]	@ (800b3e8 <__sfp_lock_release+0x8>)
 800b3e2:	f000 ba2f 	b.w	800b844 <__retarget_lock_release_recursive>
 800b3e6:	bf00      	nop
 800b3e8:	20000bed 	.word	0x20000bed

0800b3ec <__sinit>:
 800b3ec:	b510      	push	{r4, lr}
 800b3ee:	4604      	mov	r4, r0
 800b3f0:	f7ff fff0 	bl	800b3d4 <__sfp_lock_acquire>
 800b3f4:	6a23      	ldr	r3, [r4, #32]
 800b3f6:	b11b      	cbz	r3, 800b400 <__sinit+0x14>
 800b3f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b3fc:	f7ff bff0 	b.w	800b3e0 <__sfp_lock_release>
 800b400:	4b04      	ldr	r3, [pc, #16]	@ (800b414 <__sinit+0x28>)
 800b402:	6223      	str	r3, [r4, #32]
 800b404:	4b04      	ldr	r3, [pc, #16]	@ (800b418 <__sinit+0x2c>)
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d1f5      	bne.n	800b3f8 <__sinit+0xc>
 800b40c:	f7ff ffc4 	bl	800b398 <global_stdio_init.part.0>
 800b410:	e7f2      	b.n	800b3f8 <__sinit+0xc>
 800b412:	bf00      	nop
 800b414:	0800b359 	.word	0x0800b359
 800b418:	20000be4 	.word	0x20000be4

0800b41c <_fwalk_sglue>:
 800b41c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b420:	4607      	mov	r7, r0
 800b422:	4688      	mov	r8, r1
 800b424:	4614      	mov	r4, r2
 800b426:	2600      	movs	r6, #0
 800b428:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b42c:	f1b9 0901 	subs.w	r9, r9, #1
 800b430:	d505      	bpl.n	800b43e <_fwalk_sglue+0x22>
 800b432:	6824      	ldr	r4, [r4, #0]
 800b434:	2c00      	cmp	r4, #0
 800b436:	d1f7      	bne.n	800b428 <_fwalk_sglue+0xc>
 800b438:	4630      	mov	r0, r6
 800b43a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b43e:	89ab      	ldrh	r3, [r5, #12]
 800b440:	2b01      	cmp	r3, #1
 800b442:	d907      	bls.n	800b454 <_fwalk_sglue+0x38>
 800b444:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b448:	3301      	adds	r3, #1
 800b44a:	d003      	beq.n	800b454 <_fwalk_sglue+0x38>
 800b44c:	4629      	mov	r1, r5
 800b44e:	4638      	mov	r0, r7
 800b450:	47c0      	blx	r8
 800b452:	4306      	orrs	r6, r0
 800b454:	3568      	adds	r5, #104	@ 0x68
 800b456:	e7e9      	b.n	800b42c <_fwalk_sglue+0x10>

0800b458 <iprintf>:
 800b458:	b40f      	push	{r0, r1, r2, r3}
 800b45a:	b507      	push	{r0, r1, r2, lr}
 800b45c:	4906      	ldr	r1, [pc, #24]	@ (800b478 <iprintf+0x20>)
 800b45e:	ab04      	add	r3, sp, #16
 800b460:	6808      	ldr	r0, [r1, #0]
 800b462:	f853 2b04 	ldr.w	r2, [r3], #4
 800b466:	6881      	ldr	r1, [r0, #8]
 800b468:	9301      	str	r3, [sp, #4]
 800b46a:	f001 fd87 	bl	800cf7c <_vfiprintf_r>
 800b46e:	b003      	add	sp, #12
 800b470:	f85d eb04 	ldr.w	lr, [sp], #4
 800b474:	b004      	add	sp, #16
 800b476:	4770      	bx	lr
 800b478:	20000038 	.word	0x20000038

0800b47c <_puts_r>:
 800b47c:	6a03      	ldr	r3, [r0, #32]
 800b47e:	b570      	push	{r4, r5, r6, lr}
 800b480:	6884      	ldr	r4, [r0, #8]
 800b482:	4605      	mov	r5, r0
 800b484:	460e      	mov	r6, r1
 800b486:	b90b      	cbnz	r3, 800b48c <_puts_r+0x10>
 800b488:	f7ff ffb0 	bl	800b3ec <__sinit>
 800b48c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b48e:	07db      	lsls	r3, r3, #31
 800b490:	d405      	bmi.n	800b49e <_puts_r+0x22>
 800b492:	89a3      	ldrh	r3, [r4, #12]
 800b494:	0598      	lsls	r0, r3, #22
 800b496:	d402      	bmi.n	800b49e <_puts_r+0x22>
 800b498:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b49a:	f000 f9d2 	bl	800b842 <__retarget_lock_acquire_recursive>
 800b49e:	89a3      	ldrh	r3, [r4, #12]
 800b4a0:	0719      	lsls	r1, r3, #28
 800b4a2:	d502      	bpl.n	800b4aa <_puts_r+0x2e>
 800b4a4:	6923      	ldr	r3, [r4, #16]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d135      	bne.n	800b516 <_puts_r+0x9a>
 800b4aa:	4621      	mov	r1, r4
 800b4ac:	4628      	mov	r0, r5
 800b4ae:	f000 f8e5 	bl	800b67c <__swsetup_r>
 800b4b2:	b380      	cbz	r0, 800b516 <_puts_r+0x9a>
 800b4b4:	f04f 35ff 	mov.w	r5, #4294967295
 800b4b8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b4ba:	07da      	lsls	r2, r3, #31
 800b4bc:	d405      	bmi.n	800b4ca <_puts_r+0x4e>
 800b4be:	89a3      	ldrh	r3, [r4, #12]
 800b4c0:	059b      	lsls	r3, r3, #22
 800b4c2:	d402      	bmi.n	800b4ca <_puts_r+0x4e>
 800b4c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b4c6:	f000 f9bd 	bl	800b844 <__retarget_lock_release_recursive>
 800b4ca:	4628      	mov	r0, r5
 800b4cc:	bd70      	pop	{r4, r5, r6, pc}
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	da04      	bge.n	800b4dc <_puts_r+0x60>
 800b4d2:	69a2      	ldr	r2, [r4, #24]
 800b4d4:	429a      	cmp	r2, r3
 800b4d6:	dc17      	bgt.n	800b508 <_puts_r+0x8c>
 800b4d8:	290a      	cmp	r1, #10
 800b4da:	d015      	beq.n	800b508 <_puts_r+0x8c>
 800b4dc:	6823      	ldr	r3, [r4, #0]
 800b4de:	1c5a      	adds	r2, r3, #1
 800b4e0:	6022      	str	r2, [r4, #0]
 800b4e2:	7019      	strb	r1, [r3, #0]
 800b4e4:	68a3      	ldr	r3, [r4, #8]
 800b4e6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b4ea:	3b01      	subs	r3, #1
 800b4ec:	60a3      	str	r3, [r4, #8]
 800b4ee:	2900      	cmp	r1, #0
 800b4f0:	d1ed      	bne.n	800b4ce <_puts_r+0x52>
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	da11      	bge.n	800b51a <_puts_r+0x9e>
 800b4f6:	4622      	mov	r2, r4
 800b4f8:	210a      	movs	r1, #10
 800b4fa:	4628      	mov	r0, r5
 800b4fc:	f000 f87f 	bl	800b5fe <__swbuf_r>
 800b500:	3001      	adds	r0, #1
 800b502:	d0d7      	beq.n	800b4b4 <_puts_r+0x38>
 800b504:	250a      	movs	r5, #10
 800b506:	e7d7      	b.n	800b4b8 <_puts_r+0x3c>
 800b508:	4622      	mov	r2, r4
 800b50a:	4628      	mov	r0, r5
 800b50c:	f000 f877 	bl	800b5fe <__swbuf_r>
 800b510:	3001      	adds	r0, #1
 800b512:	d1e7      	bne.n	800b4e4 <_puts_r+0x68>
 800b514:	e7ce      	b.n	800b4b4 <_puts_r+0x38>
 800b516:	3e01      	subs	r6, #1
 800b518:	e7e4      	b.n	800b4e4 <_puts_r+0x68>
 800b51a:	6823      	ldr	r3, [r4, #0]
 800b51c:	1c5a      	adds	r2, r3, #1
 800b51e:	6022      	str	r2, [r4, #0]
 800b520:	220a      	movs	r2, #10
 800b522:	701a      	strb	r2, [r3, #0]
 800b524:	e7ee      	b.n	800b504 <_puts_r+0x88>
	...

0800b528 <puts>:
 800b528:	4b02      	ldr	r3, [pc, #8]	@ (800b534 <puts+0xc>)
 800b52a:	4601      	mov	r1, r0
 800b52c:	6818      	ldr	r0, [r3, #0]
 800b52e:	f7ff bfa5 	b.w	800b47c <_puts_r>
 800b532:	bf00      	nop
 800b534:	20000038 	.word	0x20000038

0800b538 <siprintf>:
 800b538:	b40e      	push	{r1, r2, r3}
 800b53a:	b500      	push	{lr}
 800b53c:	b09c      	sub	sp, #112	@ 0x70
 800b53e:	ab1d      	add	r3, sp, #116	@ 0x74
 800b540:	9002      	str	r0, [sp, #8]
 800b542:	9006      	str	r0, [sp, #24]
 800b544:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b548:	4809      	ldr	r0, [pc, #36]	@ (800b570 <siprintf+0x38>)
 800b54a:	9107      	str	r1, [sp, #28]
 800b54c:	9104      	str	r1, [sp, #16]
 800b54e:	4909      	ldr	r1, [pc, #36]	@ (800b574 <siprintf+0x3c>)
 800b550:	f853 2b04 	ldr.w	r2, [r3], #4
 800b554:	9105      	str	r1, [sp, #20]
 800b556:	6800      	ldr	r0, [r0, #0]
 800b558:	9301      	str	r3, [sp, #4]
 800b55a:	a902      	add	r1, sp, #8
 800b55c:	f001 fbe8 	bl	800cd30 <_svfiprintf_r>
 800b560:	9b02      	ldr	r3, [sp, #8]
 800b562:	2200      	movs	r2, #0
 800b564:	701a      	strb	r2, [r3, #0]
 800b566:	b01c      	add	sp, #112	@ 0x70
 800b568:	f85d eb04 	ldr.w	lr, [sp], #4
 800b56c:	b003      	add	sp, #12
 800b56e:	4770      	bx	lr
 800b570:	20000038 	.word	0x20000038
 800b574:	ffff0208 	.word	0xffff0208

0800b578 <__sread>:
 800b578:	b510      	push	{r4, lr}
 800b57a:	460c      	mov	r4, r1
 800b57c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b580:	f000 f900 	bl	800b784 <_read_r>
 800b584:	2800      	cmp	r0, #0
 800b586:	bfab      	itete	ge
 800b588:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b58a:	89a3      	ldrhlt	r3, [r4, #12]
 800b58c:	181b      	addge	r3, r3, r0
 800b58e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b592:	bfac      	ite	ge
 800b594:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b596:	81a3      	strhlt	r3, [r4, #12]
 800b598:	bd10      	pop	{r4, pc}

0800b59a <__swrite>:
 800b59a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b59e:	461f      	mov	r7, r3
 800b5a0:	898b      	ldrh	r3, [r1, #12]
 800b5a2:	05db      	lsls	r3, r3, #23
 800b5a4:	4605      	mov	r5, r0
 800b5a6:	460c      	mov	r4, r1
 800b5a8:	4616      	mov	r6, r2
 800b5aa:	d505      	bpl.n	800b5b8 <__swrite+0x1e>
 800b5ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5b0:	2302      	movs	r3, #2
 800b5b2:	2200      	movs	r2, #0
 800b5b4:	f000 f8d4 	bl	800b760 <_lseek_r>
 800b5b8:	89a3      	ldrh	r3, [r4, #12]
 800b5ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b5be:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b5c2:	81a3      	strh	r3, [r4, #12]
 800b5c4:	4632      	mov	r2, r6
 800b5c6:	463b      	mov	r3, r7
 800b5c8:	4628      	mov	r0, r5
 800b5ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b5ce:	f000 b8fb 	b.w	800b7c8 <_write_r>

0800b5d2 <__sseek>:
 800b5d2:	b510      	push	{r4, lr}
 800b5d4:	460c      	mov	r4, r1
 800b5d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5da:	f000 f8c1 	bl	800b760 <_lseek_r>
 800b5de:	1c43      	adds	r3, r0, #1
 800b5e0:	89a3      	ldrh	r3, [r4, #12]
 800b5e2:	bf15      	itete	ne
 800b5e4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b5e6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b5ea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b5ee:	81a3      	strheq	r3, [r4, #12]
 800b5f0:	bf18      	it	ne
 800b5f2:	81a3      	strhne	r3, [r4, #12]
 800b5f4:	bd10      	pop	{r4, pc}

0800b5f6 <__sclose>:
 800b5f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5fa:	f000 b8a1 	b.w	800b740 <_close_r>

0800b5fe <__swbuf_r>:
 800b5fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b600:	460e      	mov	r6, r1
 800b602:	4614      	mov	r4, r2
 800b604:	4605      	mov	r5, r0
 800b606:	b118      	cbz	r0, 800b610 <__swbuf_r+0x12>
 800b608:	6a03      	ldr	r3, [r0, #32]
 800b60a:	b90b      	cbnz	r3, 800b610 <__swbuf_r+0x12>
 800b60c:	f7ff feee 	bl	800b3ec <__sinit>
 800b610:	69a3      	ldr	r3, [r4, #24]
 800b612:	60a3      	str	r3, [r4, #8]
 800b614:	89a3      	ldrh	r3, [r4, #12]
 800b616:	071a      	lsls	r2, r3, #28
 800b618:	d501      	bpl.n	800b61e <__swbuf_r+0x20>
 800b61a:	6923      	ldr	r3, [r4, #16]
 800b61c:	b943      	cbnz	r3, 800b630 <__swbuf_r+0x32>
 800b61e:	4621      	mov	r1, r4
 800b620:	4628      	mov	r0, r5
 800b622:	f000 f82b 	bl	800b67c <__swsetup_r>
 800b626:	b118      	cbz	r0, 800b630 <__swbuf_r+0x32>
 800b628:	f04f 37ff 	mov.w	r7, #4294967295
 800b62c:	4638      	mov	r0, r7
 800b62e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b630:	6823      	ldr	r3, [r4, #0]
 800b632:	6922      	ldr	r2, [r4, #16]
 800b634:	1a98      	subs	r0, r3, r2
 800b636:	6963      	ldr	r3, [r4, #20]
 800b638:	b2f6      	uxtb	r6, r6
 800b63a:	4283      	cmp	r3, r0
 800b63c:	4637      	mov	r7, r6
 800b63e:	dc05      	bgt.n	800b64c <__swbuf_r+0x4e>
 800b640:	4621      	mov	r1, r4
 800b642:	4628      	mov	r0, r5
 800b644:	f001 fe36 	bl	800d2b4 <_fflush_r>
 800b648:	2800      	cmp	r0, #0
 800b64a:	d1ed      	bne.n	800b628 <__swbuf_r+0x2a>
 800b64c:	68a3      	ldr	r3, [r4, #8]
 800b64e:	3b01      	subs	r3, #1
 800b650:	60a3      	str	r3, [r4, #8]
 800b652:	6823      	ldr	r3, [r4, #0]
 800b654:	1c5a      	adds	r2, r3, #1
 800b656:	6022      	str	r2, [r4, #0]
 800b658:	701e      	strb	r6, [r3, #0]
 800b65a:	6962      	ldr	r2, [r4, #20]
 800b65c:	1c43      	adds	r3, r0, #1
 800b65e:	429a      	cmp	r2, r3
 800b660:	d004      	beq.n	800b66c <__swbuf_r+0x6e>
 800b662:	89a3      	ldrh	r3, [r4, #12]
 800b664:	07db      	lsls	r3, r3, #31
 800b666:	d5e1      	bpl.n	800b62c <__swbuf_r+0x2e>
 800b668:	2e0a      	cmp	r6, #10
 800b66a:	d1df      	bne.n	800b62c <__swbuf_r+0x2e>
 800b66c:	4621      	mov	r1, r4
 800b66e:	4628      	mov	r0, r5
 800b670:	f001 fe20 	bl	800d2b4 <_fflush_r>
 800b674:	2800      	cmp	r0, #0
 800b676:	d0d9      	beq.n	800b62c <__swbuf_r+0x2e>
 800b678:	e7d6      	b.n	800b628 <__swbuf_r+0x2a>
	...

0800b67c <__swsetup_r>:
 800b67c:	b538      	push	{r3, r4, r5, lr}
 800b67e:	4b29      	ldr	r3, [pc, #164]	@ (800b724 <__swsetup_r+0xa8>)
 800b680:	4605      	mov	r5, r0
 800b682:	6818      	ldr	r0, [r3, #0]
 800b684:	460c      	mov	r4, r1
 800b686:	b118      	cbz	r0, 800b690 <__swsetup_r+0x14>
 800b688:	6a03      	ldr	r3, [r0, #32]
 800b68a:	b90b      	cbnz	r3, 800b690 <__swsetup_r+0x14>
 800b68c:	f7ff feae 	bl	800b3ec <__sinit>
 800b690:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b694:	0719      	lsls	r1, r3, #28
 800b696:	d422      	bmi.n	800b6de <__swsetup_r+0x62>
 800b698:	06da      	lsls	r2, r3, #27
 800b69a:	d407      	bmi.n	800b6ac <__swsetup_r+0x30>
 800b69c:	2209      	movs	r2, #9
 800b69e:	602a      	str	r2, [r5, #0]
 800b6a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b6a4:	81a3      	strh	r3, [r4, #12]
 800b6a6:	f04f 30ff 	mov.w	r0, #4294967295
 800b6aa:	e033      	b.n	800b714 <__swsetup_r+0x98>
 800b6ac:	0758      	lsls	r0, r3, #29
 800b6ae:	d512      	bpl.n	800b6d6 <__swsetup_r+0x5a>
 800b6b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b6b2:	b141      	cbz	r1, 800b6c6 <__swsetup_r+0x4a>
 800b6b4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b6b8:	4299      	cmp	r1, r3
 800b6ba:	d002      	beq.n	800b6c2 <__swsetup_r+0x46>
 800b6bc:	4628      	mov	r0, r5
 800b6be:	f000 ff0f 	bl	800c4e0 <_free_r>
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	6363      	str	r3, [r4, #52]	@ 0x34
 800b6c6:	89a3      	ldrh	r3, [r4, #12]
 800b6c8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b6cc:	81a3      	strh	r3, [r4, #12]
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	6063      	str	r3, [r4, #4]
 800b6d2:	6923      	ldr	r3, [r4, #16]
 800b6d4:	6023      	str	r3, [r4, #0]
 800b6d6:	89a3      	ldrh	r3, [r4, #12]
 800b6d8:	f043 0308 	orr.w	r3, r3, #8
 800b6dc:	81a3      	strh	r3, [r4, #12]
 800b6de:	6923      	ldr	r3, [r4, #16]
 800b6e0:	b94b      	cbnz	r3, 800b6f6 <__swsetup_r+0x7a>
 800b6e2:	89a3      	ldrh	r3, [r4, #12]
 800b6e4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b6e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b6ec:	d003      	beq.n	800b6f6 <__swsetup_r+0x7a>
 800b6ee:	4621      	mov	r1, r4
 800b6f0:	4628      	mov	r0, r5
 800b6f2:	f001 fe2d 	bl	800d350 <__smakebuf_r>
 800b6f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6fa:	f013 0201 	ands.w	r2, r3, #1
 800b6fe:	d00a      	beq.n	800b716 <__swsetup_r+0x9a>
 800b700:	2200      	movs	r2, #0
 800b702:	60a2      	str	r2, [r4, #8]
 800b704:	6962      	ldr	r2, [r4, #20]
 800b706:	4252      	negs	r2, r2
 800b708:	61a2      	str	r2, [r4, #24]
 800b70a:	6922      	ldr	r2, [r4, #16]
 800b70c:	b942      	cbnz	r2, 800b720 <__swsetup_r+0xa4>
 800b70e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b712:	d1c5      	bne.n	800b6a0 <__swsetup_r+0x24>
 800b714:	bd38      	pop	{r3, r4, r5, pc}
 800b716:	0799      	lsls	r1, r3, #30
 800b718:	bf58      	it	pl
 800b71a:	6962      	ldrpl	r2, [r4, #20]
 800b71c:	60a2      	str	r2, [r4, #8]
 800b71e:	e7f4      	b.n	800b70a <__swsetup_r+0x8e>
 800b720:	2000      	movs	r0, #0
 800b722:	e7f7      	b.n	800b714 <__swsetup_r+0x98>
 800b724:	20000038 	.word	0x20000038

0800b728 <memset>:
 800b728:	4402      	add	r2, r0
 800b72a:	4603      	mov	r3, r0
 800b72c:	4293      	cmp	r3, r2
 800b72e:	d100      	bne.n	800b732 <memset+0xa>
 800b730:	4770      	bx	lr
 800b732:	f803 1b01 	strb.w	r1, [r3], #1
 800b736:	e7f9      	b.n	800b72c <memset+0x4>

0800b738 <_localeconv_r>:
 800b738:	4800      	ldr	r0, [pc, #0]	@ (800b73c <_localeconv_r+0x4>)
 800b73a:	4770      	bx	lr
 800b73c:	20000178 	.word	0x20000178

0800b740 <_close_r>:
 800b740:	b538      	push	{r3, r4, r5, lr}
 800b742:	4d06      	ldr	r5, [pc, #24]	@ (800b75c <_close_r+0x1c>)
 800b744:	2300      	movs	r3, #0
 800b746:	4604      	mov	r4, r0
 800b748:	4608      	mov	r0, r1
 800b74a:	602b      	str	r3, [r5, #0]
 800b74c:	f7f6 fdb4 	bl	80022b8 <_close>
 800b750:	1c43      	adds	r3, r0, #1
 800b752:	d102      	bne.n	800b75a <_close_r+0x1a>
 800b754:	682b      	ldr	r3, [r5, #0]
 800b756:	b103      	cbz	r3, 800b75a <_close_r+0x1a>
 800b758:	6023      	str	r3, [r4, #0]
 800b75a:	bd38      	pop	{r3, r4, r5, pc}
 800b75c:	20000be8 	.word	0x20000be8

0800b760 <_lseek_r>:
 800b760:	b538      	push	{r3, r4, r5, lr}
 800b762:	4d07      	ldr	r5, [pc, #28]	@ (800b780 <_lseek_r+0x20>)
 800b764:	4604      	mov	r4, r0
 800b766:	4608      	mov	r0, r1
 800b768:	4611      	mov	r1, r2
 800b76a:	2200      	movs	r2, #0
 800b76c:	602a      	str	r2, [r5, #0]
 800b76e:	461a      	mov	r2, r3
 800b770:	f7f6 fdc9 	bl	8002306 <_lseek>
 800b774:	1c43      	adds	r3, r0, #1
 800b776:	d102      	bne.n	800b77e <_lseek_r+0x1e>
 800b778:	682b      	ldr	r3, [r5, #0]
 800b77a:	b103      	cbz	r3, 800b77e <_lseek_r+0x1e>
 800b77c:	6023      	str	r3, [r4, #0]
 800b77e:	bd38      	pop	{r3, r4, r5, pc}
 800b780:	20000be8 	.word	0x20000be8

0800b784 <_read_r>:
 800b784:	b538      	push	{r3, r4, r5, lr}
 800b786:	4d07      	ldr	r5, [pc, #28]	@ (800b7a4 <_read_r+0x20>)
 800b788:	4604      	mov	r4, r0
 800b78a:	4608      	mov	r0, r1
 800b78c:	4611      	mov	r1, r2
 800b78e:	2200      	movs	r2, #0
 800b790:	602a      	str	r2, [r5, #0]
 800b792:	461a      	mov	r2, r3
 800b794:	f7f6 fd57 	bl	8002246 <_read>
 800b798:	1c43      	adds	r3, r0, #1
 800b79a:	d102      	bne.n	800b7a2 <_read_r+0x1e>
 800b79c:	682b      	ldr	r3, [r5, #0]
 800b79e:	b103      	cbz	r3, 800b7a2 <_read_r+0x1e>
 800b7a0:	6023      	str	r3, [r4, #0]
 800b7a2:	bd38      	pop	{r3, r4, r5, pc}
 800b7a4:	20000be8 	.word	0x20000be8

0800b7a8 <_sbrk_r>:
 800b7a8:	b538      	push	{r3, r4, r5, lr}
 800b7aa:	4d06      	ldr	r5, [pc, #24]	@ (800b7c4 <_sbrk_r+0x1c>)
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	4604      	mov	r4, r0
 800b7b0:	4608      	mov	r0, r1
 800b7b2:	602b      	str	r3, [r5, #0]
 800b7b4:	f7f6 fdb4 	bl	8002320 <_sbrk>
 800b7b8:	1c43      	adds	r3, r0, #1
 800b7ba:	d102      	bne.n	800b7c2 <_sbrk_r+0x1a>
 800b7bc:	682b      	ldr	r3, [r5, #0]
 800b7be:	b103      	cbz	r3, 800b7c2 <_sbrk_r+0x1a>
 800b7c0:	6023      	str	r3, [r4, #0]
 800b7c2:	bd38      	pop	{r3, r4, r5, pc}
 800b7c4:	20000be8 	.word	0x20000be8

0800b7c8 <_write_r>:
 800b7c8:	b538      	push	{r3, r4, r5, lr}
 800b7ca:	4d07      	ldr	r5, [pc, #28]	@ (800b7e8 <_write_r+0x20>)
 800b7cc:	4604      	mov	r4, r0
 800b7ce:	4608      	mov	r0, r1
 800b7d0:	4611      	mov	r1, r2
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	602a      	str	r2, [r5, #0]
 800b7d6:	461a      	mov	r2, r3
 800b7d8:	f7f6 fd52 	bl	8002280 <_write>
 800b7dc:	1c43      	adds	r3, r0, #1
 800b7de:	d102      	bne.n	800b7e6 <_write_r+0x1e>
 800b7e0:	682b      	ldr	r3, [r5, #0]
 800b7e2:	b103      	cbz	r3, 800b7e6 <_write_r+0x1e>
 800b7e4:	6023      	str	r3, [r4, #0]
 800b7e6:	bd38      	pop	{r3, r4, r5, pc}
 800b7e8:	20000be8 	.word	0x20000be8

0800b7ec <__errno>:
 800b7ec:	4b01      	ldr	r3, [pc, #4]	@ (800b7f4 <__errno+0x8>)
 800b7ee:	6818      	ldr	r0, [r3, #0]
 800b7f0:	4770      	bx	lr
 800b7f2:	bf00      	nop
 800b7f4:	20000038 	.word	0x20000038

0800b7f8 <__libc_init_array>:
 800b7f8:	b570      	push	{r4, r5, r6, lr}
 800b7fa:	4d0d      	ldr	r5, [pc, #52]	@ (800b830 <__libc_init_array+0x38>)
 800b7fc:	4c0d      	ldr	r4, [pc, #52]	@ (800b834 <__libc_init_array+0x3c>)
 800b7fe:	1b64      	subs	r4, r4, r5
 800b800:	10a4      	asrs	r4, r4, #2
 800b802:	2600      	movs	r6, #0
 800b804:	42a6      	cmp	r6, r4
 800b806:	d109      	bne.n	800b81c <__libc_init_array+0x24>
 800b808:	4d0b      	ldr	r5, [pc, #44]	@ (800b838 <__libc_init_array+0x40>)
 800b80a:	4c0c      	ldr	r4, [pc, #48]	@ (800b83c <__libc_init_array+0x44>)
 800b80c:	f001 ff0c 	bl	800d628 <_init>
 800b810:	1b64      	subs	r4, r4, r5
 800b812:	10a4      	asrs	r4, r4, #2
 800b814:	2600      	movs	r6, #0
 800b816:	42a6      	cmp	r6, r4
 800b818:	d105      	bne.n	800b826 <__libc_init_array+0x2e>
 800b81a:	bd70      	pop	{r4, r5, r6, pc}
 800b81c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b820:	4798      	blx	r3
 800b822:	3601      	adds	r6, #1
 800b824:	e7ee      	b.n	800b804 <__libc_init_array+0xc>
 800b826:	f855 3b04 	ldr.w	r3, [r5], #4
 800b82a:	4798      	blx	r3
 800b82c:	3601      	adds	r6, #1
 800b82e:	e7f2      	b.n	800b816 <__libc_init_array+0x1e>
 800b830:	0800da40 	.word	0x0800da40
 800b834:	0800da40 	.word	0x0800da40
 800b838:	0800da40 	.word	0x0800da40
 800b83c:	0800da44 	.word	0x0800da44

0800b840 <__retarget_lock_init_recursive>:
 800b840:	4770      	bx	lr

0800b842 <__retarget_lock_acquire_recursive>:
 800b842:	4770      	bx	lr

0800b844 <__retarget_lock_release_recursive>:
 800b844:	4770      	bx	lr

0800b846 <quorem>:
 800b846:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b84a:	6903      	ldr	r3, [r0, #16]
 800b84c:	690c      	ldr	r4, [r1, #16]
 800b84e:	42a3      	cmp	r3, r4
 800b850:	4607      	mov	r7, r0
 800b852:	db7e      	blt.n	800b952 <quorem+0x10c>
 800b854:	3c01      	subs	r4, #1
 800b856:	f101 0814 	add.w	r8, r1, #20
 800b85a:	00a3      	lsls	r3, r4, #2
 800b85c:	f100 0514 	add.w	r5, r0, #20
 800b860:	9300      	str	r3, [sp, #0]
 800b862:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b866:	9301      	str	r3, [sp, #4]
 800b868:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b86c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b870:	3301      	adds	r3, #1
 800b872:	429a      	cmp	r2, r3
 800b874:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b878:	fbb2 f6f3 	udiv	r6, r2, r3
 800b87c:	d32e      	bcc.n	800b8dc <quorem+0x96>
 800b87e:	f04f 0a00 	mov.w	sl, #0
 800b882:	46c4      	mov	ip, r8
 800b884:	46ae      	mov	lr, r5
 800b886:	46d3      	mov	fp, sl
 800b888:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b88c:	b298      	uxth	r0, r3
 800b88e:	fb06 a000 	mla	r0, r6, r0, sl
 800b892:	0c02      	lsrs	r2, r0, #16
 800b894:	0c1b      	lsrs	r3, r3, #16
 800b896:	fb06 2303 	mla	r3, r6, r3, r2
 800b89a:	f8de 2000 	ldr.w	r2, [lr]
 800b89e:	b280      	uxth	r0, r0
 800b8a0:	b292      	uxth	r2, r2
 800b8a2:	1a12      	subs	r2, r2, r0
 800b8a4:	445a      	add	r2, fp
 800b8a6:	f8de 0000 	ldr.w	r0, [lr]
 800b8aa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b8ae:	b29b      	uxth	r3, r3
 800b8b0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b8b4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b8b8:	b292      	uxth	r2, r2
 800b8ba:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b8be:	45e1      	cmp	r9, ip
 800b8c0:	f84e 2b04 	str.w	r2, [lr], #4
 800b8c4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b8c8:	d2de      	bcs.n	800b888 <quorem+0x42>
 800b8ca:	9b00      	ldr	r3, [sp, #0]
 800b8cc:	58eb      	ldr	r3, [r5, r3]
 800b8ce:	b92b      	cbnz	r3, 800b8dc <quorem+0x96>
 800b8d0:	9b01      	ldr	r3, [sp, #4]
 800b8d2:	3b04      	subs	r3, #4
 800b8d4:	429d      	cmp	r5, r3
 800b8d6:	461a      	mov	r2, r3
 800b8d8:	d32f      	bcc.n	800b93a <quorem+0xf4>
 800b8da:	613c      	str	r4, [r7, #16]
 800b8dc:	4638      	mov	r0, r7
 800b8de:	f001 f8c3 	bl	800ca68 <__mcmp>
 800b8e2:	2800      	cmp	r0, #0
 800b8e4:	db25      	blt.n	800b932 <quorem+0xec>
 800b8e6:	4629      	mov	r1, r5
 800b8e8:	2000      	movs	r0, #0
 800b8ea:	f858 2b04 	ldr.w	r2, [r8], #4
 800b8ee:	f8d1 c000 	ldr.w	ip, [r1]
 800b8f2:	fa1f fe82 	uxth.w	lr, r2
 800b8f6:	fa1f f38c 	uxth.w	r3, ip
 800b8fa:	eba3 030e 	sub.w	r3, r3, lr
 800b8fe:	4403      	add	r3, r0
 800b900:	0c12      	lsrs	r2, r2, #16
 800b902:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b906:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b90a:	b29b      	uxth	r3, r3
 800b90c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b910:	45c1      	cmp	r9, r8
 800b912:	f841 3b04 	str.w	r3, [r1], #4
 800b916:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b91a:	d2e6      	bcs.n	800b8ea <quorem+0xa4>
 800b91c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b920:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b924:	b922      	cbnz	r2, 800b930 <quorem+0xea>
 800b926:	3b04      	subs	r3, #4
 800b928:	429d      	cmp	r5, r3
 800b92a:	461a      	mov	r2, r3
 800b92c:	d30b      	bcc.n	800b946 <quorem+0x100>
 800b92e:	613c      	str	r4, [r7, #16]
 800b930:	3601      	adds	r6, #1
 800b932:	4630      	mov	r0, r6
 800b934:	b003      	add	sp, #12
 800b936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b93a:	6812      	ldr	r2, [r2, #0]
 800b93c:	3b04      	subs	r3, #4
 800b93e:	2a00      	cmp	r2, #0
 800b940:	d1cb      	bne.n	800b8da <quorem+0x94>
 800b942:	3c01      	subs	r4, #1
 800b944:	e7c6      	b.n	800b8d4 <quorem+0x8e>
 800b946:	6812      	ldr	r2, [r2, #0]
 800b948:	3b04      	subs	r3, #4
 800b94a:	2a00      	cmp	r2, #0
 800b94c:	d1ef      	bne.n	800b92e <quorem+0xe8>
 800b94e:	3c01      	subs	r4, #1
 800b950:	e7ea      	b.n	800b928 <quorem+0xe2>
 800b952:	2000      	movs	r0, #0
 800b954:	e7ee      	b.n	800b934 <quorem+0xee>
	...

0800b958 <_dtoa_r>:
 800b958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b95c:	69c7      	ldr	r7, [r0, #28]
 800b95e:	b099      	sub	sp, #100	@ 0x64
 800b960:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b964:	ec55 4b10 	vmov	r4, r5, d0
 800b968:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800b96a:	9109      	str	r1, [sp, #36]	@ 0x24
 800b96c:	4683      	mov	fp, r0
 800b96e:	920e      	str	r2, [sp, #56]	@ 0x38
 800b970:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b972:	b97f      	cbnz	r7, 800b994 <_dtoa_r+0x3c>
 800b974:	2010      	movs	r0, #16
 800b976:	f7fe ff97 	bl	800a8a8 <malloc>
 800b97a:	4602      	mov	r2, r0
 800b97c:	f8cb 001c 	str.w	r0, [fp, #28]
 800b980:	b920      	cbnz	r0, 800b98c <_dtoa_r+0x34>
 800b982:	4ba7      	ldr	r3, [pc, #668]	@ (800bc20 <_dtoa_r+0x2c8>)
 800b984:	21ef      	movs	r1, #239	@ 0xef
 800b986:	48a7      	ldr	r0, [pc, #668]	@ (800bc24 <_dtoa_r+0x2cc>)
 800b988:	f001 fd68 	bl	800d45c <__assert_func>
 800b98c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b990:	6007      	str	r7, [r0, #0]
 800b992:	60c7      	str	r7, [r0, #12]
 800b994:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b998:	6819      	ldr	r1, [r3, #0]
 800b99a:	b159      	cbz	r1, 800b9b4 <_dtoa_r+0x5c>
 800b99c:	685a      	ldr	r2, [r3, #4]
 800b99e:	604a      	str	r2, [r1, #4]
 800b9a0:	2301      	movs	r3, #1
 800b9a2:	4093      	lsls	r3, r2
 800b9a4:	608b      	str	r3, [r1, #8]
 800b9a6:	4658      	mov	r0, fp
 800b9a8:	f000 fe24 	bl	800c5f4 <_Bfree>
 800b9ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b9b0:	2200      	movs	r2, #0
 800b9b2:	601a      	str	r2, [r3, #0]
 800b9b4:	1e2b      	subs	r3, r5, #0
 800b9b6:	bfb9      	ittee	lt
 800b9b8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b9bc:	9303      	strlt	r3, [sp, #12]
 800b9be:	2300      	movge	r3, #0
 800b9c0:	6033      	strge	r3, [r6, #0]
 800b9c2:	9f03      	ldr	r7, [sp, #12]
 800b9c4:	4b98      	ldr	r3, [pc, #608]	@ (800bc28 <_dtoa_r+0x2d0>)
 800b9c6:	bfbc      	itt	lt
 800b9c8:	2201      	movlt	r2, #1
 800b9ca:	6032      	strlt	r2, [r6, #0]
 800b9cc:	43bb      	bics	r3, r7
 800b9ce:	d112      	bne.n	800b9f6 <_dtoa_r+0x9e>
 800b9d0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b9d2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b9d6:	6013      	str	r3, [r2, #0]
 800b9d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b9dc:	4323      	orrs	r3, r4
 800b9de:	f000 854d 	beq.w	800c47c <_dtoa_r+0xb24>
 800b9e2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b9e4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800bc3c <_dtoa_r+0x2e4>
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	f000 854f 	beq.w	800c48c <_dtoa_r+0xb34>
 800b9ee:	f10a 0303 	add.w	r3, sl, #3
 800b9f2:	f000 bd49 	b.w	800c488 <_dtoa_r+0xb30>
 800b9f6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	ec51 0b17 	vmov	r0, r1, d7
 800ba00:	2300      	movs	r3, #0
 800ba02:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800ba06:	f7f5 f85f 	bl	8000ac8 <__aeabi_dcmpeq>
 800ba0a:	4680      	mov	r8, r0
 800ba0c:	b158      	cbz	r0, 800ba26 <_dtoa_r+0xce>
 800ba0e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ba10:	2301      	movs	r3, #1
 800ba12:	6013      	str	r3, [r2, #0]
 800ba14:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ba16:	b113      	cbz	r3, 800ba1e <_dtoa_r+0xc6>
 800ba18:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ba1a:	4b84      	ldr	r3, [pc, #528]	@ (800bc2c <_dtoa_r+0x2d4>)
 800ba1c:	6013      	str	r3, [r2, #0]
 800ba1e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800bc40 <_dtoa_r+0x2e8>
 800ba22:	f000 bd33 	b.w	800c48c <_dtoa_r+0xb34>
 800ba26:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800ba2a:	aa16      	add	r2, sp, #88	@ 0x58
 800ba2c:	a917      	add	r1, sp, #92	@ 0x5c
 800ba2e:	4658      	mov	r0, fp
 800ba30:	f001 f8ca 	bl	800cbc8 <__d2b>
 800ba34:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800ba38:	4681      	mov	r9, r0
 800ba3a:	2e00      	cmp	r6, #0
 800ba3c:	d077      	beq.n	800bb2e <_dtoa_r+0x1d6>
 800ba3e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ba40:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800ba44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ba48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ba4c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800ba50:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800ba54:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800ba58:	4619      	mov	r1, r3
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	4b74      	ldr	r3, [pc, #464]	@ (800bc30 <_dtoa_r+0x2d8>)
 800ba5e:	f7f4 fc13 	bl	8000288 <__aeabi_dsub>
 800ba62:	a369      	add	r3, pc, #420	@ (adr r3, 800bc08 <_dtoa_r+0x2b0>)
 800ba64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba68:	f7f4 fdc6 	bl	80005f8 <__aeabi_dmul>
 800ba6c:	a368      	add	r3, pc, #416	@ (adr r3, 800bc10 <_dtoa_r+0x2b8>)
 800ba6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba72:	f7f4 fc0b 	bl	800028c <__adddf3>
 800ba76:	4604      	mov	r4, r0
 800ba78:	4630      	mov	r0, r6
 800ba7a:	460d      	mov	r5, r1
 800ba7c:	f7f4 fd52 	bl	8000524 <__aeabi_i2d>
 800ba80:	a365      	add	r3, pc, #404	@ (adr r3, 800bc18 <_dtoa_r+0x2c0>)
 800ba82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba86:	f7f4 fdb7 	bl	80005f8 <__aeabi_dmul>
 800ba8a:	4602      	mov	r2, r0
 800ba8c:	460b      	mov	r3, r1
 800ba8e:	4620      	mov	r0, r4
 800ba90:	4629      	mov	r1, r5
 800ba92:	f7f4 fbfb 	bl	800028c <__adddf3>
 800ba96:	4604      	mov	r4, r0
 800ba98:	460d      	mov	r5, r1
 800ba9a:	f7f5 f85d 	bl	8000b58 <__aeabi_d2iz>
 800ba9e:	2200      	movs	r2, #0
 800baa0:	4607      	mov	r7, r0
 800baa2:	2300      	movs	r3, #0
 800baa4:	4620      	mov	r0, r4
 800baa6:	4629      	mov	r1, r5
 800baa8:	f7f5 f818 	bl	8000adc <__aeabi_dcmplt>
 800baac:	b140      	cbz	r0, 800bac0 <_dtoa_r+0x168>
 800baae:	4638      	mov	r0, r7
 800bab0:	f7f4 fd38 	bl	8000524 <__aeabi_i2d>
 800bab4:	4622      	mov	r2, r4
 800bab6:	462b      	mov	r3, r5
 800bab8:	f7f5 f806 	bl	8000ac8 <__aeabi_dcmpeq>
 800babc:	b900      	cbnz	r0, 800bac0 <_dtoa_r+0x168>
 800babe:	3f01      	subs	r7, #1
 800bac0:	2f16      	cmp	r7, #22
 800bac2:	d851      	bhi.n	800bb68 <_dtoa_r+0x210>
 800bac4:	4b5b      	ldr	r3, [pc, #364]	@ (800bc34 <_dtoa_r+0x2dc>)
 800bac6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800baca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bace:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bad2:	f7f5 f803 	bl	8000adc <__aeabi_dcmplt>
 800bad6:	2800      	cmp	r0, #0
 800bad8:	d048      	beq.n	800bb6c <_dtoa_r+0x214>
 800bada:	3f01      	subs	r7, #1
 800badc:	2300      	movs	r3, #0
 800bade:	9312      	str	r3, [sp, #72]	@ 0x48
 800bae0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800bae2:	1b9b      	subs	r3, r3, r6
 800bae4:	1e5a      	subs	r2, r3, #1
 800bae6:	bf44      	itt	mi
 800bae8:	f1c3 0801 	rsbmi	r8, r3, #1
 800baec:	2300      	movmi	r3, #0
 800baee:	9208      	str	r2, [sp, #32]
 800baf0:	bf54      	ite	pl
 800baf2:	f04f 0800 	movpl.w	r8, #0
 800baf6:	9308      	strmi	r3, [sp, #32]
 800baf8:	2f00      	cmp	r7, #0
 800bafa:	db39      	blt.n	800bb70 <_dtoa_r+0x218>
 800bafc:	9b08      	ldr	r3, [sp, #32]
 800bafe:	970f      	str	r7, [sp, #60]	@ 0x3c
 800bb00:	443b      	add	r3, r7
 800bb02:	9308      	str	r3, [sp, #32]
 800bb04:	2300      	movs	r3, #0
 800bb06:	930a      	str	r3, [sp, #40]	@ 0x28
 800bb08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb0a:	2b09      	cmp	r3, #9
 800bb0c:	d864      	bhi.n	800bbd8 <_dtoa_r+0x280>
 800bb0e:	2b05      	cmp	r3, #5
 800bb10:	bfc4      	itt	gt
 800bb12:	3b04      	subgt	r3, #4
 800bb14:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800bb16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb18:	f1a3 0302 	sub.w	r3, r3, #2
 800bb1c:	bfcc      	ite	gt
 800bb1e:	2400      	movgt	r4, #0
 800bb20:	2401      	movle	r4, #1
 800bb22:	2b03      	cmp	r3, #3
 800bb24:	d863      	bhi.n	800bbee <_dtoa_r+0x296>
 800bb26:	e8df f003 	tbb	[pc, r3]
 800bb2a:	372a      	.short	0x372a
 800bb2c:	5535      	.short	0x5535
 800bb2e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800bb32:	441e      	add	r6, r3
 800bb34:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800bb38:	2b20      	cmp	r3, #32
 800bb3a:	bfc1      	itttt	gt
 800bb3c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800bb40:	409f      	lslgt	r7, r3
 800bb42:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800bb46:	fa24 f303 	lsrgt.w	r3, r4, r3
 800bb4a:	bfd6      	itet	le
 800bb4c:	f1c3 0320 	rsble	r3, r3, #32
 800bb50:	ea47 0003 	orrgt.w	r0, r7, r3
 800bb54:	fa04 f003 	lslle.w	r0, r4, r3
 800bb58:	f7f4 fcd4 	bl	8000504 <__aeabi_ui2d>
 800bb5c:	2201      	movs	r2, #1
 800bb5e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800bb62:	3e01      	subs	r6, #1
 800bb64:	9214      	str	r2, [sp, #80]	@ 0x50
 800bb66:	e777      	b.n	800ba58 <_dtoa_r+0x100>
 800bb68:	2301      	movs	r3, #1
 800bb6a:	e7b8      	b.n	800bade <_dtoa_r+0x186>
 800bb6c:	9012      	str	r0, [sp, #72]	@ 0x48
 800bb6e:	e7b7      	b.n	800bae0 <_dtoa_r+0x188>
 800bb70:	427b      	negs	r3, r7
 800bb72:	930a      	str	r3, [sp, #40]	@ 0x28
 800bb74:	2300      	movs	r3, #0
 800bb76:	eba8 0807 	sub.w	r8, r8, r7
 800bb7a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bb7c:	e7c4      	b.n	800bb08 <_dtoa_r+0x1b0>
 800bb7e:	2300      	movs	r3, #0
 800bb80:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bb82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	dc35      	bgt.n	800bbf4 <_dtoa_r+0x29c>
 800bb88:	2301      	movs	r3, #1
 800bb8a:	9300      	str	r3, [sp, #0]
 800bb8c:	9307      	str	r3, [sp, #28]
 800bb8e:	461a      	mov	r2, r3
 800bb90:	920e      	str	r2, [sp, #56]	@ 0x38
 800bb92:	e00b      	b.n	800bbac <_dtoa_r+0x254>
 800bb94:	2301      	movs	r3, #1
 800bb96:	e7f3      	b.n	800bb80 <_dtoa_r+0x228>
 800bb98:	2300      	movs	r3, #0
 800bb9a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bb9c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bb9e:	18fb      	adds	r3, r7, r3
 800bba0:	9300      	str	r3, [sp, #0]
 800bba2:	3301      	adds	r3, #1
 800bba4:	2b01      	cmp	r3, #1
 800bba6:	9307      	str	r3, [sp, #28]
 800bba8:	bfb8      	it	lt
 800bbaa:	2301      	movlt	r3, #1
 800bbac:	f8db 001c 	ldr.w	r0, [fp, #28]
 800bbb0:	2100      	movs	r1, #0
 800bbb2:	2204      	movs	r2, #4
 800bbb4:	f102 0514 	add.w	r5, r2, #20
 800bbb8:	429d      	cmp	r5, r3
 800bbba:	d91f      	bls.n	800bbfc <_dtoa_r+0x2a4>
 800bbbc:	6041      	str	r1, [r0, #4]
 800bbbe:	4658      	mov	r0, fp
 800bbc0:	f000 fcd8 	bl	800c574 <_Balloc>
 800bbc4:	4682      	mov	sl, r0
 800bbc6:	2800      	cmp	r0, #0
 800bbc8:	d13c      	bne.n	800bc44 <_dtoa_r+0x2ec>
 800bbca:	4b1b      	ldr	r3, [pc, #108]	@ (800bc38 <_dtoa_r+0x2e0>)
 800bbcc:	4602      	mov	r2, r0
 800bbce:	f240 11af 	movw	r1, #431	@ 0x1af
 800bbd2:	e6d8      	b.n	800b986 <_dtoa_r+0x2e>
 800bbd4:	2301      	movs	r3, #1
 800bbd6:	e7e0      	b.n	800bb9a <_dtoa_r+0x242>
 800bbd8:	2401      	movs	r4, #1
 800bbda:	2300      	movs	r3, #0
 800bbdc:	9309      	str	r3, [sp, #36]	@ 0x24
 800bbde:	940b      	str	r4, [sp, #44]	@ 0x2c
 800bbe0:	f04f 33ff 	mov.w	r3, #4294967295
 800bbe4:	9300      	str	r3, [sp, #0]
 800bbe6:	9307      	str	r3, [sp, #28]
 800bbe8:	2200      	movs	r2, #0
 800bbea:	2312      	movs	r3, #18
 800bbec:	e7d0      	b.n	800bb90 <_dtoa_r+0x238>
 800bbee:	2301      	movs	r3, #1
 800bbf0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bbf2:	e7f5      	b.n	800bbe0 <_dtoa_r+0x288>
 800bbf4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bbf6:	9300      	str	r3, [sp, #0]
 800bbf8:	9307      	str	r3, [sp, #28]
 800bbfa:	e7d7      	b.n	800bbac <_dtoa_r+0x254>
 800bbfc:	3101      	adds	r1, #1
 800bbfe:	0052      	lsls	r2, r2, #1
 800bc00:	e7d8      	b.n	800bbb4 <_dtoa_r+0x25c>
 800bc02:	bf00      	nop
 800bc04:	f3af 8000 	nop.w
 800bc08:	636f4361 	.word	0x636f4361
 800bc0c:	3fd287a7 	.word	0x3fd287a7
 800bc10:	8b60c8b3 	.word	0x8b60c8b3
 800bc14:	3fc68a28 	.word	0x3fc68a28
 800bc18:	509f79fb 	.word	0x509f79fb
 800bc1c:	3fd34413 	.word	0x3fd34413
 800bc20:	0800d709 	.word	0x0800d709
 800bc24:	0800d720 	.word	0x0800d720
 800bc28:	7ff00000 	.word	0x7ff00000
 800bc2c:	0800d6d9 	.word	0x0800d6d9
 800bc30:	3ff80000 	.word	0x3ff80000
 800bc34:	0800d818 	.word	0x0800d818
 800bc38:	0800d778 	.word	0x0800d778
 800bc3c:	0800d705 	.word	0x0800d705
 800bc40:	0800d6d8 	.word	0x0800d6d8
 800bc44:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bc48:	6018      	str	r0, [r3, #0]
 800bc4a:	9b07      	ldr	r3, [sp, #28]
 800bc4c:	2b0e      	cmp	r3, #14
 800bc4e:	f200 80a4 	bhi.w	800bd9a <_dtoa_r+0x442>
 800bc52:	2c00      	cmp	r4, #0
 800bc54:	f000 80a1 	beq.w	800bd9a <_dtoa_r+0x442>
 800bc58:	2f00      	cmp	r7, #0
 800bc5a:	dd33      	ble.n	800bcc4 <_dtoa_r+0x36c>
 800bc5c:	4bad      	ldr	r3, [pc, #692]	@ (800bf14 <_dtoa_r+0x5bc>)
 800bc5e:	f007 020f 	and.w	r2, r7, #15
 800bc62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bc66:	ed93 7b00 	vldr	d7, [r3]
 800bc6a:	05f8      	lsls	r0, r7, #23
 800bc6c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800bc70:	ea4f 1427 	mov.w	r4, r7, asr #4
 800bc74:	d516      	bpl.n	800bca4 <_dtoa_r+0x34c>
 800bc76:	4ba8      	ldr	r3, [pc, #672]	@ (800bf18 <_dtoa_r+0x5c0>)
 800bc78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bc7c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bc80:	f7f4 fde4 	bl	800084c <__aeabi_ddiv>
 800bc84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bc88:	f004 040f 	and.w	r4, r4, #15
 800bc8c:	2603      	movs	r6, #3
 800bc8e:	4da2      	ldr	r5, [pc, #648]	@ (800bf18 <_dtoa_r+0x5c0>)
 800bc90:	b954      	cbnz	r4, 800bca8 <_dtoa_r+0x350>
 800bc92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bc96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc9a:	f7f4 fdd7 	bl	800084c <__aeabi_ddiv>
 800bc9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bca2:	e028      	b.n	800bcf6 <_dtoa_r+0x39e>
 800bca4:	2602      	movs	r6, #2
 800bca6:	e7f2      	b.n	800bc8e <_dtoa_r+0x336>
 800bca8:	07e1      	lsls	r1, r4, #31
 800bcaa:	d508      	bpl.n	800bcbe <_dtoa_r+0x366>
 800bcac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bcb0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bcb4:	f7f4 fca0 	bl	80005f8 <__aeabi_dmul>
 800bcb8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bcbc:	3601      	adds	r6, #1
 800bcbe:	1064      	asrs	r4, r4, #1
 800bcc0:	3508      	adds	r5, #8
 800bcc2:	e7e5      	b.n	800bc90 <_dtoa_r+0x338>
 800bcc4:	f000 80d2 	beq.w	800be6c <_dtoa_r+0x514>
 800bcc8:	427c      	negs	r4, r7
 800bcca:	4b92      	ldr	r3, [pc, #584]	@ (800bf14 <_dtoa_r+0x5bc>)
 800bccc:	4d92      	ldr	r5, [pc, #584]	@ (800bf18 <_dtoa_r+0x5c0>)
 800bcce:	f004 020f 	and.w	r2, r4, #15
 800bcd2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bcd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcda:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bcde:	f7f4 fc8b 	bl	80005f8 <__aeabi_dmul>
 800bce2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bce6:	1124      	asrs	r4, r4, #4
 800bce8:	2300      	movs	r3, #0
 800bcea:	2602      	movs	r6, #2
 800bcec:	2c00      	cmp	r4, #0
 800bcee:	f040 80b2 	bne.w	800be56 <_dtoa_r+0x4fe>
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d1d3      	bne.n	800bc9e <_dtoa_r+0x346>
 800bcf6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bcf8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	f000 80b7 	beq.w	800be70 <_dtoa_r+0x518>
 800bd02:	4b86      	ldr	r3, [pc, #536]	@ (800bf1c <_dtoa_r+0x5c4>)
 800bd04:	2200      	movs	r2, #0
 800bd06:	4620      	mov	r0, r4
 800bd08:	4629      	mov	r1, r5
 800bd0a:	f7f4 fee7 	bl	8000adc <__aeabi_dcmplt>
 800bd0e:	2800      	cmp	r0, #0
 800bd10:	f000 80ae 	beq.w	800be70 <_dtoa_r+0x518>
 800bd14:	9b07      	ldr	r3, [sp, #28]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	f000 80aa 	beq.w	800be70 <_dtoa_r+0x518>
 800bd1c:	9b00      	ldr	r3, [sp, #0]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	dd37      	ble.n	800bd92 <_dtoa_r+0x43a>
 800bd22:	1e7b      	subs	r3, r7, #1
 800bd24:	9304      	str	r3, [sp, #16]
 800bd26:	4620      	mov	r0, r4
 800bd28:	4b7d      	ldr	r3, [pc, #500]	@ (800bf20 <_dtoa_r+0x5c8>)
 800bd2a:	2200      	movs	r2, #0
 800bd2c:	4629      	mov	r1, r5
 800bd2e:	f7f4 fc63 	bl	80005f8 <__aeabi_dmul>
 800bd32:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bd36:	9c00      	ldr	r4, [sp, #0]
 800bd38:	3601      	adds	r6, #1
 800bd3a:	4630      	mov	r0, r6
 800bd3c:	f7f4 fbf2 	bl	8000524 <__aeabi_i2d>
 800bd40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bd44:	f7f4 fc58 	bl	80005f8 <__aeabi_dmul>
 800bd48:	4b76      	ldr	r3, [pc, #472]	@ (800bf24 <_dtoa_r+0x5cc>)
 800bd4a:	2200      	movs	r2, #0
 800bd4c:	f7f4 fa9e 	bl	800028c <__adddf3>
 800bd50:	4605      	mov	r5, r0
 800bd52:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800bd56:	2c00      	cmp	r4, #0
 800bd58:	f040 808d 	bne.w	800be76 <_dtoa_r+0x51e>
 800bd5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd60:	4b71      	ldr	r3, [pc, #452]	@ (800bf28 <_dtoa_r+0x5d0>)
 800bd62:	2200      	movs	r2, #0
 800bd64:	f7f4 fa90 	bl	8000288 <__aeabi_dsub>
 800bd68:	4602      	mov	r2, r0
 800bd6a:	460b      	mov	r3, r1
 800bd6c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bd70:	462a      	mov	r2, r5
 800bd72:	4633      	mov	r3, r6
 800bd74:	f7f4 fed0 	bl	8000b18 <__aeabi_dcmpgt>
 800bd78:	2800      	cmp	r0, #0
 800bd7a:	f040 828b 	bne.w	800c294 <_dtoa_r+0x93c>
 800bd7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd82:	462a      	mov	r2, r5
 800bd84:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800bd88:	f7f4 fea8 	bl	8000adc <__aeabi_dcmplt>
 800bd8c:	2800      	cmp	r0, #0
 800bd8e:	f040 8128 	bne.w	800bfe2 <_dtoa_r+0x68a>
 800bd92:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800bd96:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800bd9a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	f2c0 815a 	blt.w	800c056 <_dtoa_r+0x6fe>
 800bda2:	2f0e      	cmp	r7, #14
 800bda4:	f300 8157 	bgt.w	800c056 <_dtoa_r+0x6fe>
 800bda8:	4b5a      	ldr	r3, [pc, #360]	@ (800bf14 <_dtoa_r+0x5bc>)
 800bdaa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bdae:	ed93 7b00 	vldr	d7, [r3]
 800bdb2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	ed8d 7b00 	vstr	d7, [sp]
 800bdba:	da03      	bge.n	800bdc4 <_dtoa_r+0x46c>
 800bdbc:	9b07      	ldr	r3, [sp, #28]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	f340 8101 	ble.w	800bfc6 <_dtoa_r+0x66e>
 800bdc4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bdc8:	4656      	mov	r6, sl
 800bdca:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bdce:	4620      	mov	r0, r4
 800bdd0:	4629      	mov	r1, r5
 800bdd2:	f7f4 fd3b 	bl	800084c <__aeabi_ddiv>
 800bdd6:	f7f4 febf 	bl	8000b58 <__aeabi_d2iz>
 800bdda:	4680      	mov	r8, r0
 800bddc:	f7f4 fba2 	bl	8000524 <__aeabi_i2d>
 800bde0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bde4:	f7f4 fc08 	bl	80005f8 <__aeabi_dmul>
 800bde8:	4602      	mov	r2, r0
 800bdea:	460b      	mov	r3, r1
 800bdec:	4620      	mov	r0, r4
 800bdee:	4629      	mov	r1, r5
 800bdf0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800bdf4:	f7f4 fa48 	bl	8000288 <__aeabi_dsub>
 800bdf8:	f806 4b01 	strb.w	r4, [r6], #1
 800bdfc:	9d07      	ldr	r5, [sp, #28]
 800bdfe:	eba6 040a 	sub.w	r4, r6, sl
 800be02:	42a5      	cmp	r5, r4
 800be04:	4602      	mov	r2, r0
 800be06:	460b      	mov	r3, r1
 800be08:	f040 8117 	bne.w	800c03a <_dtoa_r+0x6e2>
 800be0c:	f7f4 fa3e 	bl	800028c <__adddf3>
 800be10:	e9dd 2300 	ldrd	r2, r3, [sp]
 800be14:	4604      	mov	r4, r0
 800be16:	460d      	mov	r5, r1
 800be18:	f7f4 fe7e 	bl	8000b18 <__aeabi_dcmpgt>
 800be1c:	2800      	cmp	r0, #0
 800be1e:	f040 80f9 	bne.w	800c014 <_dtoa_r+0x6bc>
 800be22:	e9dd 2300 	ldrd	r2, r3, [sp]
 800be26:	4620      	mov	r0, r4
 800be28:	4629      	mov	r1, r5
 800be2a:	f7f4 fe4d 	bl	8000ac8 <__aeabi_dcmpeq>
 800be2e:	b118      	cbz	r0, 800be38 <_dtoa_r+0x4e0>
 800be30:	f018 0f01 	tst.w	r8, #1
 800be34:	f040 80ee 	bne.w	800c014 <_dtoa_r+0x6bc>
 800be38:	4649      	mov	r1, r9
 800be3a:	4658      	mov	r0, fp
 800be3c:	f000 fbda 	bl	800c5f4 <_Bfree>
 800be40:	2300      	movs	r3, #0
 800be42:	7033      	strb	r3, [r6, #0]
 800be44:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800be46:	3701      	adds	r7, #1
 800be48:	601f      	str	r7, [r3, #0]
 800be4a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	f000 831d 	beq.w	800c48c <_dtoa_r+0xb34>
 800be52:	601e      	str	r6, [r3, #0]
 800be54:	e31a      	b.n	800c48c <_dtoa_r+0xb34>
 800be56:	07e2      	lsls	r2, r4, #31
 800be58:	d505      	bpl.n	800be66 <_dtoa_r+0x50e>
 800be5a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800be5e:	f7f4 fbcb 	bl	80005f8 <__aeabi_dmul>
 800be62:	3601      	adds	r6, #1
 800be64:	2301      	movs	r3, #1
 800be66:	1064      	asrs	r4, r4, #1
 800be68:	3508      	adds	r5, #8
 800be6a:	e73f      	b.n	800bcec <_dtoa_r+0x394>
 800be6c:	2602      	movs	r6, #2
 800be6e:	e742      	b.n	800bcf6 <_dtoa_r+0x39e>
 800be70:	9c07      	ldr	r4, [sp, #28]
 800be72:	9704      	str	r7, [sp, #16]
 800be74:	e761      	b.n	800bd3a <_dtoa_r+0x3e2>
 800be76:	4b27      	ldr	r3, [pc, #156]	@ (800bf14 <_dtoa_r+0x5bc>)
 800be78:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800be7a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800be7e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800be82:	4454      	add	r4, sl
 800be84:	2900      	cmp	r1, #0
 800be86:	d053      	beq.n	800bf30 <_dtoa_r+0x5d8>
 800be88:	4928      	ldr	r1, [pc, #160]	@ (800bf2c <_dtoa_r+0x5d4>)
 800be8a:	2000      	movs	r0, #0
 800be8c:	f7f4 fcde 	bl	800084c <__aeabi_ddiv>
 800be90:	4633      	mov	r3, r6
 800be92:	462a      	mov	r2, r5
 800be94:	f7f4 f9f8 	bl	8000288 <__aeabi_dsub>
 800be98:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800be9c:	4656      	mov	r6, sl
 800be9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bea2:	f7f4 fe59 	bl	8000b58 <__aeabi_d2iz>
 800bea6:	4605      	mov	r5, r0
 800bea8:	f7f4 fb3c 	bl	8000524 <__aeabi_i2d>
 800beac:	4602      	mov	r2, r0
 800beae:	460b      	mov	r3, r1
 800beb0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800beb4:	f7f4 f9e8 	bl	8000288 <__aeabi_dsub>
 800beb8:	3530      	adds	r5, #48	@ 0x30
 800beba:	4602      	mov	r2, r0
 800bebc:	460b      	mov	r3, r1
 800bebe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bec2:	f806 5b01 	strb.w	r5, [r6], #1
 800bec6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800beca:	f7f4 fe07 	bl	8000adc <__aeabi_dcmplt>
 800bece:	2800      	cmp	r0, #0
 800bed0:	d171      	bne.n	800bfb6 <_dtoa_r+0x65e>
 800bed2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bed6:	4911      	ldr	r1, [pc, #68]	@ (800bf1c <_dtoa_r+0x5c4>)
 800bed8:	2000      	movs	r0, #0
 800beda:	f7f4 f9d5 	bl	8000288 <__aeabi_dsub>
 800bede:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bee2:	f7f4 fdfb 	bl	8000adc <__aeabi_dcmplt>
 800bee6:	2800      	cmp	r0, #0
 800bee8:	f040 8095 	bne.w	800c016 <_dtoa_r+0x6be>
 800beec:	42a6      	cmp	r6, r4
 800beee:	f43f af50 	beq.w	800bd92 <_dtoa_r+0x43a>
 800bef2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800bef6:	4b0a      	ldr	r3, [pc, #40]	@ (800bf20 <_dtoa_r+0x5c8>)
 800bef8:	2200      	movs	r2, #0
 800befa:	f7f4 fb7d 	bl	80005f8 <__aeabi_dmul>
 800befe:	4b08      	ldr	r3, [pc, #32]	@ (800bf20 <_dtoa_r+0x5c8>)
 800bf00:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bf04:	2200      	movs	r2, #0
 800bf06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf0a:	f7f4 fb75 	bl	80005f8 <__aeabi_dmul>
 800bf0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bf12:	e7c4      	b.n	800be9e <_dtoa_r+0x546>
 800bf14:	0800d818 	.word	0x0800d818
 800bf18:	0800d7f0 	.word	0x0800d7f0
 800bf1c:	3ff00000 	.word	0x3ff00000
 800bf20:	40240000 	.word	0x40240000
 800bf24:	401c0000 	.word	0x401c0000
 800bf28:	40140000 	.word	0x40140000
 800bf2c:	3fe00000 	.word	0x3fe00000
 800bf30:	4631      	mov	r1, r6
 800bf32:	4628      	mov	r0, r5
 800bf34:	f7f4 fb60 	bl	80005f8 <__aeabi_dmul>
 800bf38:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bf3c:	9415      	str	r4, [sp, #84]	@ 0x54
 800bf3e:	4656      	mov	r6, sl
 800bf40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf44:	f7f4 fe08 	bl	8000b58 <__aeabi_d2iz>
 800bf48:	4605      	mov	r5, r0
 800bf4a:	f7f4 faeb 	bl	8000524 <__aeabi_i2d>
 800bf4e:	4602      	mov	r2, r0
 800bf50:	460b      	mov	r3, r1
 800bf52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf56:	f7f4 f997 	bl	8000288 <__aeabi_dsub>
 800bf5a:	3530      	adds	r5, #48	@ 0x30
 800bf5c:	f806 5b01 	strb.w	r5, [r6], #1
 800bf60:	4602      	mov	r2, r0
 800bf62:	460b      	mov	r3, r1
 800bf64:	42a6      	cmp	r6, r4
 800bf66:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bf6a:	f04f 0200 	mov.w	r2, #0
 800bf6e:	d124      	bne.n	800bfba <_dtoa_r+0x662>
 800bf70:	4bac      	ldr	r3, [pc, #688]	@ (800c224 <_dtoa_r+0x8cc>)
 800bf72:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800bf76:	f7f4 f989 	bl	800028c <__adddf3>
 800bf7a:	4602      	mov	r2, r0
 800bf7c:	460b      	mov	r3, r1
 800bf7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf82:	f7f4 fdc9 	bl	8000b18 <__aeabi_dcmpgt>
 800bf86:	2800      	cmp	r0, #0
 800bf88:	d145      	bne.n	800c016 <_dtoa_r+0x6be>
 800bf8a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bf8e:	49a5      	ldr	r1, [pc, #660]	@ (800c224 <_dtoa_r+0x8cc>)
 800bf90:	2000      	movs	r0, #0
 800bf92:	f7f4 f979 	bl	8000288 <__aeabi_dsub>
 800bf96:	4602      	mov	r2, r0
 800bf98:	460b      	mov	r3, r1
 800bf9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf9e:	f7f4 fd9d 	bl	8000adc <__aeabi_dcmplt>
 800bfa2:	2800      	cmp	r0, #0
 800bfa4:	f43f aef5 	beq.w	800bd92 <_dtoa_r+0x43a>
 800bfa8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800bfaa:	1e73      	subs	r3, r6, #1
 800bfac:	9315      	str	r3, [sp, #84]	@ 0x54
 800bfae:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bfb2:	2b30      	cmp	r3, #48	@ 0x30
 800bfb4:	d0f8      	beq.n	800bfa8 <_dtoa_r+0x650>
 800bfb6:	9f04      	ldr	r7, [sp, #16]
 800bfb8:	e73e      	b.n	800be38 <_dtoa_r+0x4e0>
 800bfba:	4b9b      	ldr	r3, [pc, #620]	@ (800c228 <_dtoa_r+0x8d0>)
 800bfbc:	f7f4 fb1c 	bl	80005f8 <__aeabi_dmul>
 800bfc0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bfc4:	e7bc      	b.n	800bf40 <_dtoa_r+0x5e8>
 800bfc6:	d10c      	bne.n	800bfe2 <_dtoa_r+0x68a>
 800bfc8:	4b98      	ldr	r3, [pc, #608]	@ (800c22c <_dtoa_r+0x8d4>)
 800bfca:	2200      	movs	r2, #0
 800bfcc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bfd0:	f7f4 fb12 	bl	80005f8 <__aeabi_dmul>
 800bfd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bfd8:	f7f4 fd94 	bl	8000b04 <__aeabi_dcmpge>
 800bfdc:	2800      	cmp	r0, #0
 800bfde:	f000 8157 	beq.w	800c290 <_dtoa_r+0x938>
 800bfe2:	2400      	movs	r4, #0
 800bfe4:	4625      	mov	r5, r4
 800bfe6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bfe8:	43db      	mvns	r3, r3
 800bfea:	9304      	str	r3, [sp, #16]
 800bfec:	4656      	mov	r6, sl
 800bfee:	2700      	movs	r7, #0
 800bff0:	4621      	mov	r1, r4
 800bff2:	4658      	mov	r0, fp
 800bff4:	f000 fafe 	bl	800c5f4 <_Bfree>
 800bff8:	2d00      	cmp	r5, #0
 800bffa:	d0dc      	beq.n	800bfb6 <_dtoa_r+0x65e>
 800bffc:	b12f      	cbz	r7, 800c00a <_dtoa_r+0x6b2>
 800bffe:	42af      	cmp	r7, r5
 800c000:	d003      	beq.n	800c00a <_dtoa_r+0x6b2>
 800c002:	4639      	mov	r1, r7
 800c004:	4658      	mov	r0, fp
 800c006:	f000 faf5 	bl	800c5f4 <_Bfree>
 800c00a:	4629      	mov	r1, r5
 800c00c:	4658      	mov	r0, fp
 800c00e:	f000 faf1 	bl	800c5f4 <_Bfree>
 800c012:	e7d0      	b.n	800bfb6 <_dtoa_r+0x65e>
 800c014:	9704      	str	r7, [sp, #16]
 800c016:	4633      	mov	r3, r6
 800c018:	461e      	mov	r6, r3
 800c01a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c01e:	2a39      	cmp	r2, #57	@ 0x39
 800c020:	d107      	bne.n	800c032 <_dtoa_r+0x6da>
 800c022:	459a      	cmp	sl, r3
 800c024:	d1f8      	bne.n	800c018 <_dtoa_r+0x6c0>
 800c026:	9a04      	ldr	r2, [sp, #16]
 800c028:	3201      	adds	r2, #1
 800c02a:	9204      	str	r2, [sp, #16]
 800c02c:	2230      	movs	r2, #48	@ 0x30
 800c02e:	f88a 2000 	strb.w	r2, [sl]
 800c032:	781a      	ldrb	r2, [r3, #0]
 800c034:	3201      	adds	r2, #1
 800c036:	701a      	strb	r2, [r3, #0]
 800c038:	e7bd      	b.n	800bfb6 <_dtoa_r+0x65e>
 800c03a:	4b7b      	ldr	r3, [pc, #492]	@ (800c228 <_dtoa_r+0x8d0>)
 800c03c:	2200      	movs	r2, #0
 800c03e:	f7f4 fadb 	bl	80005f8 <__aeabi_dmul>
 800c042:	2200      	movs	r2, #0
 800c044:	2300      	movs	r3, #0
 800c046:	4604      	mov	r4, r0
 800c048:	460d      	mov	r5, r1
 800c04a:	f7f4 fd3d 	bl	8000ac8 <__aeabi_dcmpeq>
 800c04e:	2800      	cmp	r0, #0
 800c050:	f43f aebb 	beq.w	800bdca <_dtoa_r+0x472>
 800c054:	e6f0      	b.n	800be38 <_dtoa_r+0x4e0>
 800c056:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c058:	2a00      	cmp	r2, #0
 800c05a:	f000 80db 	beq.w	800c214 <_dtoa_r+0x8bc>
 800c05e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c060:	2a01      	cmp	r2, #1
 800c062:	f300 80bf 	bgt.w	800c1e4 <_dtoa_r+0x88c>
 800c066:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c068:	2a00      	cmp	r2, #0
 800c06a:	f000 80b7 	beq.w	800c1dc <_dtoa_r+0x884>
 800c06e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c072:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c074:	4646      	mov	r6, r8
 800c076:	9a08      	ldr	r2, [sp, #32]
 800c078:	2101      	movs	r1, #1
 800c07a:	441a      	add	r2, r3
 800c07c:	4658      	mov	r0, fp
 800c07e:	4498      	add	r8, r3
 800c080:	9208      	str	r2, [sp, #32]
 800c082:	f000 fb6b 	bl	800c75c <__i2b>
 800c086:	4605      	mov	r5, r0
 800c088:	b15e      	cbz	r6, 800c0a2 <_dtoa_r+0x74a>
 800c08a:	9b08      	ldr	r3, [sp, #32]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	dd08      	ble.n	800c0a2 <_dtoa_r+0x74a>
 800c090:	42b3      	cmp	r3, r6
 800c092:	9a08      	ldr	r2, [sp, #32]
 800c094:	bfa8      	it	ge
 800c096:	4633      	movge	r3, r6
 800c098:	eba8 0803 	sub.w	r8, r8, r3
 800c09c:	1af6      	subs	r6, r6, r3
 800c09e:	1ad3      	subs	r3, r2, r3
 800c0a0:	9308      	str	r3, [sp, #32]
 800c0a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c0a4:	b1f3      	cbz	r3, 800c0e4 <_dtoa_r+0x78c>
 800c0a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	f000 80b7 	beq.w	800c21c <_dtoa_r+0x8c4>
 800c0ae:	b18c      	cbz	r4, 800c0d4 <_dtoa_r+0x77c>
 800c0b0:	4629      	mov	r1, r5
 800c0b2:	4622      	mov	r2, r4
 800c0b4:	4658      	mov	r0, fp
 800c0b6:	f000 fc11 	bl	800c8dc <__pow5mult>
 800c0ba:	464a      	mov	r2, r9
 800c0bc:	4601      	mov	r1, r0
 800c0be:	4605      	mov	r5, r0
 800c0c0:	4658      	mov	r0, fp
 800c0c2:	f000 fb61 	bl	800c788 <__multiply>
 800c0c6:	4649      	mov	r1, r9
 800c0c8:	9004      	str	r0, [sp, #16]
 800c0ca:	4658      	mov	r0, fp
 800c0cc:	f000 fa92 	bl	800c5f4 <_Bfree>
 800c0d0:	9b04      	ldr	r3, [sp, #16]
 800c0d2:	4699      	mov	r9, r3
 800c0d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c0d6:	1b1a      	subs	r2, r3, r4
 800c0d8:	d004      	beq.n	800c0e4 <_dtoa_r+0x78c>
 800c0da:	4649      	mov	r1, r9
 800c0dc:	4658      	mov	r0, fp
 800c0de:	f000 fbfd 	bl	800c8dc <__pow5mult>
 800c0e2:	4681      	mov	r9, r0
 800c0e4:	2101      	movs	r1, #1
 800c0e6:	4658      	mov	r0, fp
 800c0e8:	f000 fb38 	bl	800c75c <__i2b>
 800c0ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c0ee:	4604      	mov	r4, r0
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	f000 81cf 	beq.w	800c494 <_dtoa_r+0xb3c>
 800c0f6:	461a      	mov	r2, r3
 800c0f8:	4601      	mov	r1, r0
 800c0fa:	4658      	mov	r0, fp
 800c0fc:	f000 fbee 	bl	800c8dc <__pow5mult>
 800c100:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c102:	2b01      	cmp	r3, #1
 800c104:	4604      	mov	r4, r0
 800c106:	f300 8095 	bgt.w	800c234 <_dtoa_r+0x8dc>
 800c10a:	9b02      	ldr	r3, [sp, #8]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	f040 8087 	bne.w	800c220 <_dtoa_r+0x8c8>
 800c112:	9b03      	ldr	r3, [sp, #12]
 800c114:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c118:	2b00      	cmp	r3, #0
 800c11a:	f040 8089 	bne.w	800c230 <_dtoa_r+0x8d8>
 800c11e:	9b03      	ldr	r3, [sp, #12]
 800c120:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c124:	0d1b      	lsrs	r3, r3, #20
 800c126:	051b      	lsls	r3, r3, #20
 800c128:	b12b      	cbz	r3, 800c136 <_dtoa_r+0x7de>
 800c12a:	9b08      	ldr	r3, [sp, #32]
 800c12c:	3301      	adds	r3, #1
 800c12e:	9308      	str	r3, [sp, #32]
 800c130:	f108 0801 	add.w	r8, r8, #1
 800c134:	2301      	movs	r3, #1
 800c136:	930a      	str	r3, [sp, #40]	@ 0x28
 800c138:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	f000 81b0 	beq.w	800c4a0 <_dtoa_r+0xb48>
 800c140:	6923      	ldr	r3, [r4, #16]
 800c142:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c146:	6918      	ldr	r0, [r3, #16]
 800c148:	f000 fabc 	bl	800c6c4 <__hi0bits>
 800c14c:	f1c0 0020 	rsb	r0, r0, #32
 800c150:	9b08      	ldr	r3, [sp, #32]
 800c152:	4418      	add	r0, r3
 800c154:	f010 001f 	ands.w	r0, r0, #31
 800c158:	d077      	beq.n	800c24a <_dtoa_r+0x8f2>
 800c15a:	f1c0 0320 	rsb	r3, r0, #32
 800c15e:	2b04      	cmp	r3, #4
 800c160:	dd6b      	ble.n	800c23a <_dtoa_r+0x8e2>
 800c162:	9b08      	ldr	r3, [sp, #32]
 800c164:	f1c0 001c 	rsb	r0, r0, #28
 800c168:	4403      	add	r3, r0
 800c16a:	4480      	add	r8, r0
 800c16c:	4406      	add	r6, r0
 800c16e:	9308      	str	r3, [sp, #32]
 800c170:	f1b8 0f00 	cmp.w	r8, #0
 800c174:	dd05      	ble.n	800c182 <_dtoa_r+0x82a>
 800c176:	4649      	mov	r1, r9
 800c178:	4642      	mov	r2, r8
 800c17a:	4658      	mov	r0, fp
 800c17c:	f000 fc08 	bl	800c990 <__lshift>
 800c180:	4681      	mov	r9, r0
 800c182:	9b08      	ldr	r3, [sp, #32]
 800c184:	2b00      	cmp	r3, #0
 800c186:	dd05      	ble.n	800c194 <_dtoa_r+0x83c>
 800c188:	4621      	mov	r1, r4
 800c18a:	461a      	mov	r2, r3
 800c18c:	4658      	mov	r0, fp
 800c18e:	f000 fbff 	bl	800c990 <__lshift>
 800c192:	4604      	mov	r4, r0
 800c194:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c196:	2b00      	cmp	r3, #0
 800c198:	d059      	beq.n	800c24e <_dtoa_r+0x8f6>
 800c19a:	4621      	mov	r1, r4
 800c19c:	4648      	mov	r0, r9
 800c19e:	f000 fc63 	bl	800ca68 <__mcmp>
 800c1a2:	2800      	cmp	r0, #0
 800c1a4:	da53      	bge.n	800c24e <_dtoa_r+0x8f6>
 800c1a6:	1e7b      	subs	r3, r7, #1
 800c1a8:	9304      	str	r3, [sp, #16]
 800c1aa:	4649      	mov	r1, r9
 800c1ac:	2300      	movs	r3, #0
 800c1ae:	220a      	movs	r2, #10
 800c1b0:	4658      	mov	r0, fp
 800c1b2:	f000 fa41 	bl	800c638 <__multadd>
 800c1b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c1b8:	4681      	mov	r9, r0
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	f000 8172 	beq.w	800c4a4 <_dtoa_r+0xb4c>
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	4629      	mov	r1, r5
 800c1c4:	220a      	movs	r2, #10
 800c1c6:	4658      	mov	r0, fp
 800c1c8:	f000 fa36 	bl	800c638 <__multadd>
 800c1cc:	9b00      	ldr	r3, [sp, #0]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	4605      	mov	r5, r0
 800c1d2:	dc67      	bgt.n	800c2a4 <_dtoa_r+0x94c>
 800c1d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c1d6:	2b02      	cmp	r3, #2
 800c1d8:	dc41      	bgt.n	800c25e <_dtoa_r+0x906>
 800c1da:	e063      	b.n	800c2a4 <_dtoa_r+0x94c>
 800c1dc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c1de:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c1e2:	e746      	b.n	800c072 <_dtoa_r+0x71a>
 800c1e4:	9b07      	ldr	r3, [sp, #28]
 800c1e6:	1e5c      	subs	r4, r3, #1
 800c1e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c1ea:	42a3      	cmp	r3, r4
 800c1ec:	bfbf      	itttt	lt
 800c1ee:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c1f0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800c1f2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c1f4:	1ae3      	sublt	r3, r4, r3
 800c1f6:	bfb4      	ite	lt
 800c1f8:	18d2      	addlt	r2, r2, r3
 800c1fa:	1b1c      	subge	r4, r3, r4
 800c1fc:	9b07      	ldr	r3, [sp, #28]
 800c1fe:	bfbc      	itt	lt
 800c200:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800c202:	2400      	movlt	r4, #0
 800c204:	2b00      	cmp	r3, #0
 800c206:	bfb5      	itete	lt
 800c208:	eba8 0603 	sublt.w	r6, r8, r3
 800c20c:	9b07      	ldrge	r3, [sp, #28]
 800c20e:	2300      	movlt	r3, #0
 800c210:	4646      	movge	r6, r8
 800c212:	e730      	b.n	800c076 <_dtoa_r+0x71e>
 800c214:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c216:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c218:	4646      	mov	r6, r8
 800c21a:	e735      	b.n	800c088 <_dtoa_r+0x730>
 800c21c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c21e:	e75c      	b.n	800c0da <_dtoa_r+0x782>
 800c220:	2300      	movs	r3, #0
 800c222:	e788      	b.n	800c136 <_dtoa_r+0x7de>
 800c224:	3fe00000 	.word	0x3fe00000
 800c228:	40240000 	.word	0x40240000
 800c22c:	40140000 	.word	0x40140000
 800c230:	9b02      	ldr	r3, [sp, #8]
 800c232:	e780      	b.n	800c136 <_dtoa_r+0x7de>
 800c234:	2300      	movs	r3, #0
 800c236:	930a      	str	r3, [sp, #40]	@ 0x28
 800c238:	e782      	b.n	800c140 <_dtoa_r+0x7e8>
 800c23a:	d099      	beq.n	800c170 <_dtoa_r+0x818>
 800c23c:	9a08      	ldr	r2, [sp, #32]
 800c23e:	331c      	adds	r3, #28
 800c240:	441a      	add	r2, r3
 800c242:	4498      	add	r8, r3
 800c244:	441e      	add	r6, r3
 800c246:	9208      	str	r2, [sp, #32]
 800c248:	e792      	b.n	800c170 <_dtoa_r+0x818>
 800c24a:	4603      	mov	r3, r0
 800c24c:	e7f6      	b.n	800c23c <_dtoa_r+0x8e4>
 800c24e:	9b07      	ldr	r3, [sp, #28]
 800c250:	9704      	str	r7, [sp, #16]
 800c252:	2b00      	cmp	r3, #0
 800c254:	dc20      	bgt.n	800c298 <_dtoa_r+0x940>
 800c256:	9300      	str	r3, [sp, #0]
 800c258:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c25a:	2b02      	cmp	r3, #2
 800c25c:	dd1e      	ble.n	800c29c <_dtoa_r+0x944>
 800c25e:	9b00      	ldr	r3, [sp, #0]
 800c260:	2b00      	cmp	r3, #0
 800c262:	f47f aec0 	bne.w	800bfe6 <_dtoa_r+0x68e>
 800c266:	4621      	mov	r1, r4
 800c268:	2205      	movs	r2, #5
 800c26a:	4658      	mov	r0, fp
 800c26c:	f000 f9e4 	bl	800c638 <__multadd>
 800c270:	4601      	mov	r1, r0
 800c272:	4604      	mov	r4, r0
 800c274:	4648      	mov	r0, r9
 800c276:	f000 fbf7 	bl	800ca68 <__mcmp>
 800c27a:	2800      	cmp	r0, #0
 800c27c:	f77f aeb3 	ble.w	800bfe6 <_dtoa_r+0x68e>
 800c280:	4656      	mov	r6, sl
 800c282:	2331      	movs	r3, #49	@ 0x31
 800c284:	f806 3b01 	strb.w	r3, [r6], #1
 800c288:	9b04      	ldr	r3, [sp, #16]
 800c28a:	3301      	adds	r3, #1
 800c28c:	9304      	str	r3, [sp, #16]
 800c28e:	e6ae      	b.n	800bfee <_dtoa_r+0x696>
 800c290:	9c07      	ldr	r4, [sp, #28]
 800c292:	9704      	str	r7, [sp, #16]
 800c294:	4625      	mov	r5, r4
 800c296:	e7f3      	b.n	800c280 <_dtoa_r+0x928>
 800c298:	9b07      	ldr	r3, [sp, #28]
 800c29a:	9300      	str	r3, [sp, #0]
 800c29c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	f000 8104 	beq.w	800c4ac <_dtoa_r+0xb54>
 800c2a4:	2e00      	cmp	r6, #0
 800c2a6:	dd05      	ble.n	800c2b4 <_dtoa_r+0x95c>
 800c2a8:	4629      	mov	r1, r5
 800c2aa:	4632      	mov	r2, r6
 800c2ac:	4658      	mov	r0, fp
 800c2ae:	f000 fb6f 	bl	800c990 <__lshift>
 800c2b2:	4605      	mov	r5, r0
 800c2b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d05a      	beq.n	800c370 <_dtoa_r+0xa18>
 800c2ba:	6869      	ldr	r1, [r5, #4]
 800c2bc:	4658      	mov	r0, fp
 800c2be:	f000 f959 	bl	800c574 <_Balloc>
 800c2c2:	4606      	mov	r6, r0
 800c2c4:	b928      	cbnz	r0, 800c2d2 <_dtoa_r+0x97a>
 800c2c6:	4b84      	ldr	r3, [pc, #528]	@ (800c4d8 <_dtoa_r+0xb80>)
 800c2c8:	4602      	mov	r2, r0
 800c2ca:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c2ce:	f7ff bb5a 	b.w	800b986 <_dtoa_r+0x2e>
 800c2d2:	692a      	ldr	r2, [r5, #16]
 800c2d4:	3202      	adds	r2, #2
 800c2d6:	0092      	lsls	r2, r2, #2
 800c2d8:	f105 010c 	add.w	r1, r5, #12
 800c2dc:	300c      	adds	r0, #12
 800c2de:	f001 f8af 	bl	800d440 <memcpy>
 800c2e2:	2201      	movs	r2, #1
 800c2e4:	4631      	mov	r1, r6
 800c2e6:	4658      	mov	r0, fp
 800c2e8:	f000 fb52 	bl	800c990 <__lshift>
 800c2ec:	f10a 0301 	add.w	r3, sl, #1
 800c2f0:	9307      	str	r3, [sp, #28]
 800c2f2:	9b00      	ldr	r3, [sp, #0]
 800c2f4:	4453      	add	r3, sl
 800c2f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c2f8:	9b02      	ldr	r3, [sp, #8]
 800c2fa:	f003 0301 	and.w	r3, r3, #1
 800c2fe:	462f      	mov	r7, r5
 800c300:	930a      	str	r3, [sp, #40]	@ 0x28
 800c302:	4605      	mov	r5, r0
 800c304:	9b07      	ldr	r3, [sp, #28]
 800c306:	4621      	mov	r1, r4
 800c308:	3b01      	subs	r3, #1
 800c30a:	4648      	mov	r0, r9
 800c30c:	9300      	str	r3, [sp, #0]
 800c30e:	f7ff fa9a 	bl	800b846 <quorem>
 800c312:	4639      	mov	r1, r7
 800c314:	9002      	str	r0, [sp, #8]
 800c316:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c31a:	4648      	mov	r0, r9
 800c31c:	f000 fba4 	bl	800ca68 <__mcmp>
 800c320:	462a      	mov	r2, r5
 800c322:	9008      	str	r0, [sp, #32]
 800c324:	4621      	mov	r1, r4
 800c326:	4658      	mov	r0, fp
 800c328:	f000 fbba 	bl	800caa0 <__mdiff>
 800c32c:	68c2      	ldr	r2, [r0, #12]
 800c32e:	4606      	mov	r6, r0
 800c330:	bb02      	cbnz	r2, 800c374 <_dtoa_r+0xa1c>
 800c332:	4601      	mov	r1, r0
 800c334:	4648      	mov	r0, r9
 800c336:	f000 fb97 	bl	800ca68 <__mcmp>
 800c33a:	4602      	mov	r2, r0
 800c33c:	4631      	mov	r1, r6
 800c33e:	4658      	mov	r0, fp
 800c340:	920e      	str	r2, [sp, #56]	@ 0x38
 800c342:	f000 f957 	bl	800c5f4 <_Bfree>
 800c346:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c348:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c34a:	9e07      	ldr	r6, [sp, #28]
 800c34c:	ea43 0102 	orr.w	r1, r3, r2
 800c350:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c352:	4319      	orrs	r1, r3
 800c354:	d110      	bne.n	800c378 <_dtoa_r+0xa20>
 800c356:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c35a:	d029      	beq.n	800c3b0 <_dtoa_r+0xa58>
 800c35c:	9b08      	ldr	r3, [sp, #32]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	dd02      	ble.n	800c368 <_dtoa_r+0xa10>
 800c362:	9b02      	ldr	r3, [sp, #8]
 800c364:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800c368:	9b00      	ldr	r3, [sp, #0]
 800c36a:	f883 8000 	strb.w	r8, [r3]
 800c36e:	e63f      	b.n	800bff0 <_dtoa_r+0x698>
 800c370:	4628      	mov	r0, r5
 800c372:	e7bb      	b.n	800c2ec <_dtoa_r+0x994>
 800c374:	2201      	movs	r2, #1
 800c376:	e7e1      	b.n	800c33c <_dtoa_r+0x9e4>
 800c378:	9b08      	ldr	r3, [sp, #32]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	db04      	blt.n	800c388 <_dtoa_r+0xa30>
 800c37e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c380:	430b      	orrs	r3, r1
 800c382:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c384:	430b      	orrs	r3, r1
 800c386:	d120      	bne.n	800c3ca <_dtoa_r+0xa72>
 800c388:	2a00      	cmp	r2, #0
 800c38a:	dded      	ble.n	800c368 <_dtoa_r+0xa10>
 800c38c:	4649      	mov	r1, r9
 800c38e:	2201      	movs	r2, #1
 800c390:	4658      	mov	r0, fp
 800c392:	f000 fafd 	bl	800c990 <__lshift>
 800c396:	4621      	mov	r1, r4
 800c398:	4681      	mov	r9, r0
 800c39a:	f000 fb65 	bl	800ca68 <__mcmp>
 800c39e:	2800      	cmp	r0, #0
 800c3a0:	dc03      	bgt.n	800c3aa <_dtoa_r+0xa52>
 800c3a2:	d1e1      	bne.n	800c368 <_dtoa_r+0xa10>
 800c3a4:	f018 0f01 	tst.w	r8, #1
 800c3a8:	d0de      	beq.n	800c368 <_dtoa_r+0xa10>
 800c3aa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c3ae:	d1d8      	bne.n	800c362 <_dtoa_r+0xa0a>
 800c3b0:	9a00      	ldr	r2, [sp, #0]
 800c3b2:	2339      	movs	r3, #57	@ 0x39
 800c3b4:	7013      	strb	r3, [r2, #0]
 800c3b6:	4633      	mov	r3, r6
 800c3b8:	461e      	mov	r6, r3
 800c3ba:	3b01      	subs	r3, #1
 800c3bc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c3c0:	2a39      	cmp	r2, #57	@ 0x39
 800c3c2:	d052      	beq.n	800c46a <_dtoa_r+0xb12>
 800c3c4:	3201      	adds	r2, #1
 800c3c6:	701a      	strb	r2, [r3, #0]
 800c3c8:	e612      	b.n	800bff0 <_dtoa_r+0x698>
 800c3ca:	2a00      	cmp	r2, #0
 800c3cc:	dd07      	ble.n	800c3de <_dtoa_r+0xa86>
 800c3ce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c3d2:	d0ed      	beq.n	800c3b0 <_dtoa_r+0xa58>
 800c3d4:	9a00      	ldr	r2, [sp, #0]
 800c3d6:	f108 0301 	add.w	r3, r8, #1
 800c3da:	7013      	strb	r3, [r2, #0]
 800c3dc:	e608      	b.n	800bff0 <_dtoa_r+0x698>
 800c3de:	9b07      	ldr	r3, [sp, #28]
 800c3e0:	9a07      	ldr	r2, [sp, #28]
 800c3e2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c3e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c3e8:	4293      	cmp	r3, r2
 800c3ea:	d028      	beq.n	800c43e <_dtoa_r+0xae6>
 800c3ec:	4649      	mov	r1, r9
 800c3ee:	2300      	movs	r3, #0
 800c3f0:	220a      	movs	r2, #10
 800c3f2:	4658      	mov	r0, fp
 800c3f4:	f000 f920 	bl	800c638 <__multadd>
 800c3f8:	42af      	cmp	r7, r5
 800c3fa:	4681      	mov	r9, r0
 800c3fc:	f04f 0300 	mov.w	r3, #0
 800c400:	f04f 020a 	mov.w	r2, #10
 800c404:	4639      	mov	r1, r7
 800c406:	4658      	mov	r0, fp
 800c408:	d107      	bne.n	800c41a <_dtoa_r+0xac2>
 800c40a:	f000 f915 	bl	800c638 <__multadd>
 800c40e:	4607      	mov	r7, r0
 800c410:	4605      	mov	r5, r0
 800c412:	9b07      	ldr	r3, [sp, #28]
 800c414:	3301      	adds	r3, #1
 800c416:	9307      	str	r3, [sp, #28]
 800c418:	e774      	b.n	800c304 <_dtoa_r+0x9ac>
 800c41a:	f000 f90d 	bl	800c638 <__multadd>
 800c41e:	4629      	mov	r1, r5
 800c420:	4607      	mov	r7, r0
 800c422:	2300      	movs	r3, #0
 800c424:	220a      	movs	r2, #10
 800c426:	4658      	mov	r0, fp
 800c428:	f000 f906 	bl	800c638 <__multadd>
 800c42c:	4605      	mov	r5, r0
 800c42e:	e7f0      	b.n	800c412 <_dtoa_r+0xaba>
 800c430:	9b00      	ldr	r3, [sp, #0]
 800c432:	2b00      	cmp	r3, #0
 800c434:	bfcc      	ite	gt
 800c436:	461e      	movgt	r6, r3
 800c438:	2601      	movle	r6, #1
 800c43a:	4456      	add	r6, sl
 800c43c:	2700      	movs	r7, #0
 800c43e:	4649      	mov	r1, r9
 800c440:	2201      	movs	r2, #1
 800c442:	4658      	mov	r0, fp
 800c444:	f000 faa4 	bl	800c990 <__lshift>
 800c448:	4621      	mov	r1, r4
 800c44a:	4681      	mov	r9, r0
 800c44c:	f000 fb0c 	bl	800ca68 <__mcmp>
 800c450:	2800      	cmp	r0, #0
 800c452:	dcb0      	bgt.n	800c3b6 <_dtoa_r+0xa5e>
 800c454:	d102      	bne.n	800c45c <_dtoa_r+0xb04>
 800c456:	f018 0f01 	tst.w	r8, #1
 800c45a:	d1ac      	bne.n	800c3b6 <_dtoa_r+0xa5e>
 800c45c:	4633      	mov	r3, r6
 800c45e:	461e      	mov	r6, r3
 800c460:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c464:	2a30      	cmp	r2, #48	@ 0x30
 800c466:	d0fa      	beq.n	800c45e <_dtoa_r+0xb06>
 800c468:	e5c2      	b.n	800bff0 <_dtoa_r+0x698>
 800c46a:	459a      	cmp	sl, r3
 800c46c:	d1a4      	bne.n	800c3b8 <_dtoa_r+0xa60>
 800c46e:	9b04      	ldr	r3, [sp, #16]
 800c470:	3301      	adds	r3, #1
 800c472:	9304      	str	r3, [sp, #16]
 800c474:	2331      	movs	r3, #49	@ 0x31
 800c476:	f88a 3000 	strb.w	r3, [sl]
 800c47a:	e5b9      	b.n	800bff0 <_dtoa_r+0x698>
 800c47c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c47e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800c4dc <_dtoa_r+0xb84>
 800c482:	b11b      	cbz	r3, 800c48c <_dtoa_r+0xb34>
 800c484:	f10a 0308 	add.w	r3, sl, #8
 800c488:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c48a:	6013      	str	r3, [r2, #0]
 800c48c:	4650      	mov	r0, sl
 800c48e:	b019      	add	sp, #100	@ 0x64
 800c490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c494:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c496:	2b01      	cmp	r3, #1
 800c498:	f77f ae37 	ble.w	800c10a <_dtoa_r+0x7b2>
 800c49c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c49e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c4a0:	2001      	movs	r0, #1
 800c4a2:	e655      	b.n	800c150 <_dtoa_r+0x7f8>
 800c4a4:	9b00      	ldr	r3, [sp, #0]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	f77f aed6 	ble.w	800c258 <_dtoa_r+0x900>
 800c4ac:	4656      	mov	r6, sl
 800c4ae:	4621      	mov	r1, r4
 800c4b0:	4648      	mov	r0, r9
 800c4b2:	f7ff f9c8 	bl	800b846 <quorem>
 800c4b6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c4ba:	f806 8b01 	strb.w	r8, [r6], #1
 800c4be:	9b00      	ldr	r3, [sp, #0]
 800c4c0:	eba6 020a 	sub.w	r2, r6, sl
 800c4c4:	4293      	cmp	r3, r2
 800c4c6:	ddb3      	ble.n	800c430 <_dtoa_r+0xad8>
 800c4c8:	4649      	mov	r1, r9
 800c4ca:	2300      	movs	r3, #0
 800c4cc:	220a      	movs	r2, #10
 800c4ce:	4658      	mov	r0, fp
 800c4d0:	f000 f8b2 	bl	800c638 <__multadd>
 800c4d4:	4681      	mov	r9, r0
 800c4d6:	e7ea      	b.n	800c4ae <_dtoa_r+0xb56>
 800c4d8:	0800d778 	.word	0x0800d778
 800c4dc:	0800d6fc 	.word	0x0800d6fc

0800c4e0 <_free_r>:
 800c4e0:	b538      	push	{r3, r4, r5, lr}
 800c4e2:	4605      	mov	r5, r0
 800c4e4:	2900      	cmp	r1, #0
 800c4e6:	d041      	beq.n	800c56c <_free_r+0x8c>
 800c4e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c4ec:	1f0c      	subs	r4, r1, #4
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	bfb8      	it	lt
 800c4f2:	18e4      	addlt	r4, r4, r3
 800c4f4:	f7fe fa8a 	bl	800aa0c <__malloc_lock>
 800c4f8:	4a1d      	ldr	r2, [pc, #116]	@ (800c570 <_free_r+0x90>)
 800c4fa:	6813      	ldr	r3, [r2, #0]
 800c4fc:	b933      	cbnz	r3, 800c50c <_free_r+0x2c>
 800c4fe:	6063      	str	r3, [r4, #4]
 800c500:	6014      	str	r4, [r2, #0]
 800c502:	4628      	mov	r0, r5
 800c504:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c508:	f7fe ba86 	b.w	800aa18 <__malloc_unlock>
 800c50c:	42a3      	cmp	r3, r4
 800c50e:	d908      	bls.n	800c522 <_free_r+0x42>
 800c510:	6820      	ldr	r0, [r4, #0]
 800c512:	1821      	adds	r1, r4, r0
 800c514:	428b      	cmp	r3, r1
 800c516:	bf01      	itttt	eq
 800c518:	6819      	ldreq	r1, [r3, #0]
 800c51a:	685b      	ldreq	r3, [r3, #4]
 800c51c:	1809      	addeq	r1, r1, r0
 800c51e:	6021      	streq	r1, [r4, #0]
 800c520:	e7ed      	b.n	800c4fe <_free_r+0x1e>
 800c522:	461a      	mov	r2, r3
 800c524:	685b      	ldr	r3, [r3, #4]
 800c526:	b10b      	cbz	r3, 800c52c <_free_r+0x4c>
 800c528:	42a3      	cmp	r3, r4
 800c52a:	d9fa      	bls.n	800c522 <_free_r+0x42>
 800c52c:	6811      	ldr	r1, [r2, #0]
 800c52e:	1850      	adds	r0, r2, r1
 800c530:	42a0      	cmp	r0, r4
 800c532:	d10b      	bne.n	800c54c <_free_r+0x6c>
 800c534:	6820      	ldr	r0, [r4, #0]
 800c536:	4401      	add	r1, r0
 800c538:	1850      	adds	r0, r2, r1
 800c53a:	4283      	cmp	r3, r0
 800c53c:	6011      	str	r1, [r2, #0]
 800c53e:	d1e0      	bne.n	800c502 <_free_r+0x22>
 800c540:	6818      	ldr	r0, [r3, #0]
 800c542:	685b      	ldr	r3, [r3, #4]
 800c544:	6053      	str	r3, [r2, #4]
 800c546:	4408      	add	r0, r1
 800c548:	6010      	str	r0, [r2, #0]
 800c54a:	e7da      	b.n	800c502 <_free_r+0x22>
 800c54c:	d902      	bls.n	800c554 <_free_r+0x74>
 800c54e:	230c      	movs	r3, #12
 800c550:	602b      	str	r3, [r5, #0]
 800c552:	e7d6      	b.n	800c502 <_free_r+0x22>
 800c554:	6820      	ldr	r0, [r4, #0]
 800c556:	1821      	adds	r1, r4, r0
 800c558:	428b      	cmp	r3, r1
 800c55a:	bf04      	itt	eq
 800c55c:	6819      	ldreq	r1, [r3, #0]
 800c55e:	685b      	ldreq	r3, [r3, #4]
 800c560:	6063      	str	r3, [r4, #4]
 800c562:	bf04      	itt	eq
 800c564:	1809      	addeq	r1, r1, r0
 800c566:	6021      	streq	r1, [r4, #0]
 800c568:	6054      	str	r4, [r2, #4]
 800c56a:	e7ca      	b.n	800c502 <_free_r+0x22>
 800c56c:	bd38      	pop	{r3, r4, r5, pc}
 800c56e:	bf00      	nop
 800c570:	20000aa8 	.word	0x20000aa8

0800c574 <_Balloc>:
 800c574:	b570      	push	{r4, r5, r6, lr}
 800c576:	69c6      	ldr	r6, [r0, #28]
 800c578:	4604      	mov	r4, r0
 800c57a:	460d      	mov	r5, r1
 800c57c:	b976      	cbnz	r6, 800c59c <_Balloc+0x28>
 800c57e:	2010      	movs	r0, #16
 800c580:	f7fe f992 	bl	800a8a8 <malloc>
 800c584:	4602      	mov	r2, r0
 800c586:	61e0      	str	r0, [r4, #28]
 800c588:	b920      	cbnz	r0, 800c594 <_Balloc+0x20>
 800c58a:	4b18      	ldr	r3, [pc, #96]	@ (800c5ec <_Balloc+0x78>)
 800c58c:	4818      	ldr	r0, [pc, #96]	@ (800c5f0 <_Balloc+0x7c>)
 800c58e:	216b      	movs	r1, #107	@ 0x6b
 800c590:	f000 ff64 	bl	800d45c <__assert_func>
 800c594:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c598:	6006      	str	r6, [r0, #0]
 800c59a:	60c6      	str	r6, [r0, #12]
 800c59c:	69e6      	ldr	r6, [r4, #28]
 800c59e:	68f3      	ldr	r3, [r6, #12]
 800c5a0:	b183      	cbz	r3, 800c5c4 <_Balloc+0x50>
 800c5a2:	69e3      	ldr	r3, [r4, #28]
 800c5a4:	68db      	ldr	r3, [r3, #12]
 800c5a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c5aa:	b9b8      	cbnz	r0, 800c5dc <_Balloc+0x68>
 800c5ac:	2101      	movs	r1, #1
 800c5ae:	fa01 f605 	lsl.w	r6, r1, r5
 800c5b2:	1d72      	adds	r2, r6, #5
 800c5b4:	0092      	lsls	r2, r2, #2
 800c5b6:	4620      	mov	r0, r4
 800c5b8:	f000 ff6e 	bl	800d498 <_calloc_r>
 800c5bc:	b160      	cbz	r0, 800c5d8 <_Balloc+0x64>
 800c5be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c5c2:	e00e      	b.n	800c5e2 <_Balloc+0x6e>
 800c5c4:	2221      	movs	r2, #33	@ 0x21
 800c5c6:	2104      	movs	r1, #4
 800c5c8:	4620      	mov	r0, r4
 800c5ca:	f000 ff65 	bl	800d498 <_calloc_r>
 800c5ce:	69e3      	ldr	r3, [r4, #28]
 800c5d0:	60f0      	str	r0, [r6, #12]
 800c5d2:	68db      	ldr	r3, [r3, #12]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d1e4      	bne.n	800c5a2 <_Balloc+0x2e>
 800c5d8:	2000      	movs	r0, #0
 800c5da:	bd70      	pop	{r4, r5, r6, pc}
 800c5dc:	6802      	ldr	r2, [r0, #0]
 800c5de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c5e8:	e7f7      	b.n	800c5da <_Balloc+0x66>
 800c5ea:	bf00      	nop
 800c5ec:	0800d709 	.word	0x0800d709
 800c5f0:	0800d789 	.word	0x0800d789

0800c5f4 <_Bfree>:
 800c5f4:	b570      	push	{r4, r5, r6, lr}
 800c5f6:	69c6      	ldr	r6, [r0, #28]
 800c5f8:	4605      	mov	r5, r0
 800c5fa:	460c      	mov	r4, r1
 800c5fc:	b976      	cbnz	r6, 800c61c <_Bfree+0x28>
 800c5fe:	2010      	movs	r0, #16
 800c600:	f7fe f952 	bl	800a8a8 <malloc>
 800c604:	4602      	mov	r2, r0
 800c606:	61e8      	str	r0, [r5, #28]
 800c608:	b920      	cbnz	r0, 800c614 <_Bfree+0x20>
 800c60a:	4b09      	ldr	r3, [pc, #36]	@ (800c630 <_Bfree+0x3c>)
 800c60c:	4809      	ldr	r0, [pc, #36]	@ (800c634 <_Bfree+0x40>)
 800c60e:	218f      	movs	r1, #143	@ 0x8f
 800c610:	f000 ff24 	bl	800d45c <__assert_func>
 800c614:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c618:	6006      	str	r6, [r0, #0]
 800c61a:	60c6      	str	r6, [r0, #12]
 800c61c:	b13c      	cbz	r4, 800c62e <_Bfree+0x3a>
 800c61e:	69eb      	ldr	r3, [r5, #28]
 800c620:	6862      	ldr	r2, [r4, #4]
 800c622:	68db      	ldr	r3, [r3, #12]
 800c624:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c628:	6021      	str	r1, [r4, #0]
 800c62a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c62e:	bd70      	pop	{r4, r5, r6, pc}
 800c630:	0800d709 	.word	0x0800d709
 800c634:	0800d789 	.word	0x0800d789

0800c638 <__multadd>:
 800c638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c63c:	690d      	ldr	r5, [r1, #16]
 800c63e:	4607      	mov	r7, r0
 800c640:	460c      	mov	r4, r1
 800c642:	461e      	mov	r6, r3
 800c644:	f101 0c14 	add.w	ip, r1, #20
 800c648:	2000      	movs	r0, #0
 800c64a:	f8dc 3000 	ldr.w	r3, [ip]
 800c64e:	b299      	uxth	r1, r3
 800c650:	fb02 6101 	mla	r1, r2, r1, r6
 800c654:	0c1e      	lsrs	r6, r3, #16
 800c656:	0c0b      	lsrs	r3, r1, #16
 800c658:	fb02 3306 	mla	r3, r2, r6, r3
 800c65c:	b289      	uxth	r1, r1
 800c65e:	3001      	adds	r0, #1
 800c660:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c664:	4285      	cmp	r5, r0
 800c666:	f84c 1b04 	str.w	r1, [ip], #4
 800c66a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c66e:	dcec      	bgt.n	800c64a <__multadd+0x12>
 800c670:	b30e      	cbz	r6, 800c6b6 <__multadd+0x7e>
 800c672:	68a3      	ldr	r3, [r4, #8]
 800c674:	42ab      	cmp	r3, r5
 800c676:	dc19      	bgt.n	800c6ac <__multadd+0x74>
 800c678:	6861      	ldr	r1, [r4, #4]
 800c67a:	4638      	mov	r0, r7
 800c67c:	3101      	adds	r1, #1
 800c67e:	f7ff ff79 	bl	800c574 <_Balloc>
 800c682:	4680      	mov	r8, r0
 800c684:	b928      	cbnz	r0, 800c692 <__multadd+0x5a>
 800c686:	4602      	mov	r2, r0
 800c688:	4b0c      	ldr	r3, [pc, #48]	@ (800c6bc <__multadd+0x84>)
 800c68a:	480d      	ldr	r0, [pc, #52]	@ (800c6c0 <__multadd+0x88>)
 800c68c:	21ba      	movs	r1, #186	@ 0xba
 800c68e:	f000 fee5 	bl	800d45c <__assert_func>
 800c692:	6922      	ldr	r2, [r4, #16]
 800c694:	3202      	adds	r2, #2
 800c696:	f104 010c 	add.w	r1, r4, #12
 800c69a:	0092      	lsls	r2, r2, #2
 800c69c:	300c      	adds	r0, #12
 800c69e:	f000 fecf 	bl	800d440 <memcpy>
 800c6a2:	4621      	mov	r1, r4
 800c6a4:	4638      	mov	r0, r7
 800c6a6:	f7ff ffa5 	bl	800c5f4 <_Bfree>
 800c6aa:	4644      	mov	r4, r8
 800c6ac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c6b0:	3501      	adds	r5, #1
 800c6b2:	615e      	str	r6, [r3, #20]
 800c6b4:	6125      	str	r5, [r4, #16]
 800c6b6:	4620      	mov	r0, r4
 800c6b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6bc:	0800d778 	.word	0x0800d778
 800c6c0:	0800d789 	.word	0x0800d789

0800c6c4 <__hi0bits>:
 800c6c4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c6c8:	4603      	mov	r3, r0
 800c6ca:	bf36      	itet	cc
 800c6cc:	0403      	lslcc	r3, r0, #16
 800c6ce:	2000      	movcs	r0, #0
 800c6d0:	2010      	movcc	r0, #16
 800c6d2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c6d6:	bf3c      	itt	cc
 800c6d8:	021b      	lslcc	r3, r3, #8
 800c6da:	3008      	addcc	r0, #8
 800c6dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c6e0:	bf3c      	itt	cc
 800c6e2:	011b      	lslcc	r3, r3, #4
 800c6e4:	3004      	addcc	r0, #4
 800c6e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c6ea:	bf3c      	itt	cc
 800c6ec:	009b      	lslcc	r3, r3, #2
 800c6ee:	3002      	addcc	r0, #2
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	db05      	blt.n	800c700 <__hi0bits+0x3c>
 800c6f4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c6f8:	f100 0001 	add.w	r0, r0, #1
 800c6fc:	bf08      	it	eq
 800c6fe:	2020      	moveq	r0, #32
 800c700:	4770      	bx	lr

0800c702 <__lo0bits>:
 800c702:	6803      	ldr	r3, [r0, #0]
 800c704:	4602      	mov	r2, r0
 800c706:	f013 0007 	ands.w	r0, r3, #7
 800c70a:	d00b      	beq.n	800c724 <__lo0bits+0x22>
 800c70c:	07d9      	lsls	r1, r3, #31
 800c70e:	d421      	bmi.n	800c754 <__lo0bits+0x52>
 800c710:	0798      	lsls	r0, r3, #30
 800c712:	bf49      	itett	mi
 800c714:	085b      	lsrmi	r3, r3, #1
 800c716:	089b      	lsrpl	r3, r3, #2
 800c718:	2001      	movmi	r0, #1
 800c71a:	6013      	strmi	r3, [r2, #0]
 800c71c:	bf5c      	itt	pl
 800c71e:	6013      	strpl	r3, [r2, #0]
 800c720:	2002      	movpl	r0, #2
 800c722:	4770      	bx	lr
 800c724:	b299      	uxth	r1, r3
 800c726:	b909      	cbnz	r1, 800c72c <__lo0bits+0x2a>
 800c728:	0c1b      	lsrs	r3, r3, #16
 800c72a:	2010      	movs	r0, #16
 800c72c:	b2d9      	uxtb	r1, r3
 800c72e:	b909      	cbnz	r1, 800c734 <__lo0bits+0x32>
 800c730:	3008      	adds	r0, #8
 800c732:	0a1b      	lsrs	r3, r3, #8
 800c734:	0719      	lsls	r1, r3, #28
 800c736:	bf04      	itt	eq
 800c738:	091b      	lsreq	r3, r3, #4
 800c73a:	3004      	addeq	r0, #4
 800c73c:	0799      	lsls	r1, r3, #30
 800c73e:	bf04      	itt	eq
 800c740:	089b      	lsreq	r3, r3, #2
 800c742:	3002      	addeq	r0, #2
 800c744:	07d9      	lsls	r1, r3, #31
 800c746:	d403      	bmi.n	800c750 <__lo0bits+0x4e>
 800c748:	085b      	lsrs	r3, r3, #1
 800c74a:	f100 0001 	add.w	r0, r0, #1
 800c74e:	d003      	beq.n	800c758 <__lo0bits+0x56>
 800c750:	6013      	str	r3, [r2, #0]
 800c752:	4770      	bx	lr
 800c754:	2000      	movs	r0, #0
 800c756:	4770      	bx	lr
 800c758:	2020      	movs	r0, #32
 800c75a:	4770      	bx	lr

0800c75c <__i2b>:
 800c75c:	b510      	push	{r4, lr}
 800c75e:	460c      	mov	r4, r1
 800c760:	2101      	movs	r1, #1
 800c762:	f7ff ff07 	bl	800c574 <_Balloc>
 800c766:	4602      	mov	r2, r0
 800c768:	b928      	cbnz	r0, 800c776 <__i2b+0x1a>
 800c76a:	4b05      	ldr	r3, [pc, #20]	@ (800c780 <__i2b+0x24>)
 800c76c:	4805      	ldr	r0, [pc, #20]	@ (800c784 <__i2b+0x28>)
 800c76e:	f240 1145 	movw	r1, #325	@ 0x145
 800c772:	f000 fe73 	bl	800d45c <__assert_func>
 800c776:	2301      	movs	r3, #1
 800c778:	6144      	str	r4, [r0, #20]
 800c77a:	6103      	str	r3, [r0, #16]
 800c77c:	bd10      	pop	{r4, pc}
 800c77e:	bf00      	nop
 800c780:	0800d778 	.word	0x0800d778
 800c784:	0800d789 	.word	0x0800d789

0800c788 <__multiply>:
 800c788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c78c:	4614      	mov	r4, r2
 800c78e:	690a      	ldr	r2, [r1, #16]
 800c790:	6923      	ldr	r3, [r4, #16]
 800c792:	429a      	cmp	r2, r3
 800c794:	bfa8      	it	ge
 800c796:	4623      	movge	r3, r4
 800c798:	460f      	mov	r7, r1
 800c79a:	bfa4      	itt	ge
 800c79c:	460c      	movge	r4, r1
 800c79e:	461f      	movge	r7, r3
 800c7a0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c7a4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c7a8:	68a3      	ldr	r3, [r4, #8]
 800c7aa:	6861      	ldr	r1, [r4, #4]
 800c7ac:	eb0a 0609 	add.w	r6, sl, r9
 800c7b0:	42b3      	cmp	r3, r6
 800c7b2:	b085      	sub	sp, #20
 800c7b4:	bfb8      	it	lt
 800c7b6:	3101      	addlt	r1, #1
 800c7b8:	f7ff fedc 	bl	800c574 <_Balloc>
 800c7bc:	b930      	cbnz	r0, 800c7cc <__multiply+0x44>
 800c7be:	4602      	mov	r2, r0
 800c7c0:	4b44      	ldr	r3, [pc, #272]	@ (800c8d4 <__multiply+0x14c>)
 800c7c2:	4845      	ldr	r0, [pc, #276]	@ (800c8d8 <__multiply+0x150>)
 800c7c4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c7c8:	f000 fe48 	bl	800d45c <__assert_func>
 800c7cc:	f100 0514 	add.w	r5, r0, #20
 800c7d0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c7d4:	462b      	mov	r3, r5
 800c7d6:	2200      	movs	r2, #0
 800c7d8:	4543      	cmp	r3, r8
 800c7da:	d321      	bcc.n	800c820 <__multiply+0x98>
 800c7dc:	f107 0114 	add.w	r1, r7, #20
 800c7e0:	f104 0214 	add.w	r2, r4, #20
 800c7e4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c7e8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c7ec:	9302      	str	r3, [sp, #8]
 800c7ee:	1b13      	subs	r3, r2, r4
 800c7f0:	3b15      	subs	r3, #21
 800c7f2:	f023 0303 	bic.w	r3, r3, #3
 800c7f6:	3304      	adds	r3, #4
 800c7f8:	f104 0715 	add.w	r7, r4, #21
 800c7fc:	42ba      	cmp	r2, r7
 800c7fe:	bf38      	it	cc
 800c800:	2304      	movcc	r3, #4
 800c802:	9301      	str	r3, [sp, #4]
 800c804:	9b02      	ldr	r3, [sp, #8]
 800c806:	9103      	str	r1, [sp, #12]
 800c808:	428b      	cmp	r3, r1
 800c80a:	d80c      	bhi.n	800c826 <__multiply+0x9e>
 800c80c:	2e00      	cmp	r6, #0
 800c80e:	dd03      	ble.n	800c818 <__multiply+0x90>
 800c810:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c814:	2b00      	cmp	r3, #0
 800c816:	d05b      	beq.n	800c8d0 <__multiply+0x148>
 800c818:	6106      	str	r6, [r0, #16]
 800c81a:	b005      	add	sp, #20
 800c81c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c820:	f843 2b04 	str.w	r2, [r3], #4
 800c824:	e7d8      	b.n	800c7d8 <__multiply+0x50>
 800c826:	f8b1 a000 	ldrh.w	sl, [r1]
 800c82a:	f1ba 0f00 	cmp.w	sl, #0
 800c82e:	d024      	beq.n	800c87a <__multiply+0xf2>
 800c830:	f104 0e14 	add.w	lr, r4, #20
 800c834:	46a9      	mov	r9, r5
 800c836:	f04f 0c00 	mov.w	ip, #0
 800c83a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c83e:	f8d9 3000 	ldr.w	r3, [r9]
 800c842:	fa1f fb87 	uxth.w	fp, r7
 800c846:	b29b      	uxth	r3, r3
 800c848:	fb0a 330b 	mla	r3, sl, fp, r3
 800c84c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c850:	f8d9 7000 	ldr.w	r7, [r9]
 800c854:	4463      	add	r3, ip
 800c856:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c85a:	fb0a c70b 	mla	r7, sl, fp, ip
 800c85e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c862:	b29b      	uxth	r3, r3
 800c864:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c868:	4572      	cmp	r2, lr
 800c86a:	f849 3b04 	str.w	r3, [r9], #4
 800c86e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c872:	d8e2      	bhi.n	800c83a <__multiply+0xb2>
 800c874:	9b01      	ldr	r3, [sp, #4]
 800c876:	f845 c003 	str.w	ip, [r5, r3]
 800c87a:	9b03      	ldr	r3, [sp, #12]
 800c87c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c880:	3104      	adds	r1, #4
 800c882:	f1b9 0f00 	cmp.w	r9, #0
 800c886:	d021      	beq.n	800c8cc <__multiply+0x144>
 800c888:	682b      	ldr	r3, [r5, #0]
 800c88a:	f104 0c14 	add.w	ip, r4, #20
 800c88e:	46ae      	mov	lr, r5
 800c890:	f04f 0a00 	mov.w	sl, #0
 800c894:	f8bc b000 	ldrh.w	fp, [ip]
 800c898:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c89c:	fb09 770b 	mla	r7, r9, fp, r7
 800c8a0:	4457      	add	r7, sl
 800c8a2:	b29b      	uxth	r3, r3
 800c8a4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c8a8:	f84e 3b04 	str.w	r3, [lr], #4
 800c8ac:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c8b0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c8b4:	f8be 3000 	ldrh.w	r3, [lr]
 800c8b8:	fb09 330a 	mla	r3, r9, sl, r3
 800c8bc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c8c0:	4562      	cmp	r2, ip
 800c8c2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c8c6:	d8e5      	bhi.n	800c894 <__multiply+0x10c>
 800c8c8:	9f01      	ldr	r7, [sp, #4]
 800c8ca:	51eb      	str	r3, [r5, r7]
 800c8cc:	3504      	adds	r5, #4
 800c8ce:	e799      	b.n	800c804 <__multiply+0x7c>
 800c8d0:	3e01      	subs	r6, #1
 800c8d2:	e79b      	b.n	800c80c <__multiply+0x84>
 800c8d4:	0800d778 	.word	0x0800d778
 800c8d8:	0800d789 	.word	0x0800d789

0800c8dc <__pow5mult>:
 800c8dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c8e0:	4615      	mov	r5, r2
 800c8e2:	f012 0203 	ands.w	r2, r2, #3
 800c8e6:	4607      	mov	r7, r0
 800c8e8:	460e      	mov	r6, r1
 800c8ea:	d007      	beq.n	800c8fc <__pow5mult+0x20>
 800c8ec:	4c25      	ldr	r4, [pc, #148]	@ (800c984 <__pow5mult+0xa8>)
 800c8ee:	3a01      	subs	r2, #1
 800c8f0:	2300      	movs	r3, #0
 800c8f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c8f6:	f7ff fe9f 	bl	800c638 <__multadd>
 800c8fa:	4606      	mov	r6, r0
 800c8fc:	10ad      	asrs	r5, r5, #2
 800c8fe:	d03d      	beq.n	800c97c <__pow5mult+0xa0>
 800c900:	69fc      	ldr	r4, [r7, #28]
 800c902:	b97c      	cbnz	r4, 800c924 <__pow5mult+0x48>
 800c904:	2010      	movs	r0, #16
 800c906:	f7fd ffcf 	bl	800a8a8 <malloc>
 800c90a:	4602      	mov	r2, r0
 800c90c:	61f8      	str	r0, [r7, #28]
 800c90e:	b928      	cbnz	r0, 800c91c <__pow5mult+0x40>
 800c910:	4b1d      	ldr	r3, [pc, #116]	@ (800c988 <__pow5mult+0xac>)
 800c912:	481e      	ldr	r0, [pc, #120]	@ (800c98c <__pow5mult+0xb0>)
 800c914:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c918:	f000 fda0 	bl	800d45c <__assert_func>
 800c91c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c920:	6004      	str	r4, [r0, #0]
 800c922:	60c4      	str	r4, [r0, #12]
 800c924:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c928:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c92c:	b94c      	cbnz	r4, 800c942 <__pow5mult+0x66>
 800c92e:	f240 2171 	movw	r1, #625	@ 0x271
 800c932:	4638      	mov	r0, r7
 800c934:	f7ff ff12 	bl	800c75c <__i2b>
 800c938:	2300      	movs	r3, #0
 800c93a:	f8c8 0008 	str.w	r0, [r8, #8]
 800c93e:	4604      	mov	r4, r0
 800c940:	6003      	str	r3, [r0, #0]
 800c942:	f04f 0900 	mov.w	r9, #0
 800c946:	07eb      	lsls	r3, r5, #31
 800c948:	d50a      	bpl.n	800c960 <__pow5mult+0x84>
 800c94a:	4631      	mov	r1, r6
 800c94c:	4622      	mov	r2, r4
 800c94e:	4638      	mov	r0, r7
 800c950:	f7ff ff1a 	bl	800c788 <__multiply>
 800c954:	4631      	mov	r1, r6
 800c956:	4680      	mov	r8, r0
 800c958:	4638      	mov	r0, r7
 800c95a:	f7ff fe4b 	bl	800c5f4 <_Bfree>
 800c95e:	4646      	mov	r6, r8
 800c960:	106d      	asrs	r5, r5, #1
 800c962:	d00b      	beq.n	800c97c <__pow5mult+0xa0>
 800c964:	6820      	ldr	r0, [r4, #0]
 800c966:	b938      	cbnz	r0, 800c978 <__pow5mult+0x9c>
 800c968:	4622      	mov	r2, r4
 800c96a:	4621      	mov	r1, r4
 800c96c:	4638      	mov	r0, r7
 800c96e:	f7ff ff0b 	bl	800c788 <__multiply>
 800c972:	6020      	str	r0, [r4, #0]
 800c974:	f8c0 9000 	str.w	r9, [r0]
 800c978:	4604      	mov	r4, r0
 800c97a:	e7e4      	b.n	800c946 <__pow5mult+0x6a>
 800c97c:	4630      	mov	r0, r6
 800c97e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c982:	bf00      	nop
 800c984:	0800d7e4 	.word	0x0800d7e4
 800c988:	0800d709 	.word	0x0800d709
 800c98c:	0800d789 	.word	0x0800d789

0800c990 <__lshift>:
 800c990:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c994:	460c      	mov	r4, r1
 800c996:	6849      	ldr	r1, [r1, #4]
 800c998:	6923      	ldr	r3, [r4, #16]
 800c99a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c99e:	68a3      	ldr	r3, [r4, #8]
 800c9a0:	4607      	mov	r7, r0
 800c9a2:	4691      	mov	r9, r2
 800c9a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c9a8:	f108 0601 	add.w	r6, r8, #1
 800c9ac:	42b3      	cmp	r3, r6
 800c9ae:	db0b      	blt.n	800c9c8 <__lshift+0x38>
 800c9b0:	4638      	mov	r0, r7
 800c9b2:	f7ff fddf 	bl	800c574 <_Balloc>
 800c9b6:	4605      	mov	r5, r0
 800c9b8:	b948      	cbnz	r0, 800c9ce <__lshift+0x3e>
 800c9ba:	4602      	mov	r2, r0
 800c9bc:	4b28      	ldr	r3, [pc, #160]	@ (800ca60 <__lshift+0xd0>)
 800c9be:	4829      	ldr	r0, [pc, #164]	@ (800ca64 <__lshift+0xd4>)
 800c9c0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c9c4:	f000 fd4a 	bl	800d45c <__assert_func>
 800c9c8:	3101      	adds	r1, #1
 800c9ca:	005b      	lsls	r3, r3, #1
 800c9cc:	e7ee      	b.n	800c9ac <__lshift+0x1c>
 800c9ce:	2300      	movs	r3, #0
 800c9d0:	f100 0114 	add.w	r1, r0, #20
 800c9d4:	f100 0210 	add.w	r2, r0, #16
 800c9d8:	4618      	mov	r0, r3
 800c9da:	4553      	cmp	r3, sl
 800c9dc:	db33      	blt.n	800ca46 <__lshift+0xb6>
 800c9de:	6920      	ldr	r0, [r4, #16]
 800c9e0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c9e4:	f104 0314 	add.w	r3, r4, #20
 800c9e8:	f019 091f 	ands.w	r9, r9, #31
 800c9ec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c9f0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c9f4:	d02b      	beq.n	800ca4e <__lshift+0xbe>
 800c9f6:	f1c9 0e20 	rsb	lr, r9, #32
 800c9fa:	468a      	mov	sl, r1
 800c9fc:	2200      	movs	r2, #0
 800c9fe:	6818      	ldr	r0, [r3, #0]
 800ca00:	fa00 f009 	lsl.w	r0, r0, r9
 800ca04:	4310      	orrs	r0, r2
 800ca06:	f84a 0b04 	str.w	r0, [sl], #4
 800ca0a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca0e:	459c      	cmp	ip, r3
 800ca10:	fa22 f20e 	lsr.w	r2, r2, lr
 800ca14:	d8f3      	bhi.n	800c9fe <__lshift+0x6e>
 800ca16:	ebac 0304 	sub.w	r3, ip, r4
 800ca1a:	3b15      	subs	r3, #21
 800ca1c:	f023 0303 	bic.w	r3, r3, #3
 800ca20:	3304      	adds	r3, #4
 800ca22:	f104 0015 	add.w	r0, r4, #21
 800ca26:	4584      	cmp	ip, r0
 800ca28:	bf38      	it	cc
 800ca2a:	2304      	movcc	r3, #4
 800ca2c:	50ca      	str	r2, [r1, r3]
 800ca2e:	b10a      	cbz	r2, 800ca34 <__lshift+0xa4>
 800ca30:	f108 0602 	add.w	r6, r8, #2
 800ca34:	3e01      	subs	r6, #1
 800ca36:	4638      	mov	r0, r7
 800ca38:	612e      	str	r6, [r5, #16]
 800ca3a:	4621      	mov	r1, r4
 800ca3c:	f7ff fdda 	bl	800c5f4 <_Bfree>
 800ca40:	4628      	mov	r0, r5
 800ca42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca46:	f842 0f04 	str.w	r0, [r2, #4]!
 800ca4a:	3301      	adds	r3, #1
 800ca4c:	e7c5      	b.n	800c9da <__lshift+0x4a>
 800ca4e:	3904      	subs	r1, #4
 800ca50:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca54:	f841 2f04 	str.w	r2, [r1, #4]!
 800ca58:	459c      	cmp	ip, r3
 800ca5a:	d8f9      	bhi.n	800ca50 <__lshift+0xc0>
 800ca5c:	e7ea      	b.n	800ca34 <__lshift+0xa4>
 800ca5e:	bf00      	nop
 800ca60:	0800d778 	.word	0x0800d778
 800ca64:	0800d789 	.word	0x0800d789

0800ca68 <__mcmp>:
 800ca68:	690a      	ldr	r2, [r1, #16]
 800ca6a:	4603      	mov	r3, r0
 800ca6c:	6900      	ldr	r0, [r0, #16]
 800ca6e:	1a80      	subs	r0, r0, r2
 800ca70:	b530      	push	{r4, r5, lr}
 800ca72:	d10e      	bne.n	800ca92 <__mcmp+0x2a>
 800ca74:	3314      	adds	r3, #20
 800ca76:	3114      	adds	r1, #20
 800ca78:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ca7c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ca80:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ca84:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ca88:	4295      	cmp	r5, r2
 800ca8a:	d003      	beq.n	800ca94 <__mcmp+0x2c>
 800ca8c:	d205      	bcs.n	800ca9a <__mcmp+0x32>
 800ca8e:	f04f 30ff 	mov.w	r0, #4294967295
 800ca92:	bd30      	pop	{r4, r5, pc}
 800ca94:	42a3      	cmp	r3, r4
 800ca96:	d3f3      	bcc.n	800ca80 <__mcmp+0x18>
 800ca98:	e7fb      	b.n	800ca92 <__mcmp+0x2a>
 800ca9a:	2001      	movs	r0, #1
 800ca9c:	e7f9      	b.n	800ca92 <__mcmp+0x2a>
	...

0800caa0 <__mdiff>:
 800caa0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800caa4:	4689      	mov	r9, r1
 800caa6:	4606      	mov	r6, r0
 800caa8:	4611      	mov	r1, r2
 800caaa:	4648      	mov	r0, r9
 800caac:	4614      	mov	r4, r2
 800caae:	f7ff ffdb 	bl	800ca68 <__mcmp>
 800cab2:	1e05      	subs	r5, r0, #0
 800cab4:	d112      	bne.n	800cadc <__mdiff+0x3c>
 800cab6:	4629      	mov	r1, r5
 800cab8:	4630      	mov	r0, r6
 800caba:	f7ff fd5b 	bl	800c574 <_Balloc>
 800cabe:	4602      	mov	r2, r0
 800cac0:	b928      	cbnz	r0, 800cace <__mdiff+0x2e>
 800cac2:	4b3f      	ldr	r3, [pc, #252]	@ (800cbc0 <__mdiff+0x120>)
 800cac4:	f240 2137 	movw	r1, #567	@ 0x237
 800cac8:	483e      	ldr	r0, [pc, #248]	@ (800cbc4 <__mdiff+0x124>)
 800caca:	f000 fcc7 	bl	800d45c <__assert_func>
 800cace:	2301      	movs	r3, #1
 800cad0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cad4:	4610      	mov	r0, r2
 800cad6:	b003      	add	sp, #12
 800cad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cadc:	bfbc      	itt	lt
 800cade:	464b      	movlt	r3, r9
 800cae0:	46a1      	movlt	r9, r4
 800cae2:	4630      	mov	r0, r6
 800cae4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800cae8:	bfba      	itte	lt
 800caea:	461c      	movlt	r4, r3
 800caec:	2501      	movlt	r5, #1
 800caee:	2500      	movge	r5, #0
 800caf0:	f7ff fd40 	bl	800c574 <_Balloc>
 800caf4:	4602      	mov	r2, r0
 800caf6:	b918      	cbnz	r0, 800cb00 <__mdiff+0x60>
 800caf8:	4b31      	ldr	r3, [pc, #196]	@ (800cbc0 <__mdiff+0x120>)
 800cafa:	f240 2145 	movw	r1, #581	@ 0x245
 800cafe:	e7e3      	b.n	800cac8 <__mdiff+0x28>
 800cb00:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800cb04:	6926      	ldr	r6, [r4, #16]
 800cb06:	60c5      	str	r5, [r0, #12]
 800cb08:	f109 0310 	add.w	r3, r9, #16
 800cb0c:	f109 0514 	add.w	r5, r9, #20
 800cb10:	f104 0e14 	add.w	lr, r4, #20
 800cb14:	f100 0b14 	add.w	fp, r0, #20
 800cb18:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800cb1c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800cb20:	9301      	str	r3, [sp, #4]
 800cb22:	46d9      	mov	r9, fp
 800cb24:	f04f 0c00 	mov.w	ip, #0
 800cb28:	9b01      	ldr	r3, [sp, #4]
 800cb2a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800cb2e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800cb32:	9301      	str	r3, [sp, #4]
 800cb34:	fa1f f38a 	uxth.w	r3, sl
 800cb38:	4619      	mov	r1, r3
 800cb3a:	b283      	uxth	r3, r0
 800cb3c:	1acb      	subs	r3, r1, r3
 800cb3e:	0c00      	lsrs	r0, r0, #16
 800cb40:	4463      	add	r3, ip
 800cb42:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800cb46:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800cb4a:	b29b      	uxth	r3, r3
 800cb4c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800cb50:	4576      	cmp	r6, lr
 800cb52:	f849 3b04 	str.w	r3, [r9], #4
 800cb56:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cb5a:	d8e5      	bhi.n	800cb28 <__mdiff+0x88>
 800cb5c:	1b33      	subs	r3, r6, r4
 800cb5e:	3b15      	subs	r3, #21
 800cb60:	f023 0303 	bic.w	r3, r3, #3
 800cb64:	3415      	adds	r4, #21
 800cb66:	3304      	adds	r3, #4
 800cb68:	42a6      	cmp	r6, r4
 800cb6a:	bf38      	it	cc
 800cb6c:	2304      	movcc	r3, #4
 800cb6e:	441d      	add	r5, r3
 800cb70:	445b      	add	r3, fp
 800cb72:	461e      	mov	r6, r3
 800cb74:	462c      	mov	r4, r5
 800cb76:	4544      	cmp	r4, r8
 800cb78:	d30e      	bcc.n	800cb98 <__mdiff+0xf8>
 800cb7a:	f108 0103 	add.w	r1, r8, #3
 800cb7e:	1b49      	subs	r1, r1, r5
 800cb80:	f021 0103 	bic.w	r1, r1, #3
 800cb84:	3d03      	subs	r5, #3
 800cb86:	45a8      	cmp	r8, r5
 800cb88:	bf38      	it	cc
 800cb8a:	2100      	movcc	r1, #0
 800cb8c:	440b      	add	r3, r1
 800cb8e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cb92:	b191      	cbz	r1, 800cbba <__mdiff+0x11a>
 800cb94:	6117      	str	r7, [r2, #16]
 800cb96:	e79d      	b.n	800cad4 <__mdiff+0x34>
 800cb98:	f854 1b04 	ldr.w	r1, [r4], #4
 800cb9c:	46e6      	mov	lr, ip
 800cb9e:	0c08      	lsrs	r0, r1, #16
 800cba0:	fa1c fc81 	uxtah	ip, ip, r1
 800cba4:	4471      	add	r1, lr
 800cba6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800cbaa:	b289      	uxth	r1, r1
 800cbac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800cbb0:	f846 1b04 	str.w	r1, [r6], #4
 800cbb4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cbb8:	e7dd      	b.n	800cb76 <__mdiff+0xd6>
 800cbba:	3f01      	subs	r7, #1
 800cbbc:	e7e7      	b.n	800cb8e <__mdiff+0xee>
 800cbbe:	bf00      	nop
 800cbc0:	0800d778 	.word	0x0800d778
 800cbc4:	0800d789 	.word	0x0800d789

0800cbc8 <__d2b>:
 800cbc8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cbcc:	460f      	mov	r7, r1
 800cbce:	2101      	movs	r1, #1
 800cbd0:	ec59 8b10 	vmov	r8, r9, d0
 800cbd4:	4616      	mov	r6, r2
 800cbd6:	f7ff fccd 	bl	800c574 <_Balloc>
 800cbda:	4604      	mov	r4, r0
 800cbdc:	b930      	cbnz	r0, 800cbec <__d2b+0x24>
 800cbde:	4602      	mov	r2, r0
 800cbe0:	4b23      	ldr	r3, [pc, #140]	@ (800cc70 <__d2b+0xa8>)
 800cbe2:	4824      	ldr	r0, [pc, #144]	@ (800cc74 <__d2b+0xac>)
 800cbe4:	f240 310f 	movw	r1, #783	@ 0x30f
 800cbe8:	f000 fc38 	bl	800d45c <__assert_func>
 800cbec:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cbf0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cbf4:	b10d      	cbz	r5, 800cbfa <__d2b+0x32>
 800cbf6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cbfa:	9301      	str	r3, [sp, #4]
 800cbfc:	f1b8 0300 	subs.w	r3, r8, #0
 800cc00:	d023      	beq.n	800cc4a <__d2b+0x82>
 800cc02:	4668      	mov	r0, sp
 800cc04:	9300      	str	r3, [sp, #0]
 800cc06:	f7ff fd7c 	bl	800c702 <__lo0bits>
 800cc0a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800cc0e:	b1d0      	cbz	r0, 800cc46 <__d2b+0x7e>
 800cc10:	f1c0 0320 	rsb	r3, r0, #32
 800cc14:	fa02 f303 	lsl.w	r3, r2, r3
 800cc18:	430b      	orrs	r3, r1
 800cc1a:	40c2      	lsrs	r2, r0
 800cc1c:	6163      	str	r3, [r4, #20]
 800cc1e:	9201      	str	r2, [sp, #4]
 800cc20:	9b01      	ldr	r3, [sp, #4]
 800cc22:	61a3      	str	r3, [r4, #24]
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	bf0c      	ite	eq
 800cc28:	2201      	moveq	r2, #1
 800cc2a:	2202      	movne	r2, #2
 800cc2c:	6122      	str	r2, [r4, #16]
 800cc2e:	b1a5      	cbz	r5, 800cc5a <__d2b+0x92>
 800cc30:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800cc34:	4405      	add	r5, r0
 800cc36:	603d      	str	r5, [r7, #0]
 800cc38:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800cc3c:	6030      	str	r0, [r6, #0]
 800cc3e:	4620      	mov	r0, r4
 800cc40:	b003      	add	sp, #12
 800cc42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cc46:	6161      	str	r1, [r4, #20]
 800cc48:	e7ea      	b.n	800cc20 <__d2b+0x58>
 800cc4a:	a801      	add	r0, sp, #4
 800cc4c:	f7ff fd59 	bl	800c702 <__lo0bits>
 800cc50:	9b01      	ldr	r3, [sp, #4]
 800cc52:	6163      	str	r3, [r4, #20]
 800cc54:	3020      	adds	r0, #32
 800cc56:	2201      	movs	r2, #1
 800cc58:	e7e8      	b.n	800cc2c <__d2b+0x64>
 800cc5a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cc5e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800cc62:	6038      	str	r0, [r7, #0]
 800cc64:	6918      	ldr	r0, [r3, #16]
 800cc66:	f7ff fd2d 	bl	800c6c4 <__hi0bits>
 800cc6a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cc6e:	e7e5      	b.n	800cc3c <__d2b+0x74>
 800cc70:	0800d778 	.word	0x0800d778
 800cc74:	0800d789 	.word	0x0800d789

0800cc78 <__ssputs_r>:
 800cc78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc7c:	688e      	ldr	r6, [r1, #8]
 800cc7e:	461f      	mov	r7, r3
 800cc80:	42be      	cmp	r6, r7
 800cc82:	680b      	ldr	r3, [r1, #0]
 800cc84:	4682      	mov	sl, r0
 800cc86:	460c      	mov	r4, r1
 800cc88:	4690      	mov	r8, r2
 800cc8a:	d82d      	bhi.n	800cce8 <__ssputs_r+0x70>
 800cc8c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cc90:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800cc94:	d026      	beq.n	800cce4 <__ssputs_r+0x6c>
 800cc96:	6965      	ldr	r5, [r4, #20]
 800cc98:	6909      	ldr	r1, [r1, #16]
 800cc9a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cc9e:	eba3 0901 	sub.w	r9, r3, r1
 800cca2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cca6:	1c7b      	adds	r3, r7, #1
 800cca8:	444b      	add	r3, r9
 800ccaa:	106d      	asrs	r5, r5, #1
 800ccac:	429d      	cmp	r5, r3
 800ccae:	bf38      	it	cc
 800ccb0:	461d      	movcc	r5, r3
 800ccb2:	0553      	lsls	r3, r2, #21
 800ccb4:	d527      	bpl.n	800cd06 <__ssputs_r+0x8e>
 800ccb6:	4629      	mov	r1, r5
 800ccb8:	f7fd fe28 	bl	800a90c <_malloc_r>
 800ccbc:	4606      	mov	r6, r0
 800ccbe:	b360      	cbz	r0, 800cd1a <__ssputs_r+0xa2>
 800ccc0:	6921      	ldr	r1, [r4, #16]
 800ccc2:	464a      	mov	r2, r9
 800ccc4:	f000 fbbc 	bl	800d440 <memcpy>
 800ccc8:	89a3      	ldrh	r3, [r4, #12]
 800ccca:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ccce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ccd2:	81a3      	strh	r3, [r4, #12]
 800ccd4:	6126      	str	r6, [r4, #16]
 800ccd6:	6165      	str	r5, [r4, #20]
 800ccd8:	444e      	add	r6, r9
 800ccda:	eba5 0509 	sub.w	r5, r5, r9
 800ccde:	6026      	str	r6, [r4, #0]
 800cce0:	60a5      	str	r5, [r4, #8]
 800cce2:	463e      	mov	r6, r7
 800cce4:	42be      	cmp	r6, r7
 800cce6:	d900      	bls.n	800ccea <__ssputs_r+0x72>
 800cce8:	463e      	mov	r6, r7
 800ccea:	6820      	ldr	r0, [r4, #0]
 800ccec:	4632      	mov	r2, r6
 800ccee:	4641      	mov	r1, r8
 800ccf0:	f000 fb6a 	bl	800d3c8 <memmove>
 800ccf4:	68a3      	ldr	r3, [r4, #8]
 800ccf6:	1b9b      	subs	r3, r3, r6
 800ccf8:	60a3      	str	r3, [r4, #8]
 800ccfa:	6823      	ldr	r3, [r4, #0]
 800ccfc:	4433      	add	r3, r6
 800ccfe:	6023      	str	r3, [r4, #0]
 800cd00:	2000      	movs	r0, #0
 800cd02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd06:	462a      	mov	r2, r5
 800cd08:	f000 fbec 	bl	800d4e4 <_realloc_r>
 800cd0c:	4606      	mov	r6, r0
 800cd0e:	2800      	cmp	r0, #0
 800cd10:	d1e0      	bne.n	800ccd4 <__ssputs_r+0x5c>
 800cd12:	6921      	ldr	r1, [r4, #16]
 800cd14:	4650      	mov	r0, sl
 800cd16:	f7ff fbe3 	bl	800c4e0 <_free_r>
 800cd1a:	230c      	movs	r3, #12
 800cd1c:	f8ca 3000 	str.w	r3, [sl]
 800cd20:	89a3      	ldrh	r3, [r4, #12]
 800cd22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cd26:	81a3      	strh	r3, [r4, #12]
 800cd28:	f04f 30ff 	mov.w	r0, #4294967295
 800cd2c:	e7e9      	b.n	800cd02 <__ssputs_r+0x8a>
	...

0800cd30 <_svfiprintf_r>:
 800cd30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd34:	4698      	mov	r8, r3
 800cd36:	898b      	ldrh	r3, [r1, #12]
 800cd38:	061b      	lsls	r3, r3, #24
 800cd3a:	b09d      	sub	sp, #116	@ 0x74
 800cd3c:	4607      	mov	r7, r0
 800cd3e:	460d      	mov	r5, r1
 800cd40:	4614      	mov	r4, r2
 800cd42:	d510      	bpl.n	800cd66 <_svfiprintf_r+0x36>
 800cd44:	690b      	ldr	r3, [r1, #16]
 800cd46:	b973      	cbnz	r3, 800cd66 <_svfiprintf_r+0x36>
 800cd48:	2140      	movs	r1, #64	@ 0x40
 800cd4a:	f7fd fddf 	bl	800a90c <_malloc_r>
 800cd4e:	6028      	str	r0, [r5, #0]
 800cd50:	6128      	str	r0, [r5, #16]
 800cd52:	b930      	cbnz	r0, 800cd62 <_svfiprintf_r+0x32>
 800cd54:	230c      	movs	r3, #12
 800cd56:	603b      	str	r3, [r7, #0]
 800cd58:	f04f 30ff 	mov.w	r0, #4294967295
 800cd5c:	b01d      	add	sp, #116	@ 0x74
 800cd5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd62:	2340      	movs	r3, #64	@ 0x40
 800cd64:	616b      	str	r3, [r5, #20]
 800cd66:	2300      	movs	r3, #0
 800cd68:	9309      	str	r3, [sp, #36]	@ 0x24
 800cd6a:	2320      	movs	r3, #32
 800cd6c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cd70:	f8cd 800c 	str.w	r8, [sp, #12]
 800cd74:	2330      	movs	r3, #48	@ 0x30
 800cd76:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800cf14 <_svfiprintf_r+0x1e4>
 800cd7a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cd7e:	f04f 0901 	mov.w	r9, #1
 800cd82:	4623      	mov	r3, r4
 800cd84:	469a      	mov	sl, r3
 800cd86:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cd8a:	b10a      	cbz	r2, 800cd90 <_svfiprintf_r+0x60>
 800cd8c:	2a25      	cmp	r2, #37	@ 0x25
 800cd8e:	d1f9      	bne.n	800cd84 <_svfiprintf_r+0x54>
 800cd90:	ebba 0b04 	subs.w	fp, sl, r4
 800cd94:	d00b      	beq.n	800cdae <_svfiprintf_r+0x7e>
 800cd96:	465b      	mov	r3, fp
 800cd98:	4622      	mov	r2, r4
 800cd9a:	4629      	mov	r1, r5
 800cd9c:	4638      	mov	r0, r7
 800cd9e:	f7ff ff6b 	bl	800cc78 <__ssputs_r>
 800cda2:	3001      	adds	r0, #1
 800cda4:	f000 80a7 	beq.w	800cef6 <_svfiprintf_r+0x1c6>
 800cda8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cdaa:	445a      	add	r2, fp
 800cdac:	9209      	str	r2, [sp, #36]	@ 0x24
 800cdae:	f89a 3000 	ldrb.w	r3, [sl]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	f000 809f 	beq.w	800cef6 <_svfiprintf_r+0x1c6>
 800cdb8:	2300      	movs	r3, #0
 800cdba:	f04f 32ff 	mov.w	r2, #4294967295
 800cdbe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cdc2:	f10a 0a01 	add.w	sl, sl, #1
 800cdc6:	9304      	str	r3, [sp, #16]
 800cdc8:	9307      	str	r3, [sp, #28]
 800cdca:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cdce:	931a      	str	r3, [sp, #104]	@ 0x68
 800cdd0:	4654      	mov	r4, sl
 800cdd2:	2205      	movs	r2, #5
 800cdd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cdd8:	484e      	ldr	r0, [pc, #312]	@ (800cf14 <_svfiprintf_r+0x1e4>)
 800cdda:	f7f3 f9f9 	bl	80001d0 <memchr>
 800cdde:	9a04      	ldr	r2, [sp, #16]
 800cde0:	b9d8      	cbnz	r0, 800ce1a <_svfiprintf_r+0xea>
 800cde2:	06d0      	lsls	r0, r2, #27
 800cde4:	bf44      	itt	mi
 800cde6:	2320      	movmi	r3, #32
 800cde8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cdec:	0711      	lsls	r1, r2, #28
 800cdee:	bf44      	itt	mi
 800cdf0:	232b      	movmi	r3, #43	@ 0x2b
 800cdf2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cdf6:	f89a 3000 	ldrb.w	r3, [sl]
 800cdfa:	2b2a      	cmp	r3, #42	@ 0x2a
 800cdfc:	d015      	beq.n	800ce2a <_svfiprintf_r+0xfa>
 800cdfe:	9a07      	ldr	r2, [sp, #28]
 800ce00:	4654      	mov	r4, sl
 800ce02:	2000      	movs	r0, #0
 800ce04:	f04f 0c0a 	mov.w	ip, #10
 800ce08:	4621      	mov	r1, r4
 800ce0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ce0e:	3b30      	subs	r3, #48	@ 0x30
 800ce10:	2b09      	cmp	r3, #9
 800ce12:	d94b      	bls.n	800ceac <_svfiprintf_r+0x17c>
 800ce14:	b1b0      	cbz	r0, 800ce44 <_svfiprintf_r+0x114>
 800ce16:	9207      	str	r2, [sp, #28]
 800ce18:	e014      	b.n	800ce44 <_svfiprintf_r+0x114>
 800ce1a:	eba0 0308 	sub.w	r3, r0, r8
 800ce1e:	fa09 f303 	lsl.w	r3, r9, r3
 800ce22:	4313      	orrs	r3, r2
 800ce24:	9304      	str	r3, [sp, #16]
 800ce26:	46a2      	mov	sl, r4
 800ce28:	e7d2      	b.n	800cdd0 <_svfiprintf_r+0xa0>
 800ce2a:	9b03      	ldr	r3, [sp, #12]
 800ce2c:	1d19      	adds	r1, r3, #4
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	9103      	str	r1, [sp, #12]
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	bfbb      	ittet	lt
 800ce36:	425b      	neglt	r3, r3
 800ce38:	f042 0202 	orrlt.w	r2, r2, #2
 800ce3c:	9307      	strge	r3, [sp, #28]
 800ce3e:	9307      	strlt	r3, [sp, #28]
 800ce40:	bfb8      	it	lt
 800ce42:	9204      	strlt	r2, [sp, #16]
 800ce44:	7823      	ldrb	r3, [r4, #0]
 800ce46:	2b2e      	cmp	r3, #46	@ 0x2e
 800ce48:	d10a      	bne.n	800ce60 <_svfiprintf_r+0x130>
 800ce4a:	7863      	ldrb	r3, [r4, #1]
 800ce4c:	2b2a      	cmp	r3, #42	@ 0x2a
 800ce4e:	d132      	bne.n	800ceb6 <_svfiprintf_r+0x186>
 800ce50:	9b03      	ldr	r3, [sp, #12]
 800ce52:	1d1a      	adds	r2, r3, #4
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	9203      	str	r2, [sp, #12]
 800ce58:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ce5c:	3402      	adds	r4, #2
 800ce5e:	9305      	str	r3, [sp, #20]
 800ce60:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800cf24 <_svfiprintf_r+0x1f4>
 800ce64:	7821      	ldrb	r1, [r4, #0]
 800ce66:	2203      	movs	r2, #3
 800ce68:	4650      	mov	r0, sl
 800ce6a:	f7f3 f9b1 	bl	80001d0 <memchr>
 800ce6e:	b138      	cbz	r0, 800ce80 <_svfiprintf_r+0x150>
 800ce70:	9b04      	ldr	r3, [sp, #16]
 800ce72:	eba0 000a 	sub.w	r0, r0, sl
 800ce76:	2240      	movs	r2, #64	@ 0x40
 800ce78:	4082      	lsls	r2, r0
 800ce7a:	4313      	orrs	r3, r2
 800ce7c:	3401      	adds	r4, #1
 800ce7e:	9304      	str	r3, [sp, #16]
 800ce80:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce84:	4824      	ldr	r0, [pc, #144]	@ (800cf18 <_svfiprintf_r+0x1e8>)
 800ce86:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ce8a:	2206      	movs	r2, #6
 800ce8c:	f7f3 f9a0 	bl	80001d0 <memchr>
 800ce90:	2800      	cmp	r0, #0
 800ce92:	d036      	beq.n	800cf02 <_svfiprintf_r+0x1d2>
 800ce94:	4b21      	ldr	r3, [pc, #132]	@ (800cf1c <_svfiprintf_r+0x1ec>)
 800ce96:	bb1b      	cbnz	r3, 800cee0 <_svfiprintf_r+0x1b0>
 800ce98:	9b03      	ldr	r3, [sp, #12]
 800ce9a:	3307      	adds	r3, #7
 800ce9c:	f023 0307 	bic.w	r3, r3, #7
 800cea0:	3308      	adds	r3, #8
 800cea2:	9303      	str	r3, [sp, #12]
 800cea4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cea6:	4433      	add	r3, r6
 800cea8:	9309      	str	r3, [sp, #36]	@ 0x24
 800ceaa:	e76a      	b.n	800cd82 <_svfiprintf_r+0x52>
 800ceac:	fb0c 3202 	mla	r2, ip, r2, r3
 800ceb0:	460c      	mov	r4, r1
 800ceb2:	2001      	movs	r0, #1
 800ceb4:	e7a8      	b.n	800ce08 <_svfiprintf_r+0xd8>
 800ceb6:	2300      	movs	r3, #0
 800ceb8:	3401      	adds	r4, #1
 800ceba:	9305      	str	r3, [sp, #20]
 800cebc:	4619      	mov	r1, r3
 800cebe:	f04f 0c0a 	mov.w	ip, #10
 800cec2:	4620      	mov	r0, r4
 800cec4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cec8:	3a30      	subs	r2, #48	@ 0x30
 800ceca:	2a09      	cmp	r2, #9
 800cecc:	d903      	bls.n	800ced6 <_svfiprintf_r+0x1a6>
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d0c6      	beq.n	800ce60 <_svfiprintf_r+0x130>
 800ced2:	9105      	str	r1, [sp, #20]
 800ced4:	e7c4      	b.n	800ce60 <_svfiprintf_r+0x130>
 800ced6:	fb0c 2101 	mla	r1, ip, r1, r2
 800ceda:	4604      	mov	r4, r0
 800cedc:	2301      	movs	r3, #1
 800cede:	e7f0      	b.n	800cec2 <_svfiprintf_r+0x192>
 800cee0:	ab03      	add	r3, sp, #12
 800cee2:	9300      	str	r3, [sp, #0]
 800cee4:	462a      	mov	r2, r5
 800cee6:	4b0e      	ldr	r3, [pc, #56]	@ (800cf20 <_svfiprintf_r+0x1f0>)
 800cee8:	a904      	add	r1, sp, #16
 800ceea:	4638      	mov	r0, r7
 800ceec:	f7fd fe3a 	bl	800ab64 <_printf_float>
 800cef0:	1c42      	adds	r2, r0, #1
 800cef2:	4606      	mov	r6, r0
 800cef4:	d1d6      	bne.n	800cea4 <_svfiprintf_r+0x174>
 800cef6:	89ab      	ldrh	r3, [r5, #12]
 800cef8:	065b      	lsls	r3, r3, #25
 800cefa:	f53f af2d 	bmi.w	800cd58 <_svfiprintf_r+0x28>
 800cefe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cf00:	e72c      	b.n	800cd5c <_svfiprintf_r+0x2c>
 800cf02:	ab03      	add	r3, sp, #12
 800cf04:	9300      	str	r3, [sp, #0]
 800cf06:	462a      	mov	r2, r5
 800cf08:	4b05      	ldr	r3, [pc, #20]	@ (800cf20 <_svfiprintf_r+0x1f0>)
 800cf0a:	a904      	add	r1, sp, #16
 800cf0c:	4638      	mov	r0, r7
 800cf0e:	f7fe f8c1 	bl	800b094 <_printf_i>
 800cf12:	e7ed      	b.n	800cef0 <_svfiprintf_r+0x1c0>
 800cf14:	0800d8e0 	.word	0x0800d8e0
 800cf18:	0800d8ea 	.word	0x0800d8ea
 800cf1c:	0800ab65 	.word	0x0800ab65
 800cf20:	0800cc79 	.word	0x0800cc79
 800cf24:	0800d8e6 	.word	0x0800d8e6

0800cf28 <__sfputc_r>:
 800cf28:	6893      	ldr	r3, [r2, #8]
 800cf2a:	3b01      	subs	r3, #1
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	b410      	push	{r4}
 800cf30:	6093      	str	r3, [r2, #8]
 800cf32:	da08      	bge.n	800cf46 <__sfputc_r+0x1e>
 800cf34:	6994      	ldr	r4, [r2, #24]
 800cf36:	42a3      	cmp	r3, r4
 800cf38:	db01      	blt.n	800cf3e <__sfputc_r+0x16>
 800cf3a:	290a      	cmp	r1, #10
 800cf3c:	d103      	bne.n	800cf46 <__sfputc_r+0x1e>
 800cf3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cf42:	f7fe bb5c 	b.w	800b5fe <__swbuf_r>
 800cf46:	6813      	ldr	r3, [r2, #0]
 800cf48:	1c58      	adds	r0, r3, #1
 800cf4a:	6010      	str	r0, [r2, #0]
 800cf4c:	7019      	strb	r1, [r3, #0]
 800cf4e:	4608      	mov	r0, r1
 800cf50:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cf54:	4770      	bx	lr

0800cf56 <__sfputs_r>:
 800cf56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf58:	4606      	mov	r6, r0
 800cf5a:	460f      	mov	r7, r1
 800cf5c:	4614      	mov	r4, r2
 800cf5e:	18d5      	adds	r5, r2, r3
 800cf60:	42ac      	cmp	r4, r5
 800cf62:	d101      	bne.n	800cf68 <__sfputs_r+0x12>
 800cf64:	2000      	movs	r0, #0
 800cf66:	e007      	b.n	800cf78 <__sfputs_r+0x22>
 800cf68:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf6c:	463a      	mov	r2, r7
 800cf6e:	4630      	mov	r0, r6
 800cf70:	f7ff ffda 	bl	800cf28 <__sfputc_r>
 800cf74:	1c43      	adds	r3, r0, #1
 800cf76:	d1f3      	bne.n	800cf60 <__sfputs_r+0xa>
 800cf78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cf7c <_vfiprintf_r>:
 800cf7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf80:	460d      	mov	r5, r1
 800cf82:	b09d      	sub	sp, #116	@ 0x74
 800cf84:	4614      	mov	r4, r2
 800cf86:	4698      	mov	r8, r3
 800cf88:	4606      	mov	r6, r0
 800cf8a:	b118      	cbz	r0, 800cf94 <_vfiprintf_r+0x18>
 800cf8c:	6a03      	ldr	r3, [r0, #32]
 800cf8e:	b90b      	cbnz	r3, 800cf94 <_vfiprintf_r+0x18>
 800cf90:	f7fe fa2c 	bl	800b3ec <__sinit>
 800cf94:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cf96:	07d9      	lsls	r1, r3, #31
 800cf98:	d405      	bmi.n	800cfa6 <_vfiprintf_r+0x2a>
 800cf9a:	89ab      	ldrh	r3, [r5, #12]
 800cf9c:	059a      	lsls	r2, r3, #22
 800cf9e:	d402      	bmi.n	800cfa6 <_vfiprintf_r+0x2a>
 800cfa0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cfa2:	f7fe fc4e 	bl	800b842 <__retarget_lock_acquire_recursive>
 800cfa6:	89ab      	ldrh	r3, [r5, #12]
 800cfa8:	071b      	lsls	r3, r3, #28
 800cfaa:	d501      	bpl.n	800cfb0 <_vfiprintf_r+0x34>
 800cfac:	692b      	ldr	r3, [r5, #16]
 800cfae:	b99b      	cbnz	r3, 800cfd8 <_vfiprintf_r+0x5c>
 800cfb0:	4629      	mov	r1, r5
 800cfb2:	4630      	mov	r0, r6
 800cfb4:	f7fe fb62 	bl	800b67c <__swsetup_r>
 800cfb8:	b170      	cbz	r0, 800cfd8 <_vfiprintf_r+0x5c>
 800cfba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cfbc:	07dc      	lsls	r4, r3, #31
 800cfbe:	d504      	bpl.n	800cfca <_vfiprintf_r+0x4e>
 800cfc0:	f04f 30ff 	mov.w	r0, #4294967295
 800cfc4:	b01d      	add	sp, #116	@ 0x74
 800cfc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfca:	89ab      	ldrh	r3, [r5, #12]
 800cfcc:	0598      	lsls	r0, r3, #22
 800cfce:	d4f7      	bmi.n	800cfc0 <_vfiprintf_r+0x44>
 800cfd0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cfd2:	f7fe fc37 	bl	800b844 <__retarget_lock_release_recursive>
 800cfd6:	e7f3      	b.n	800cfc0 <_vfiprintf_r+0x44>
 800cfd8:	2300      	movs	r3, #0
 800cfda:	9309      	str	r3, [sp, #36]	@ 0x24
 800cfdc:	2320      	movs	r3, #32
 800cfde:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cfe2:	f8cd 800c 	str.w	r8, [sp, #12]
 800cfe6:	2330      	movs	r3, #48	@ 0x30
 800cfe8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d198 <_vfiprintf_r+0x21c>
 800cfec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cff0:	f04f 0901 	mov.w	r9, #1
 800cff4:	4623      	mov	r3, r4
 800cff6:	469a      	mov	sl, r3
 800cff8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cffc:	b10a      	cbz	r2, 800d002 <_vfiprintf_r+0x86>
 800cffe:	2a25      	cmp	r2, #37	@ 0x25
 800d000:	d1f9      	bne.n	800cff6 <_vfiprintf_r+0x7a>
 800d002:	ebba 0b04 	subs.w	fp, sl, r4
 800d006:	d00b      	beq.n	800d020 <_vfiprintf_r+0xa4>
 800d008:	465b      	mov	r3, fp
 800d00a:	4622      	mov	r2, r4
 800d00c:	4629      	mov	r1, r5
 800d00e:	4630      	mov	r0, r6
 800d010:	f7ff ffa1 	bl	800cf56 <__sfputs_r>
 800d014:	3001      	adds	r0, #1
 800d016:	f000 80a7 	beq.w	800d168 <_vfiprintf_r+0x1ec>
 800d01a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d01c:	445a      	add	r2, fp
 800d01e:	9209      	str	r2, [sp, #36]	@ 0x24
 800d020:	f89a 3000 	ldrb.w	r3, [sl]
 800d024:	2b00      	cmp	r3, #0
 800d026:	f000 809f 	beq.w	800d168 <_vfiprintf_r+0x1ec>
 800d02a:	2300      	movs	r3, #0
 800d02c:	f04f 32ff 	mov.w	r2, #4294967295
 800d030:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d034:	f10a 0a01 	add.w	sl, sl, #1
 800d038:	9304      	str	r3, [sp, #16]
 800d03a:	9307      	str	r3, [sp, #28]
 800d03c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d040:	931a      	str	r3, [sp, #104]	@ 0x68
 800d042:	4654      	mov	r4, sl
 800d044:	2205      	movs	r2, #5
 800d046:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d04a:	4853      	ldr	r0, [pc, #332]	@ (800d198 <_vfiprintf_r+0x21c>)
 800d04c:	f7f3 f8c0 	bl	80001d0 <memchr>
 800d050:	9a04      	ldr	r2, [sp, #16]
 800d052:	b9d8      	cbnz	r0, 800d08c <_vfiprintf_r+0x110>
 800d054:	06d1      	lsls	r1, r2, #27
 800d056:	bf44      	itt	mi
 800d058:	2320      	movmi	r3, #32
 800d05a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d05e:	0713      	lsls	r3, r2, #28
 800d060:	bf44      	itt	mi
 800d062:	232b      	movmi	r3, #43	@ 0x2b
 800d064:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d068:	f89a 3000 	ldrb.w	r3, [sl]
 800d06c:	2b2a      	cmp	r3, #42	@ 0x2a
 800d06e:	d015      	beq.n	800d09c <_vfiprintf_r+0x120>
 800d070:	9a07      	ldr	r2, [sp, #28]
 800d072:	4654      	mov	r4, sl
 800d074:	2000      	movs	r0, #0
 800d076:	f04f 0c0a 	mov.w	ip, #10
 800d07a:	4621      	mov	r1, r4
 800d07c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d080:	3b30      	subs	r3, #48	@ 0x30
 800d082:	2b09      	cmp	r3, #9
 800d084:	d94b      	bls.n	800d11e <_vfiprintf_r+0x1a2>
 800d086:	b1b0      	cbz	r0, 800d0b6 <_vfiprintf_r+0x13a>
 800d088:	9207      	str	r2, [sp, #28]
 800d08a:	e014      	b.n	800d0b6 <_vfiprintf_r+0x13a>
 800d08c:	eba0 0308 	sub.w	r3, r0, r8
 800d090:	fa09 f303 	lsl.w	r3, r9, r3
 800d094:	4313      	orrs	r3, r2
 800d096:	9304      	str	r3, [sp, #16]
 800d098:	46a2      	mov	sl, r4
 800d09a:	e7d2      	b.n	800d042 <_vfiprintf_r+0xc6>
 800d09c:	9b03      	ldr	r3, [sp, #12]
 800d09e:	1d19      	adds	r1, r3, #4
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	9103      	str	r1, [sp, #12]
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	bfbb      	ittet	lt
 800d0a8:	425b      	neglt	r3, r3
 800d0aa:	f042 0202 	orrlt.w	r2, r2, #2
 800d0ae:	9307      	strge	r3, [sp, #28]
 800d0b0:	9307      	strlt	r3, [sp, #28]
 800d0b2:	bfb8      	it	lt
 800d0b4:	9204      	strlt	r2, [sp, #16]
 800d0b6:	7823      	ldrb	r3, [r4, #0]
 800d0b8:	2b2e      	cmp	r3, #46	@ 0x2e
 800d0ba:	d10a      	bne.n	800d0d2 <_vfiprintf_r+0x156>
 800d0bc:	7863      	ldrb	r3, [r4, #1]
 800d0be:	2b2a      	cmp	r3, #42	@ 0x2a
 800d0c0:	d132      	bne.n	800d128 <_vfiprintf_r+0x1ac>
 800d0c2:	9b03      	ldr	r3, [sp, #12]
 800d0c4:	1d1a      	adds	r2, r3, #4
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	9203      	str	r2, [sp, #12]
 800d0ca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d0ce:	3402      	adds	r4, #2
 800d0d0:	9305      	str	r3, [sp, #20]
 800d0d2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d1a8 <_vfiprintf_r+0x22c>
 800d0d6:	7821      	ldrb	r1, [r4, #0]
 800d0d8:	2203      	movs	r2, #3
 800d0da:	4650      	mov	r0, sl
 800d0dc:	f7f3 f878 	bl	80001d0 <memchr>
 800d0e0:	b138      	cbz	r0, 800d0f2 <_vfiprintf_r+0x176>
 800d0e2:	9b04      	ldr	r3, [sp, #16]
 800d0e4:	eba0 000a 	sub.w	r0, r0, sl
 800d0e8:	2240      	movs	r2, #64	@ 0x40
 800d0ea:	4082      	lsls	r2, r0
 800d0ec:	4313      	orrs	r3, r2
 800d0ee:	3401      	adds	r4, #1
 800d0f0:	9304      	str	r3, [sp, #16]
 800d0f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0f6:	4829      	ldr	r0, [pc, #164]	@ (800d19c <_vfiprintf_r+0x220>)
 800d0f8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d0fc:	2206      	movs	r2, #6
 800d0fe:	f7f3 f867 	bl	80001d0 <memchr>
 800d102:	2800      	cmp	r0, #0
 800d104:	d03f      	beq.n	800d186 <_vfiprintf_r+0x20a>
 800d106:	4b26      	ldr	r3, [pc, #152]	@ (800d1a0 <_vfiprintf_r+0x224>)
 800d108:	bb1b      	cbnz	r3, 800d152 <_vfiprintf_r+0x1d6>
 800d10a:	9b03      	ldr	r3, [sp, #12]
 800d10c:	3307      	adds	r3, #7
 800d10e:	f023 0307 	bic.w	r3, r3, #7
 800d112:	3308      	adds	r3, #8
 800d114:	9303      	str	r3, [sp, #12]
 800d116:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d118:	443b      	add	r3, r7
 800d11a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d11c:	e76a      	b.n	800cff4 <_vfiprintf_r+0x78>
 800d11e:	fb0c 3202 	mla	r2, ip, r2, r3
 800d122:	460c      	mov	r4, r1
 800d124:	2001      	movs	r0, #1
 800d126:	e7a8      	b.n	800d07a <_vfiprintf_r+0xfe>
 800d128:	2300      	movs	r3, #0
 800d12a:	3401      	adds	r4, #1
 800d12c:	9305      	str	r3, [sp, #20]
 800d12e:	4619      	mov	r1, r3
 800d130:	f04f 0c0a 	mov.w	ip, #10
 800d134:	4620      	mov	r0, r4
 800d136:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d13a:	3a30      	subs	r2, #48	@ 0x30
 800d13c:	2a09      	cmp	r2, #9
 800d13e:	d903      	bls.n	800d148 <_vfiprintf_r+0x1cc>
 800d140:	2b00      	cmp	r3, #0
 800d142:	d0c6      	beq.n	800d0d2 <_vfiprintf_r+0x156>
 800d144:	9105      	str	r1, [sp, #20]
 800d146:	e7c4      	b.n	800d0d2 <_vfiprintf_r+0x156>
 800d148:	fb0c 2101 	mla	r1, ip, r1, r2
 800d14c:	4604      	mov	r4, r0
 800d14e:	2301      	movs	r3, #1
 800d150:	e7f0      	b.n	800d134 <_vfiprintf_r+0x1b8>
 800d152:	ab03      	add	r3, sp, #12
 800d154:	9300      	str	r3, [sp, #0]
 800d156:	462a      	mov	r2, r5
 800d158:	4b12      	ldr	r3, [pc, #72]	@ (800d1a4 <_vfiprintf_r+0x228>)
 800d15a:	a904      	add	r1, sp, #16
 800d15c:	4630      	mov	r0, r6
 800d15e:	f7fd fd01 	bl	800ab64 <_printf_float>
 800d162:	4607      	mov	r7, r0
 800d164:	1c78      	adds	r0, r7, #1
 800d166:	d1d6      	bne.n	800d116 <_vfiprintf_r+0x19a>
 800d168:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d16a:	07d9      	lsls	r1, r3, #31
 800d16c:	d405      	bmi.n	800d17a <_vfiprintf_r+0x1fe>
 800d16e:	89ab      	ldrh	r3, [r5, #12]
 800d170:	059a      	lsls	r2, r3, #22
 800d172:	d402      	bmi.n	800d17a <_vfiprintf_r+0x1fe>
 800d174:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d176:	f7fe fb65 	bl	800b844 <__retarget_lock_release_recursive>
 800d17a:	89ab      	ldrh	r3, [r5, #12]
 800d17c:	065b      	lsls	r3, r3, #25
 800d17e:	f53f af1f 	bmi.w	800cfc0 <_vfiprintf_r+0x44>
 800d182:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d184:	e71e      	b.n	800cfc4 <_vfiprintf_r+0x48>
 800d186:	ab03      	add	r3, sp, #12
 800d188:	9300      	str	r3, [sp, #0]
 800d18a:	462a      	mov	r2, r5
 800d18c:	4b05      	ldr	r3, [pc, #20]	@ (800d1a4 <_vfiprintf_r+0x228>)
 800d18e:	a904      	add	r1, sp, #16
 800d190:	4630      	mov	r0, r6
 800d192:	f7fd ff7f 	bl	800b094 <_printf_i>
 800d196:	e7e4      	b.n	800d162 <_vfiprintf_r+0x1e6>
 800d198:	0800d8e0 	.word	0x0800d8e0
 800d19c:	0800d8ea 	.word	0x0800d8ea
 800d1a0:	0800ab65 	.word	0x0800ab65
 800d1a4:	0800cf57 	.word	0x0800cf57
 800d1a8:	0800d8e6 	.word	0x0800d8e6

0800d1ac <__sflush_r>:
 800d1ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d1b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1b4:	0716      	lsls	r6, r2, #28
 800d1b6:	4605      	mov	r5, r0
 800d1b8:	460c      	mov	r4, r1
 800d1ba:	d454      	bmi.n	800d266 <__sflush_r+0xba>
 800d1bc:	684b      	ldr	r3, [r1, #4]
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	dc02      	bgt.n	800d1c8 <__sflush_r+0x1c>
 800d1c2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	dd48      	ble.n	800d25a <__sflush_r+0xae>
 800d1c8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d1ca:	2e00      	cmp	r6, #0
 800d1cc:	d045      	beq.n	800d25a <__sflush_r+0xae>
 800d1ce:	2300      	movs	r3, #0
 800d1d0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d1d4:	682f      	ldr	r7, [r5, #0]
 800d1d6:	6a21      	ldr	r1, [r4, #32]
 800d1d8:	602b      	str	r3, [r5, #0]
 800d1da:	d030      	beq.n	800d23e <__sflush_r+0x92>
 800d1dc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d1de:	89a3      	ldrh	r3, [r4, #12]
 800d1e0:	0759      	lsls	r1, r3, #29
 800d1e2:	d505      	bpl.n	800d1f0 <__sflush_r+0x44>
 800d1e4:	6863      	ldr	r3, [r4, #4]
 800d1e6:	1ad2      	subs	r2, r2, r3
 800d1e8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d1ea:	b10b      	cbz	r3, 800d1f0 <__sflush_r+0x44>
 800d1ec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d1ee:	1ad2      	subs	r2, r2, r3
 800d1f0:	2300      	movs	r3, #0
 800d1f2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d1f4:	6a21      	ldr	r1, [r4, #32]
 800d1f6:	4628      	mov	r0, r5
 800d1f8:	47b0      	blx	r6
 800d1fa:	1c43      	adds	r3, r0, #1
 800d1fc:	89a3      	ldrh	r3, [r4, #12]
 800d1fe:	d106      	bne.n	800d20e <__sflush_r+0x62>
 800d200:	6829      	ldr	r1, [r5, #0]
 800d202:	291d      	cmp	r1, #29
 800d204:	d82b      	bhi.n	800d25e <__sflush_r+0xb2>
 800d206:	4a2a      	ldr	r2, [pc, #168]	@ (800d2b0 <__sflush_r+0x104>)
 800d208:	410a      	asrs	r2, r1
 800d20a:	07d6      	lsls	r6, r2, #31
 800d20c:	d427      	bmi.n	800d25e <__sflush_r+0xb2>
 800d20e:	2200      	movs	r2, #0
 800d210:	6062      	str	r2, [r4, #4]
 800d212:	04d9      	lsls	r1, r3, #19
 800d214:	6922      	ldr	r2, [r4, #16]
 800d216:	6022      	str	r2, [r4, #0]
 800d218:	d504      	bpl.n	800d224 <__sflush_r+0x78>
 800d21a:	1c42      	adds	r2, r0, #1
 800d21c:	d101      	bne.n	800d222 <__sflush_r+0x76>
 800d21e:	682b      	ldr	r3, [r5, #0]
 800d220:	b903      	cbnz	r3, 800d224 <__sflush_r+0x78>
 800d222:	6560      	str	r0, [r4, #84]	@ 0x54
 800d224:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d226:	602f      	str	r7, [r5, #0]
 800d228:	b1b9      	cbz	r1, 800d25a <__sflush_r+0xae>
 800d22a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d22e:	4299      	cmp	r1, r3
 800d230:	d002      	beq.n	800d238 <__sflush_r+0x8c>
 800d232:	4628      	mov	r0, r5
 800d234:	f7ff f954 	bl	800c4e0 <_free_r>
 800d238:	2300      	movs	r3, #0
 800d23a:	6363      	str	r3, [r4, #52]	@ 0x34
 800d23c:	e00d      	b.n	800d25a <__sflush_r+0xae>
 800d23e:	2301      	movs	r3, #1
 800d240:	4628      	mov	r0, r5
 800d242:	47b0      	blx	r6
 800d244:	4602      	mov	r2, r0
 800d246:	1c50      	adds	r0, r2, #1
 800d248:	d1c9      	bne.n	800d1de <__sflush_r+0x32>
 800d24a:	682b      	ldr	r3, [r5, #0]
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d0c6      	beq.n	800d1de <__sflush_r+0x32>
 800d250:	2b1d      	cmp	r3, #29
 800d252:	d001      	beq.n	800d258 <__sflush_r+0xac>
 800d254:	2b16      	cmp	r3, #22
 800d256:	d11e      	bne.n	800d296 <__sflush_r+0xea>
 800d258:	602f      	str	r7, [r5, #0]
 800d25a:	2000      	movs	r0, #0
 800d25c:	e022      	b.n	800d2a4 <__sflush_r+0xf8>
 800d25e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d262:	b21b      	sxth	r3, r3
 800d264:	e01b      	b.n	800d29e <__sflush_r+0xf2>
 800d266:	690f      	ldr	r7, [r1, #16]
 800d268:	2f00      	cmp	r7, #0
 800d26a:	d0f6      	beq.n	800d25a <__sflush_r+0xae>
 800d26c:	0793      	lsls	r3, r2, #30
 800d26e:	680e      	ldr	r6, [r1, #0]
 800d270:	bf08      	it	eq
 800d272:	694b      	ldreq	r3, [r1, #20]
 800d274:	600f      	str	r7, [r1, #0]
 800d276:	bf18      	it	ne
 800d278:	2300      	movne	r3, #0
 800d27a:	eba6 0807 	sub.w	r8, r6, r7
 800d27e:	608b      	str	r3, [r1, #8]
 800d280:	f1b8 0f00 	cmp.w	r8, #0
 800d284:	dde9      	ble.n	800d25a <__sflush_r+0xae>
 800d286:	6a21      	ldr	r1, [r4, #32]
 800d288:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d28a:	4643      	mov	r3, r8
 800d28c:	463a      	mov	r2, r7
 800d28e:	4628      	mov	r0, r5
 800d290:	47b0      	blx	r6
 800d292:	2800      	cmp	r0, #0
 800d294:	dc08      	bgt.n	800d2a8 <__sflush_r+0xfc>
 800d296:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d29a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d29e:	81a3      	strh	r3, [r4, #12]
 800d2a0:	f04f 30ff 	mov.w	r0, #4294967295
 800d2a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2a8:	4407      	add	r7, r0
 800d2aa:	eba8 0800 	sub.w	r8, r8, r0
 800d2ae:	e7e7      	b.n	800d280 <__sflush_r+0xd4>
 800d2b0:	dfbffffe 	.word	0xdfbffffe

0800d2b4 <_fflush_r>:
 800d2b4:	b538      	push	{r3, r4, r5, lr}
 800d2b6:	690b      	ldr	r3, [r1, #16]
 800d2b8:	4605      	mov	r5, r0
 800d2ba:	460c      	mov	r4, r1
 800d2bc:	b913      	cbnz	r3, 800d2c4 <_fflush_r+0x10>
 800d2be:	2500      	movs	r5, #0
 800d2c0:	4628      	mov	r0, r5
 800d2c2:	bd38      	pop	{r3, r4, r5, pc}
 800d2c4:	b118      	cbz	r0, 800d2ce <_fflush_r+0x1a>
 800d2c6:	6a03      	ldr	r3, [r0, #32]
 800d2c8:	b90b      	cbnz	r3, 800d2ce <_fflush_r+0x1a>
 800d2ca:	f7fe f88f 	bl	800b3ec <__sinit>
 800d2ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d0f3      	beq.n	800d2be <_fflush_r+0xa>
 800d2d6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d2d8:	07d0      	lsls	r0, r2, #31
 800d2da:	d404      	bmi.n	800d2e6 <_fflush_r+0x32>
 800d2dc:	0599      	lsls	r1, r3, #22
 800d2de:	d402      	bmi.n	800d2e6 <_fflush_r+0x32>
 800d2e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d2e2:	f7fe faae 	bl	800b842 <__retarget_lock_acquire_recursive>
 800d2e6:	4628      	mov	r0, r5
 800d2e8:	4621      	mov	r1, r4
 800d2ea:	f7ff ff5f 	bl	800d1ac <__sflush_r>
 800d2ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d2f0:	07da      	lsls	r2, r3, #31
 800d2f2:	4605      	mov	r5, r0
 800d2f4:	d4e4      	bmi.n	800d2c0 <_fflush_r+0xc>
 800d2f6:	89a3      	ldrh	r3, [r4, #12]
 800d2f8:	059b      	lsls	r3, r3, #22
 800d2fa:	d4e1      	bmi.n	800d2c0 <_fflush_r+0xc>
 800d2fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d2fe:	f7fe faa1 	bl	800b844 <__retarget_lock_release_recursive>
 800d302:	e7dd      	b.n	800d2c0 <_fflush_r+0xc>

0800d304 <__swhatbuf_r>:
 800d304:	b570      	push	{r4, r5, r6, lr}
 800d306:	460c      	mov	r4, r1
 800d308:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d30c:	2900      	cmp	r1, #0
 800d30e:	b096      	sub	sp, #88	@ 0x58
 800d310:	4615      	mov	r5, r2
 800d312:	461e      	mov	r6, r3
 800d314:	da0d      	bge.n	800d332 <__swhatbuf_r+0x2e>
 800d316:	89a3      	ldrh	r3, [r4, #12]
 800d318:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d31c:	f04f 0100 	mov.w	r1, #0
 800d320:	bf14      	ite	ne
 800d322:	2340      	movne	r3, #64	@ 0x40
 800d324:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d328:	2000      	movs	r0, #0
 800d32a:	6031      	str	r1, [r6, #0]
 800d32c:	602b      	str	r3, [r5, #0]
 800d32e:	b016      	add	sp, #88	@ 0x58
 800d330:	bd70      	pop	{r4, r5, r6, pc}
 800d332:	466a      	mov	r2, sp
 800d334:	f000 f862 	bl	800d3fc <_fstat_r>
 800d338:	2800      	cmp	r0, #0
 800d33a:	dbec      	blt.n	800d316 <__swhatbuf_r+0x12>
 800d33c:	9901      	ldr	r1, [sp, #4]
 800d33e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d342:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d346:	4259      	negs	r1, r3
 800d348:	4159      	adcs	r1, r3
 800d34a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d34e:	e7eb      	b.n	800d328 <__swhatbuf_r+0x24>

0800d350 <__smakebuf_r>:
 800d350:	898b      	ldrh	r3, [r1, #12]
 800d352:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d354:	079d      	lsls	r5, r3, #30
 800d356:	4606      	mov	r6, r0
 800d358:	460c      	mov	r4, r1
 800d35a:	d507      	bpl.n	800d36c <__smakebuf_r+0x1c>
 800d35c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d360:	6023      	str	r3, [r4, #0]
 800d362:	6123      	str	r3, [r4, #16]
 800d364:	2301      	movs	r3, #1
 800d366:	6163      	str	r3, [r4, #20]
 800d368:	b003      	add	sp, #12
 800d36a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d36c:	ab01      	add	r3, sp, #4
 800d36e:	466a      	mov	r2, sp
 800d370:	f7ff ffc8 	bl	800d304 <__swhatbuf_r>
 800d374:	9f00      	ldr	r7, [sp, #0]
 800d376:	4605      	mov	r5, r0
 800d378:	4639      	mov	r1, r7
 800d37a:	4630      	mov	r0, r6
 800d37c:	f7fd fac6 	bl	800a90c <_malloc_r>
 800d380:	b948      	cbnz	r0, 800d396 <__smakebuf_r+0x46>
 800d382:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d386:	059a      	lsls	r2, r3, #22
 800d388:	d4ee      	bmi.n	800d368 <__smakebuf_r+0x18>
 800d38a:	f023 0303 	bic.w	r3, r3, #3
 800d38e:	f043 0302 	orr.w	r3, r3, #2
 800d392:	81a3      	strh	r3, [r4, #12]
 800d394:	e7e2      	b.n	800d35c <__smakebuf_r+0xc>
 800d396:	89a3      	ldrh	r3, [r4, #12]
 800d398:	6020      	str	r0, [r4, #0]
 800d39a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d39e:	81a3      	strh	r3, [r4, #12]
 800d3a0:	9b01      	ldr	r3, [sp, #4]
 800d3a2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d3a6:	b15b      	cbz	r3, 800d3c0 <__smakebuf_r+0x70>
 800d3a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d3ac:	4630      	mov	r0, r6
 800d3ae:	f000 f837 	bl	800d420 <_isatty_r>
 800d3b2:	b128      	cbz	r0, 800d3c0 <__smakebuf_r+0x70>
 800d3b4:	89a3      	ldrh	r3, [r4, #12]
 800d3b6:	f023 0303 	bic.w	r3, r3, #3
 800d3ba:	f043 0301 	orr.w	r3, r3, #1
 800d3be:	81a3      	strh	r3, [r4, #12]
 800d3c0:	89a3      	ldrh	r3, [r4, #12]
 800d3c2:	431d      	orrs	r5, r3
 800d3c4:	81a5      	strh	r5, [r4, #12]
 800d3c6:	e7cf      	b.n	800d368 <__smakebuf_r+0x18>

0800d3c8 <memmove>:
 800d3c8:	4288      	cmp	r0, r1
 800d3ca:	b510      	push	{r4, lr}
 800d3cc:	eb01 0402 	add.w	r4, r1, r2
 800d3d0:	d902      	bls.n	800d3d8 <memmove+0x10>
 800d3d2:	4284      	cmp	r4, r0
 800d3d4:	4623      	mov	r3, r4
 800d3d6:	d807      	bhi.n	800d3e8 <memmove+0x20>
 800d3d8:	1e43      	subs	r3, r0, #1
 800d3da:	42a1      	cmp	r1, r4
 800d3dc:	d008      	beq.n	800d3f0 <memmove+0x28>
 800d3de:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d3e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d3e6:	e7f8      	b.n	800d3da <memmove+0x12>
 800d3e8:	4402      	add	r2, r0
 800d3ea:	4601      	mov	r1, r0
 800d3ec:	428a      	cmp	r2, r1
 800d3ee:	d100      	bne.n	800d3f2 <memmove+0x2a>
 800d3f0:	bd10      	pop	{r4, pc}
 800d3f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d3f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d3fa:	e7f7      	b.n	800d3ec <memmove+0x24>

0800d3fc <_fstat_r>:
 800d3fc:	b538      	push	{r3, r4, r5, lr}
 800d3fe:	4d07      	ldr	r5, [pc, #28]	@ (800d41c <_fstat_r+0x20>)
 800d400:	2300      	movs	r3, #0
 800d402:	4604      	mov	r4, r0
 800d404:	4608      	mov	r0, r1
 800d406:	4611      	mov	r1, r2
 800d408:	602b      	str	r3, [r5, #0]
 800d40a:	f7f4 ff61 	bl	80022d0 <_fstat>
 800d40e:	1c43      	adds	r3, r0, #1
 800d410:	d102      	bne.n	800d418 <_fstat_r+0x1c>
 800d412:	682b      	ldr	r3, [r5, #0]
 800d414:	b103      	cbz	r3, 800d418 <_fstat_r+0x1c>
 800d416:	6023      	str	r3, [r4, #0]
 800d418:	bd38      	pop	{r3, r4, r5, pc}
 800d41a:	bf00      	nop
 800d41c:	20000be8 	.word	0x20000be8

0800d420 <_isatty_r>:
 800d420:	b538      	push	{r3, r4, r5, lr}
 800d422:	4d06      	ldr	r5, [pc, #24]	@ (800d43c <_isatty_r+0x1c>)
 800d424:	2300      	movs	r3, #0
 800d426:	4604      	mov	r4, r0
 800d428:	4608      	mov	r0, r1
 800d42a:	602b      	str	r3, [r5, #0]
 800d42c:	f7f4 ff60 	bl	80022f0 <_isatty>
 800d430:	1c43      	adds	r3, r0, #1
 800d432:	d102      	bne.n	800d43a <_isatty_r+0x1a>
 800d434:	682b      	ldr	r3, [r5, #0]
 800d436:	b103      	cbz	r3, 800d43a <_isatty_r+0x1a>
 800d438:	6023      	str	r3, [r4, #0]
 800d43a:	bd38      	pop	{r3, r4, r5, pc}
 800d43c:	20000be8 	.word	0x20000be8

0800d440 <memcpy>:
 800d440:	440a      	add	r2, r1
 800d442:	4291      	cmp	r1, r2
 800d444:	f100 33ff 	add.w	r3, r0, #4294967295
 800d448:	d100      	bne.n	800d44c <memcpy+0xc>
 800d44a:	4770      	bx	lr
 800d44c:	b510      	push	{r4, lr}
 800d44e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d452:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d456:	4291      	cmp	r1, r2
 800d458:	d1f9      	bne.n	800d44e <memcpy+0xe>
 800d45a:	bd10      	pop	{r4, pc}

0800d45c <__assert_func>:
 800d45c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d45e:	4614      	mov	r4, r2
 800d460:	461a      	mov	r2, r3
 800d462:	4b09      	ldr	r3, [pc, #36]	@ (800d488 <__assert_func+0x2c>)
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	4605      	mov	r5, r0
 800d468:	68d8      	ldr	r0, [r3, #12]
 800d46a:	b954      	cbnz	r4, 800d482 <__assert_func+0x26>
 800d46c:	4b07      	ldr	r3, [pc, #28]	@ (800d48c <__assert_func+0x30>)
 800d46e:	461c      	mov	r4, r3
 800d470:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d474:	9100      	str	r1, [sp, #0]
 800d476:	462b      	mov	r3, r5
 800d478:	4905      	ldr	r1, [pc, #20]	@ (800d490 <__assert_func+0x34>)
 800d47a:	f000 f86f 	bl	800d55c <fiprintf>
 800d47e:	f000 f87f 	bl	800d580 <abort>
 800d482:	4b04      	ldr	r3, [pc, #16]	@ (800d494 <__assert_func+0x38>)
 800d484:	e7f4      	b.n	800d470 <__assert_func+0x14>
 800d486:	bf00      	nop
 800d488:	20000038 	.word	0x20000038
 800d48c:	0800d936 	.word	0x0800d936
 800d490:	0800d908 	.word	0x0800d908
 800d494:	0800d8fb 	.word	0x0800d8fb

0800d498 <_calloc_r>:
 800d498:	b570      	push	{r4, r5, r6, lr}
 800d49a:	fba1 5402 	umull	r5, r4, r1, r2
 800d49e:	b93c      	cbnz	r4, 800d4b0 <_calloc_r+0x18>
 800d4a0:	4629      	mov	r1, r5
 800d4a2:	f7fd fa33 	bl	800a90c <_malloc_r>
 800d4a6:	4606      	mov	r6, r0
 800d4a8:	b928      	cbnz	r0, 800d4b6 <_calloc_r+0x1e>
 800d4aa:	2600      	movs	r6, #0
 800d4ac:	4630      	mov	r0, r6
 800d4ae:	bd70      	pop	{r4, r5, r6, pc}
 800d4b0:	220c      	movs	r2, #12
 800d4b2:	6002      	str	r2, [r0, #0]
 800d4b4:	e7f9      	b.n	800d4aa <_calloc_r+0x12>
 800d4b6:	462a      	mov	r2, r5
 800d4b8:	4621      	mov	r1, r4
 800d4ba:	f7fe f935 	bl	800b728 <memset>
 800d4be:	e7f5      	b.n	800d4ac <_calloc_r+0x14>

0800d4c0 <__ascii_mbtowc>:
 800d4c0:	b082      	sub	sp, #8
 800d4c2:	b901      	cbnz	r1, 800d4c6 <__ascii_mbtowc+0x6>
 800d4c4:	a901      	add	r1, sp, #4
 800d4c6:	b142      	cbz	r2, 800d4da <__ascii_mbtowc+0x1a>
 800d4c8:	b14b      	cbz	r3, 800d4de <__ascii_mbtowc+0x1e>
 800d4ca:	7813      	ldrb	r3, [r2, #0]
 800d4cc:	600b      	str	r3, [r1, #0]
 800d4ce:	7812      	ldrb	r2, [r2, #0]
 800d4d0:	1e10      	subs	r0, r2, #0
 800d4d2:	bf18      	it	ne
 800d4d4:	2001      	movne	r0, #1
 800d4d6:	b002      	add	sp, #8
 800d4d8:	4770      	bx	lr
 800d4da:	4610      	mov	r0, r2
 800d4dc:	e7fb      	b.n	800d4d6 <__ascii_mbtowc+0x16>
 800d4de:	f06f 0001 	mvn.w	r0, #1
 800d4e2:	e7f8      	b.n	800d4d6 <__ascii_mbtowc+0x16>

0800d4e4 <_realloc_r>:
 800d4e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4e8:	4680      	mov	r8, r0
 800d4ea:	4615      	mov	r5, r2
 800d4ec:	460c      	mov	r4, r1
 800d4ee:	b921      	cbnz	r1, 800d4fa <_realloc_r+0x16>
 800d4f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d4f4:	4611      	mov	r1, r2
 800d4f6:	f7fd ba09 	b.w	800a90c <_malloc_r>
 800d4fa:	b92a      	cbnz	r2, 800d508 <_realloc_r+0x24>
 800d4fc:	f7fe fff0 	bl	800c4e0 <_free_r>
 800d500:	2400      	movs	r4, #0
 800d502:	4620      	mov	r0, r4
 800d504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d508:	f000 f841 	bl	800d58e <_malloc_usable_size_r>
 800d50c:	4285      	cmp	r5, r0
 800d50e:	4606      	mov	r6, r0
 800d510:	d802      	bhi.n	800d518 <_realloc_r+0x34>
 800d512:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d516:	d8f4      	bhi.n	800d502 <_realloc_r+0x1e>
 800d518:	4629      	mov	r1, r5
 800d51a:	4640      	mov	r0, r8
 800d51c:	f7fd f9f6 	bl	800a90c <_malloc_r>
 800d520:	4607      	mov	r7, r0
 800d522:	2800      	cmp	r0, #0
 800d524:	d0ec      	beq.n	800d500 <_realloc_r+0x1c>
 800d526:	42b5      	cmp	r5, r6
 800d528:	462a      	mov	r2, r5
 800d52a:	4621      	mov	r1, r4
 800d52c:	bf28      	it	cs
 800d52e:	4632      	movcs	r2, r6
 800d530:	f7ff ff86 	bl	800d440 <memcpy>
 800d534:	4621      	mov	r1, r4
 800d536:	4640      	mov	r0, r8
 800d538:	f7fe ffd2 	bl	800c4e0 <_free_r>
 800d53c:	463c      	mov	r4, r7
 800d53e:	e7e0      	b.n	800d502 <_realloc_r+0x1e>

0800d540 <__ascii_wctomb>:
 800d540:	4603      	mov	r3, r0
 800d542:	4608      	mov	r0, r1
 800d544:	b141      	cbz	r1, 800d558 <__ascii_wctomb+0x18>
 800d546:	2aff      	cmp	r2, #255	@ 0xff
 800d548:	d904      	bls.n	800d554 <__ascii_wctomb+0x14>
 800d54a:	228a      	movs	r2, #138	@ 0x8a
 800d54c:	601a      	str	r2, [r3, #0]
 800d54e:	f04f 30ff 	mov.w	r0, #4294967295
 800d552:	4770      	bx	lr
 800d554:	700a      	strb	r2, [r1, #0]
 800d556:	2001      	movs	r0, #1
 800d558:	4770      	bx	lr
	...

0800d55c <fiprintf>:
 800d55c:	b40e      	push	{r1, r2, r3}
 800d55e:	b503      	push	{r0, r1, lr}
 800d560:	4601      	mov	r1, r0
 800d562:	ab03      	add	r3, sp, #12
 800d564:	4805      	ldr	r0, [pc, #20]	@ (800d57c <fiprintf+0x20>)
 800d566:	f853 2b04 	ldr.w	r2, [r3], #4
 800d56a:	6800      	ldr	r0, [r0, #0]
 800d56c:	9301      	str	r3, [sp, #4]
 800d56e:	f7ff fd05 	bl	800cf7c <_vfiprintf_r>
 800d572:	b002      	add	sp, #8
 800d574:	f85d eb04 	ldr.w	lr, [sp], #4
 800d578:	b003      	add	sp, #12
 800d57a:	4770      	bx	lr
 800d57c:	20000038 	.word	0x20000038

0800d580 <abort>:
 800d580:	b508      	push	{r3, lr}
 800d582:	2006      	movs	r0, #6
 800d584:	f000 f834 	bl	800d5f0 <raise>
 800d588:	2001      	movs	r0, #1
 800d58a:	f7f4 fe51 	bl	8002230 <_exit>

0800d58e <_malloc_usable_size_r>:
 800d58e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d592:	1f18      	subs	r0, r3, #4
 800d594:	2b00      	cmp	r3, #0
 800d596:	bfbc      	itt	lt
 800d598:	580b      	ldrlt	r3, [r1, r0]
 800d59a:	18c0      	addlt	r0, r0, r3
 800d59c:	4770      	bx	lr

0800d59e <_raise_r>:
 800d59e:	291f      	cmp	r1, #31
 800d5a0:	b538      	push	{r3, r4, r5, lr}
 800d5a2:	4605      	mov	r5, r0
 800d5a4:	460c      	mov	r4, r1
 800d5a6:	d904      	bls.n	800d5b2 <_raise_r+0x14>
 800d5a8:	2316      	movs	r3, #22
 800d5aa:	6003      	str	r3, [r0, #0]
 800d5ac:	f04f 30ff 	mov.w	r0, #4294967295
 800d5b0:	bd38      	pop	{r3, r4, r5, pc}
 800d5b2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d5b4:	b112      	cbz	r2, 800d5bc <_raise_r+0x1e>
 800d5b6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d5ba:	b94b      	cbnz	r3, 800d5d0 <_raise_r+0x32>
 800d5bc:	4628      	mov	r0, r5
 800d5be:	f000 f831 	bl	800d624 <_getpid_r>
 800d5c2:	4622      	mov	r2, r4
 800d5c4:	4601      	mov	r1, r0
 800d5c6:	4628      	mov	r0, r5
 800d5c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d5cc:	f000 b818 	b.w	800d600 <_kill_r>
 800d5d0:	2b01      	cmp	r3, #1
 800d5d2:	d00a      	beq.n	800d5ea <_raise_r+0x4c>
 800d5d4:	1c59      	adds	r1, r3, #1
 800d5d6:	d103      	bne.n	800d5e0 <_raise_r+0x42>
 800d5d8:	2316      	movs	r3, #22
 800d5da:	6003      	str	r3, [r0, #0]
 800d5dc:	2001      	movs	r0, #1
 800d5de:	e7e7      	b.n	800d5b0 <_raise_r+0x12>
 800d5e0:	2100      	movs	r1, #0
 800d5e2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d5e6:	4620      	mov	r0, r4
 800d5e8:	4798      	blx	r3
 800d5ea:	2000      	movs	r0, #0
 800d5ec:	e7e0      	b.n	800d5b0 <_raise_r+0x12>
	...

0800d5f0 <raise>:
 800d5f0:	4b02      	ldr	r3, [pc, #8]	@ (800d5fc <raise+0xc>)
 800d5f2:	4601      	mov	r1, r0
 800d5f4:	6818      	ldr	r0, [r3, #0]
 800d5f6:	f7ff bfd2 	b.w	800d59e <_raise_r>
 800d5fa:	bf00      	nop
 800d5fc:	20000038 	.word	0x20000038

0800d600 <_kill_r>:
 800d600:	b538      	push	{r3, r4, r5, lr}
 800d602:	4d07      	ldr	r5, [pc, #28]	@ (800d620 <_kill_r+0x20>)
 800d604:	2300      	movs	r3, #0
 800d606:	4604      	mov	r4, r0
 800d608:	4608      	mov	r0, r1
 800d60a:	4611      	mov	r1, r2
 800d60c:	602b      	str	r3, [r5, #0]
 800d60e:	f7f4 fdff 	bl	8002210 <_kill>
 800d612:	1c43      	adds	r3, r0, #1
 800d614:	d102      	bne.n	800d61c <_kill_r+0x1c>
 800d616:	682b      	ldr	r3, [r5, #0]
 800d618:	b103      	cbz	r3, 800d61c <_kill_r+0x1c>
 800d61a:	6023      	str	r3, [r4, #0]
 800d61c:	bd38      	pop	{r3, r4, r5, pc}
 800d61e:	bf00      	nop
 800d620:	20000be8 	.word	0x20000be8

0800d624 <_getpid_r>:
 800d624:	f7f4 bdec 	b.w	8002200 <_getpid>

0800d628 <_init>:
 800d628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d62a:	bf00      	nop
 800d62c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d62e:	bc08      	pop	{r3}
 800d630:	469e      	mov	lr, r3
 800d632:	4770      	bx	lr

0800d634 <_fini>:
 800d634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d636:	bf00      	nop
 800d638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d63a:	bc08      	pop	{r3}
 800d63c:	469e      	mov	lr, r3
 800d63e:	4770      	bx	lr
